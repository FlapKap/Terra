// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t/test-full.proto

#include "t/test-full.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubMess_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMess_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessOneof_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessOptional_t_2ftest_2dfull_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_t_2ftest_2dfull_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto;
namespace foo {
class SubMess_SubSubMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubMess_SubSubMess> _instance;
} _SubMess_SubSubMess_default_instance_;
class SubMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubMess> _instance;
} _SubMess_default_instance_;
class TestFieldNo15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo15> _instance;
} _TestFieldNo15_default_instance_;
class TestFieldNo16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo16> _instance;
} _TestFieldNo16_default_instance_;
class TestFieldNo2047DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo2047> _instance;
} _TestFieldNo2047_default_instance_;
class TestFieldNo2048DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo2048> _instance;
} _TestFieldNo2048_default_instance_;
class TestFieldNo262143DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo262143> _instance;
} _TestFieldNo262143_default_instance_;
class TestFieldNo262144DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo262144> _instance;
} _TestFieldNo262144_default_instance_;
class TestFieldNo33554431DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo33554431> _instance;
} _TestFieldNo33554431_default_instance_;
class TestFieldNo33554432DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldNo33554432> _instance;
} _TestFieldNo33554432_default_instance_;
class TestMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMess> _instance;
} _TestMess_default_instance_;
class TestMessPackedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessPacked> _instance;
} _TestMessPacked_default_instance_;
class TestMessOptionalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessOptional> _instance;
} _TestMessOptional_default_instance_;
class TestMessOneofDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessOneof> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 test_int32_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_sint32_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_sfixed32_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_int64_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_sint64_;
  ::PROTOBUF_NAMESPACE_ID::int64 test_sfixed64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_uint32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_fixed32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 test_uint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 test_fixed64_;
  float test_float_;
  double test_double_;
  bool test_boolean_;
  int test_enum_small_;
  int test_enum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_bytes_;
  const ::foo::SubMess* test_message_;
} _TestMessOneof_default_instance_;
class TestMessRequiredInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredInt32> _instance;
} _TestMessRequiredInt32_default_instance_;
class TestMessRequiredSInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredSInt32> _instance;
} _TestMessRequiredSInt32_default_instance_;
class TestMessRequiredSFixed32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredSFixed32> _instance;
} _TestMessRequiredSFixed32_default_instance_;
class TestMessRequiredInt64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredInt64> _instance;
} _TestMessRequiredInt64_default_instance_;
class TestMessRequiredSInt64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredSInt64> _instance;
} _TestMessRequiredSInt64_default_instance_;
class TestMessRequiredSFixed64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredSFixed64> _instance;
} _TestMessRequiredSFixed64_default_instance_;
class TestMessRequiredUInt32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredUInt32> _instance;
} _TestMessRequiredUInt32_default_instance_;
class TestMessRequiredFixed32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredFixed32> _instance;
} _TestMessRequiredFixed32_default_instance_;
class TestMessRequiredUInt64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredUInt64> _instance;
} _TestMessRequiredUInt64_default_instance_;
class TestMessRequiredFixed64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredFixed64> _instance;
} _TestMessRequiredFixed64_default_instance_;
class TestMessRequiredFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredFloat> _instance;
} _TestMessRequiredFloat_default_instance_;
class TestMessRequiredDoubleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredDouble> _instance;
} _TestMessRequiredDouble_default_instance_;
class TestMessRequiredBoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredBool> _instance;
} _TestMessRequiredBool_default_instance_;
class TestMessRequiredEnumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredEnum> _instance;
} _TestMessRequiredEnum_default_instance_;
class TestMessRequiredEnumSmallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredEnumSmall> _instance;
} _TestMessRequiredEnumSmall_default_instance_;
class TestMessRequiredStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredString> _instance;
} _TestMessRequiredString_default_instance_;
class TestMessRequiredBytesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredBytes> _instance;
} _TestMessRequiredBytes_default_instance_;
class TestMessRequiredMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessRequiredMessage> _instance;
} _TestMessRequiredMessage_default_instance_;
class EmptyMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyMess> _instance;
} _EmptyMess_default_instance_;
class DefaultRequiredValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultRequiredValues> _instance;
} _DefaultRequiredValues_default_instance_;
class DefaultOptionalValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultOptionalValues> _instance;
} _DefaultOptionalValues_default_instance_;
class LowerCaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LowerCase> _instance;
} _LowerCase_default_instance_;
class AllocValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocValues> _instance;
} _AllocValues_default_instance_;
class TestRequiredFieldsBitmapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestRequiredFieldsBitmap> _instance;
} _TestRequiredFieldsBitmap_default_instance_;
class TestFieldFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFieldFlags> _instance;
} _TestFieldFlags_default_instance_;
class TestMessageCheck_SubMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessageCheck_SubMessage> _instance;
} _TestMessageCheck_SubMessage_default_instance_;
class TestMessageCheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessageCheck> _instance;
} _TestMessageCheck_default_instance_;
class TestMessSubMessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMessSubMess> _instance;
} _TestMessSubMess_default_instance_;
}  // namespace foo
static void InitDefaultsscc_info_AllocValues_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_AllocValues_default_instance_;
    new (ptr) ::foo::AllocValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::AllocValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocValues_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllocValues_t_2ftest_2dfull_2eproto}, {
      &scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.DefaultConstruct();
  *::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get_mutable() = std::string("hi mom\n", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get_mutable());
  ::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.DefaultConstruct();
  *::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get_mutable() = std::string("a \000 character", 13);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get_mutable());
  {
    void* ptr = &::foo::_DefaultOptionalValues_default_instance_;
    new (ptr) ::foo::DefaultOptionalValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::DefaultOptionalValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.DefaultConstruct();
  *::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get_mutable() = std::string("hi mom\n", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get_mutable());
  ::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.DefaultConstruct();
  *::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get_mutable() = std::string("a \000 character", 13);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get_mutable());
  {
    void* ptr = &::foo::_DefaultRequiredValues_default_instance_;
    new (ptr) ::foo::DefaultRequiredValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::DefaultRequiredValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_EmptyMess_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_EmptyMess_default_instance_;
    new (ptr) ::foo::EmptyMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::EmptyMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyMess_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmptyMess_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_LowerCase_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_LowerCase_default_instance_;
    new (ptr) ::foo::LowerCase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::LowerCase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LowerCase_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LowerCase_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_SubMess_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_SubMess_default_instance_;
    new (ptr) ::foo::SubMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::SubMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubMess_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubMess_t_2ftest_2dfull_2eproto}, {
      &scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.DefaultConstruct();
  *::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get_mutable() = std::string("a \000 char", 8);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get_mutable());
  ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.DefaultConstruct();
  *::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get_mutable() = std::string("hello world\n", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get_mutable());
  ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.DefaultConstruct();
  *::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get_mutable() = std::string("hello\000world\n", 12);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get_mutable());
  {
    void* ptr = &::foo::_SubMess_SubSubMess_default_instance_;
    new (ptr) ::foo::SubMess_SubSubMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::SubMess_SubSubMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldFlags_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldFlags_default_instance_;
    new (ptr) ::foo::TestFieldFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldFlags_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldFlags_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo15_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo15_default_instance_;
    new (ptr) ::foo::TestFieldNo15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo15_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo15_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo16_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo16_default_instance_;
    new (ptr) ::foo::TestFieldNo16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo16_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo16_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo2047_default_instance_;
    new (ptr) ::foo::TestFieldNo2047();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo2047::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo2048_default_instance_;
    new (ptr) ::foo::TestFieldNo2048();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo2048::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo262143_default_instance_;
    new (ptr) ::foo::TestFieldNo262143();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo262143::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo262144_default_instance_;
    new (ptr) ::foo::TestFieldNo262144();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo262144::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo33554431_default_instance_;
    new (ptr) ::foo::TestFieldNo33554431();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo33554431::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestFieldNo33554432_default_instance_;
    new (ptr) ::foo::TestFieldNo33554432();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestFieldNo33554432::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMess_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMess_default_instance_;
    new (ptr) ::foo::TestMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMess_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMess_t_2ftest_2dfull_2eproto}, {
      &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessOneof_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessOneof_default_instance_;
    new (ptr) ::foo::TestMessOneof();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessOneof::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessOneof_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessOneof_t_2ftest_2dfull_2eproto}, {
      &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessOptional_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessOptional_default_instance_;
    new (ptr) ::foo::TestMessOptional();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessOptional::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessOptional_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessOptional_t_2ftest_2dfull_2eproto}, {
      &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessPacked_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessPacked_default_instance_;
    new (ptr) ::foo::TestMessPacked();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessPacked::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessPacked_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessPacked_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredBool_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredBool_default_instance_;
    new (ptr) ::foo::TestMessRequiredBool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredBool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredBool_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredBool_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredBytes_default_instance_;
    new (ptr) ::foo::TestMessRequiredBytes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredBytes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredDouble_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredDouble_default_instance_;
    new (ptr) ::foo::TestMessRequiredDouble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredDouble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredDouble_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredDouble_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredEnum_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredEnum_default_instance_;
    new (ptr) ::foo::TestMessRequiredEnum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredEnum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredEnum_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredEnum_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredEnumSmall_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredEnumSmall_default_instance_;
    new (ptr) ::foo::TestMessRequiredEnumSmall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredEnumSmall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredEnumSmall_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredEnumSmall_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredFixed32_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredFixed32_default_instance_;
    new (ptr) ::foo::TestMessRequiredFixed32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredFixed32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredFixed32_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredFixed32_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredFixed64_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredFixed64_default_instance_;
    new (ptr) ::foo::TestMessRequiredFixed64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredFixed64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredFixed64_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredFixed64_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredFloat_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredFloat_default_instance_;
    new (ptr) ::foo::TestMessRequiredFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredFloat_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredFloat_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredInt32_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredInt32_default_instance_;
    new (ptr) ::foo::TestMessRequiredInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredInt32_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredInt32_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredInt64_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredInt64_default_instance_;
    new (ptr) ::foo::TestMessRequiredInt64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredInt64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredInt64_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredInt64_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredMessage_default_instance_;
    new (ptr) ::foo::TestMessRequiredMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto}, {
      &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessRequiredSFixed32_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredSFixed32_default_instance_;
    new (ptr) ::foo::TestMessRequiredSFixed32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredSFixed32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredSFixed32_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredSFixed32_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredSFixed64_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredSFixed64_default_instance_;
    new (ptr) ::foo::TestMessRequiredSFixed64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredSFixed64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredSFixed64_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredSFixed64_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredSInt32_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredSInt32_default_instance_;
    new (ptr) ::foo::TestMessRequiredSInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredSInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredSInt32_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredSInt32_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredSInt64_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredSInt64_default_instance_;
    new (ptr) ::foo::TestMessRequiredSInt64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredSInt64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredSInt64_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredSInt64_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredString_default_instance_;
    new (ptr) ::foo::TestMessRequiredString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredUInt32_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredUInt32_default_instance_;
    new (ptr) ::foo::TestMessRequiredUInt32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredUInt32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredUInt32_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredUInt32_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessRequiredUInt64_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessRequiredUInt64_default_instance_;
    new (ptr) ::foo::TestMessRequiredUInt64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessRequiredUInt64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessRequiredUInt64_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessRequiredUInt64_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestMessSubMess_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessSubMess_default_instance_;
    new (ptr) ::foo::TestMessSubMess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessSubMess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TestMessSubMess_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TestMessSubMess_t_2ftest_2dfull_2eproto}, {
      &scc_info_TestMess_t_2ftest_2dfull_2eproto.base,
      &scc_info_TestMessOptional_t_2ftest_2dfull_2eproto.base,
      &scc_info_TestMessOneof_t_2ftest_2dfull_2eproto.base,
      &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,
      &scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessageCheck_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessageCheck_default_instance_;
    new (ptr) ::foo::TestMessageCheck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessageCheck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestMessageCheck_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestMessageCheck_t_2ftest_2dfull_2eproto}, {
      &scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto.base,}};

static void InitDefaultsscc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestMessageCheck_SubMessage_default_instance_;
    new (ptr) ::foo::TestMessageCheck_SubMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestMessageCheck_SubMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto}, {}};

static void InitDefaultsscc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foo::_TestRequiredFieldsBitmap_default_instance_;
    new (ptr) ::foo::TestRequiredFieldsBitmap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foo::TestRequiredFieldsBitmap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_t_2ftest_2dfull_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_t_2ftest_2dfull_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_t_2ftest_2dfull_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_t_2ftest_2dfull_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, val1_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, rep_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, bytes1_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, str1_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess_SubSubMess, str2_),
  3,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, test_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, val1_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, val2_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, rep_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, sub1_),
  PROTOBUF_FIELD_OFFSET(::foo::SubMess, sub2_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo15, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo15, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo16, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2047, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2047, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2047, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2048, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2048, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo2048, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262143, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262143, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262143, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262144, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262144, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo262144, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554431, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554431, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554431, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554432, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554432, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldNo33554432, test_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_int32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_sint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_int64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_sint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_uint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_fixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_uint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_fixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_float_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_double_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_boolean_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_enum_small_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_enum_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_string_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMess, test_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_int32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_sint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_int64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_sint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_uint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_fixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_uint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_fixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_float_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_double_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_boolean_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_enum_small_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessPacked, test_enum_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_int32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_sint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_int64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_sint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_uint32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_fixed32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_uint64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_fixed64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_float_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_double_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_boolean_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_enum_small_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_enum_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_string_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOptional, test_message_),
  3,
  4,
  7,
  5,
  6,
  9,
  8,
  11,
  10,
  13,
  12,
  14,
  15,
  16,
  17,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOneof, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOneof, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOneof, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_int32_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_sint32_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_sfixed32_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_int64_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_sint64_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_sfixed64_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_uint32_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_fixed32_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_uint64_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_fixed64_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_float_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_double_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_boolean_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_enum_small_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_enum_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_string_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_bytes_),
  offsetof(::foo::TestMessOneofDefaultTypeInternal, test_message_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOneof, opt_int_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessOneof, test_oneof_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt32, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt32, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed32, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredInt64, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSInt64, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredSFixed64, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt32, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed32, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredUInt64, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFixed64, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFloat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredFloat, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredDouble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredDouble, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBool, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnum, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnumSmall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnumSmall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredEnumSmall, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredString, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredBytes, test_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessRequiredMessage, test_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foo::EmptyMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_int32_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_uint32_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_int64_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_uint64_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_float_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_double_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_string_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultRequiredValues, v_bytes_),
  3,
  4,
  5,
  6,
  2,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_int32_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_uint32_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_int64_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_uint64_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_float_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_double_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_string_),
  PROTOBUF_FIELD_OFFSET(::foo::DefaultOptionalValues, v_bytes_),
  3,
  4,
  5,
  6,
  2,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::foo::LowerCase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::LowerCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::LowerCase, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, o_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, r_string_),
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, a_string_),
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, a_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::AllocValues, a_mess_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field1_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field2_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field3_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field4_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field5_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field6_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field7_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field8_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field9_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field10_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field11_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field12_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field13_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field14_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field15_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field16_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field17_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field18_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field19_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field20_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field21_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field22_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field23_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field24_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field25_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field26_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field27_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field28_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field29_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field30_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field31_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field32_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field33_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field34_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field35_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field36_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field37_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field38_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field39_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field40_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field41_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field42_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field43_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field44_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field45_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field46_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field47_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field48_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field49_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field50_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field51_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field52_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field53_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field54_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field55_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field56_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field57_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field58_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field59_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field60_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field61_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field62_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field63_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field64_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field65_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field66_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field67_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field68_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field69_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field70_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field71_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field72_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field73_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field74_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field75_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field76_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field77_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field78_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field79_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field80_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field81_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field82_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field83_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field84_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field85_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field86_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field87_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field88_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field89_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field90_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field91_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field92_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field93_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field94_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field95_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field96_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field97_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field98_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field99_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field100_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field101_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field102_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field103_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field104_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field105_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field106_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field107_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field108_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field109_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field110_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field111_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field112_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field113_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field114_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field115_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field116_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field117_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field118_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field119_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field120_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field121_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field122_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field123_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field124_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field125_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field126_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field127_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field128_),
  PROTOBUF_FIELD_OFFSET(::foo::TestRequiredFieldsBitmap, field129_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  112,
  113,
  114,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  127,
  128,
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, no_flags1_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, no_flags2_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, no_flags3_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, packed_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, packed_deprecated_),
  PROTOBUF_FIELD_OFFSET(::foo::TestFieldFlags, deprecated_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck_SubMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck_SubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck_SubMessage, str_),
  0,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, required_msg_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, repeated_msg_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, optional_msg_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, required_string_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, optional_string_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, required_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessageCheck, optional_bytes_),
  4,
  ~0u,
  5,
  0,
  ~0u,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, rep_mess_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, opt_mess_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, oneof_mess_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, req_mess_),
  PROTOBUF_FIELD_OFFSET(::foo::TestMessSubMess, def_mess_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::foo::SubMess_SubSubMess)},
  { 15, 26, sizeof(::foo::SubMess)},
  { 32, 38, sizeof(::foo::TestFieldNo15)},
  { 39, 45, sizeof(::foo::TestFieldNo16)},
  { 46, 52, sizeof(::foo::TestFieldNo2047)},
  { 53, 59, sizeof(::foo::TestFieldNo2048)},
  { 60, 66, sizeof(::foo::TestFieldNo262143)},
  { 67, 73, sizeof(::foo::TestFieldNo262144)},
  { 74, 80, sizeof(::foo::TestFieldNo33554431)},
  { 81, 87, sizeof(::foo::TestFieldNo33554432)},
  { 88, -1, sizeof(::foo::TestMess)},
  { 111, -1, sizeof(::foo::TestMessPacked)},
  { 131, 154, sizeof(::foo::TestMessOptional)},
  { 172, 197, sizeof(::foo::TestMessOneof)},
  { 216, 222, sizeof(::foo::TestMessRequiredInt32)},
  { 223, 229, sizeof(::foo::TestMessRequiredSInt32)},
  { 230, 236, sizeof(::foo::TestMessRequiredSFixed32)},
  { 237, 243, sizeof(::foo::TestMessRequiredInt64)},
  { 244, 250, sizeof(::foo::TestMessRequiredSInt64)},
  { 251, 257, sizeof(::foo::TestMessRequiredSFixed64)},
  { 258, 264, sizeof(::foo::TestMessRequiredUInt32)},
  { 265, 271, sizeof(::foo::TestMessRequiredFixed32)},
  { 272, 278, sizeof(::foo::TestMessRequiredUInt64)},
  { 279, 285, sizeof(::foo::TestMessRequiredFixed64)},
  { 286, 292, sizeof(::foo::TestMessRequiredFloat)},
  { 293, 299, sizeof(::foo::TestMessRequiredDouble)},
  { 300, 306, sizeof(::foo::TestMessRequiredBool)},
  { 307, 313, sizeof(::foo::TestMessRequiredEnum)},
  { 314, 320, sizeof(::foo::TestMessRequiredEnumSmall)},
  { 321, 327, sizeof(::foo::TestMessRequiredString)},
  { 328, 334, sizeof(::foo::TestMessRequiredBytes)},
  { 335, 341, sizeof(::foo::TestMessRequiredMessage)},
  { 342, -1, sizeof(::foo::EmptyMess)},
  { 347, 360, sizeof(::foo::DefaultRequiredValues)},
  { 368, 381, sizeof(::foo::DefaultOptionalValues)},
  { 389, 395, sizeof(::foo::LowerCase)},
  { 396, 406, sizeof(::foo::AllocValues)},
  { 411, 545, sizeof(::foo::TestRequiredFieldsBitmap)},
  { 674, 685, sizeof(::foo::TestFieldFlags)},
  { 691, 697, sizeof(::foo::TestMessageCheck_SubMessage)},
  { 698, 712, sizeof(::foo::TestMessageCheck)},
  { 721, 731, sizeof(::foo::TestMessSubMess)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_SubMess_SubSubMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_SubMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo2047_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo2048_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo262143_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo262144_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo33554431_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldNo33554432_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessPacked_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessOptional_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessOneof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredInt32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredSInt32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredSFixed32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredInt64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredSInt64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredSFixed64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredUInt32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredFixed32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredUInt64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredFixed64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredBool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredEnum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredEnumSmall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredBytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessRequiredMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_EmptyMess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_DefaultRequiredValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_DefaultOptionalValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_LowerCase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_AllocValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestRequiredFieldsBitmap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestFieldFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessageCheck_SubMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessageCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::foo::_TestMessSubMess_default_instance_),
};

const char descriptor_table_protodef_t_2ftest_2dfull_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021t/test-full.proto\022\003foo\032\033protobuf-c/pro"
  "tobuf-c.proto\"\231\002\n\007SubMess\022\014\n\004test\030\004 \002(\005\022"
  "\014\n\004val1\030\006 \001(\005\022\014\n\004val2\030\007 \001(\005\022\013\n\003rep\030\010 \003(\005"
  "\022%\n\004sub1\030\t \001(\0132\027.foo.SubMess.SubSubMess\022"
  "%\n\004sub2\030\n \001(\0132\027.foo.SubMess.SubSubMess\032\210"
  "\001\n\nSubSubMess\022\021\n\004val1\030\001 \001(\005:\003100\022\013\n\003rep\030"
  "\004 \003(\005\022\033\n\006bytes1\030\002 \001(\014:\013a \\000 char\022\032\n\004st"
  "r1\030\003 \001(\t:\014hello world\n\022!\n\004str2\030\005 \001(\t:\014he"
  "llo\000world\nB\005\332\?\002\010\001\"\035\n\rTestFieldNo15\022\014\n\004te"
  "st\030\017 \002(\t\"\035\n\rTestFieldNo16\022\014\n\004test\030\020 \002(\t\""
  " \n\017TestFieldNo2047\022\r\n\004test\030\377\017 \002(\t\" \n\017Tes"
  "tFieldNo2048\022\r\n\004test\030\200\020 \002(\t\"#\n\021TestField"
  "No262143\022\016\n\004test\030\377\377\017 \002(\t\"#\n\021TestFieldNo2"
  "62144\022\016\n\004test\030\200\200\020 \002(\t\"&\n\023TestFieldNo3355"
  "4431\022\017\n\004test\030\377\377\377\017 \002(\t\"&\n\023TestFieldNo3355"
  "4432\022\017\n\004test\030\200\200\200\020 \002(\t\"\273\003\n\010TestMess\022\022\n\nte"
  "st_int32\030\001 \003(\005\022\023\n\013test_sint32\030\002 \003(\021\022\025\n\rt"
  "est_sfixed32\030\003 \003(\017\022\022\n\ntest_int64\030\004 \003(\003\022\023"
  "\n\013test_sint64\030\005 \003(\022\022\025\n\rtest_sfixed64\030\006 \003"
  "(\020\022\023\n\013test_uint32\030\007 \003(\r\022\024\n\014test_fixed32\030"
  "\010 \003(\007\022\023\n\013test_uint64\030\t \003(\004\022\024\n\014test_fixed"
  "64\030\n \003(\006\022\022\n\ntest_float\030\013 \003(\002\022\023\n\013test_dou"
  "ble\030\014 \003(\001\022\024\n\014test_boolean\030\r \003(\010\022+\n\017test_"
  "enum_small\030\016 \003(\0162\022.foo.TestEnumSmall\022 \n\t"
  "test_enum\030\017 \003(\0162\r.foo.TestEnum\022\023\n\013test_s"
  "tring\030\020 \003(\t\022\022\n\ntest_bytes\030\021 \003(\014\022\"\n\014test_"
  "message\030\022 \003(\0132\014.foo.SubMess\"\260\003\n\016TestMess"
  "Packed\022\026\n\ntest_int32\030\001 \003(\005B\002\020\001\022\027\n\013test_s"
  "int32\030\002 \003(\021B\002\020\001\022\031\n\rtest_sfixed32\030\003 \003(\017B\002"
  "\020\001\022\026\n\ntest_int64\030\004 \003(\003B\002\020\001\022\027\n\013test_sint6"
  "4\030\005 \003(\022B\002\020\001\022\031\n\rtest_sfixed64\030\006 \003(\020B\002\020\001\022\027"
  "\n\013test_uint32\030\007 \003(\rB\002\020\001\022\030\n\014test_fixed32\030"
  "\010 \003(\007B\002\020\001\022\027\n\013test_uint64\030\t \003(\004B\002\020\001\022\030\n\014te"
  "st_fixed64\030\n \003(\006B\002\020\001\022\026\n\ntest_float\030\013 \003(\002"
  "B\002\020\001\022\027\n\013test_double\030\014 \003(\001B\002\020\001\022\030\n\014test_bo"
  "olean\030\r \003(\010B\002\020\001\022/\n\017test_enum_small\030\016 \003(\016"
  "2\022.foo.TestEnumSmallB\002\020\001\022$\n\ttest_enum\030\017 "
  "\003(\0162\r.foo.TestEnumB\002\020\001\"\317\003\n\020TestMessOptio"
  "nal\022\022\n\ntest_int32\030\001 \001(\005\022\023\n\013test_sint32\030\002"
  " \001(\021\022\025\n\rtest_sfixed32\030\003 \001(\017\022\022\n\ntest_int6"
  "4\030\004 \001(\003\022\023\n\013test_sint64\030\005 \001(\022\022\025\n\rtest_sfi"
  "xed64\030\006 \001(\020\022\023\n\013test_uint32\030\007 \001(\r\022\024\n\014test"
  "_fixed32\030\010 \001(\007\022\023\n\013test_uint64\030\t \001(\004\022\024\n\014t"
  "est_fixed64\030\n \001(\006\022\022\n\ntest_float\030\013 \001(\002\022\023\n"
  "\013test_double\030\014 \001(\001\022\024\n\014test_boolean\030\r \001(\010"
  "\022+\n\017test_enum_small\030\016 \001(\0162\022.foo.TestEnum"
  "Small\022 \n\ttest_enum\030\017 \001(\0162\r.foo.TestEnum\022"
  "\023\n\013test_string\030\020 \001(\t\022\022\n\ntest_bytes\030\021 \001(\014"
  "\022\"\n\014test_message\030\022 \001(\0132\014.foo.SubMess:\n\332\?"
  "\002\010\000\332\?\002\020\000\"\203\004\n\rTestMessOneof\022\024\n\ntest_int32"
  "\030\001 \001(\005H\000\022\025\n\013test_sint32\030\002 \001(\021H\000\022\027\n\rtest_"
  "sfixed32\030\003 \001(\017H\000\022\024\n\ntest_int64\030\004 \001(\003H\000\022\025"
  "\n\013test_sint64\030\005 \001(\022H\000\022\027\n\rtest_sfixed64\030\006"
  " \001(\020H\000\022\025\n\013test_uint32\030\007 \001(\rH\000\022\026\n\014test_fi"
  "xed32\030\010 \001(\007H\000\022\025\n\013test_uint64\030\t \001(\004H\000\022\026\n\014"
  "test_fixed64\030\n \001(\006H\000\022\024\n\ntest_float\030\013 \001(\002"
  "H\000\022\025\n\013test_double\030\014 \001(\001H\000\022\026\n\014test_boolea"
  "n\030\r \001(\010H\000\022-\n\017test_enum_small\030\016 \001(\0162\022.foo"
  ".TestEnumSmallH\000\022\"\n\ttest_enum\030\017 \001(\0162\r.fo"
  "o.TestEnumH\000\022\025\n\013test_string\030\020 \001(\tH\000\022\024\n\nt"
  "est_bytes\030\021 \001(\014H\000\022$\n\014test_message\030\022 \001(\0132"
  "\014.foo.SubMessH\000\022\017\n\007opt_int\030\023 \001(\005B\014\n\ntest"
  "_oneof\"%\n\025TestMessRequiredInt32\022\014\n\004test\030"
  "* \002(\005\"&\n\026TestMessRequiredSInt32\022\014\n\004test\030"
  "+ \002(\021\"(\n\030TestMessRequiredSFixed32\022\014\n\004tes"
  "t\030d \002(\017\"%\n\025TestMessRequiredInt64\022\014\n\004test"
  "\030\001 \002(\003\"&\n\026TestMessRequiredSInt64\022\014\n\004test"
  "\030\013 \002(\022\"(\n\030TestMessRequiredSFixed64\022\014\n\004te"
  "st\030\014 \002(\020\"&\n\026TestMessRequiredUInt32\022\014\n\004te"
  "st\030\001 \002(\r\"\'\n\027TestMessRequiredFixed32\022\014\n\004t"
  "est\030\001 \002(\007\"&\n\026TestMessRequiredUInt64\022\014\n\004t"
  "est\030\001 \002(\004\"\'\n\027TestMessRequiredFixed64\022\014\n\004"
  "test\030\001 \002(\006\"%\n\025TestMessRequiredFloat\022\014\n\004t"
  "est\030\001 \002(\002\"&\n\026TestMessRequiredDouble\022\014\n\004t"
  "est\030\001 \002(\001\"$\n\024TestMessRequiredBool\022\014\n\004tes"
  "t\030\001 \002(\010\"3\n\024TestMessRequiredEnum\022\033\n\004test\030"
  "\001 \002(\0162\r.foo.TestEnum\"=\n\031TestMessRequired"
  "EnumSmall\022 \n\004test\030\001 \002(\0162\022.foo.TestEnumSm"
  "all\"&\n\026TestMessRequiredString\022\014\n\004test\030\001 "
  "\002(\t\"%\n\025TestMessRequiredBytes\022\014\n\004test\030\001 \002"
  "(\014\"5\n\027TestMessRequiredMessage\022\032\n\004test\030\001 "
  "\002(\0132\014.foo.SubMess\"\013\n\tEmptyMess\"\342\001\n\025Defau"
  "ltRequiredValues\022\024\n\007v_int32\030\001 \002(\005:\003-42\022\025"
  "\n\010v_uint32\030\002 \002(\r:\003666\022\027\n\007v_int64\030\003 \002(\005:\006"
  "100000\022\030\n\010v_uint64\030\004 \002(\r:\006100001\022\024\n\007v_fl"
  "oat\030\005 \002(\002:\0032.5\022\025\n\010v_double\030\006 \002(\001:\0034.5\022\031\n"
  "\010v_string\030\007 \002(\t:\007hi mom\n\022!\n\007v_bytes\030\010 \002("
  "\014:\020a \\000 character\"\342\001\n\025DefaultOptionalV"
  "alues\022\024\n\007v_int32\030\001 \001(\005:\003-42\022\025\n\010v_uint32\030"
  "\002 \001(\r:\003666\022\027\n\007v_int64\030\003 \001(\005:\006100000\022\030\n\010v"
  "_uint64\030\004 \001(\r:\006100001\022\024\n\007v_float\030\005 \001(\002:\003"
  "2.5\022\025\n\010v_double\030\006 \001(\001:\0034.5\022\031\n\010v_string\030\007"
  " \001(\t:\007hi mom\n\022!\n\007v_bytes\030\010 \001(\014:\020a \\000 c"
  "haracter\"\\\n\tLowerCase\022-\n\005value\030\001 \001(\0162\027.f"
  "oo.LowerCase.CaseEnum:\005lower\" \n\010CaseEnum"
  "\022\t\n\005UPPER\020\001\022\t\n\005lower\020\002\"\177\n\013AllocValues\022\017\n"
  "\007o_bytes\030\001 \001(\014\022\020\n\010r_string\030\002 \003(\t\022\020\n\010a_st"
  "ring\030\003 \002(\t\022\017\n\007a_bytes\030\004 \002(\014\022*\n\006a_mess\030\005 "
  "\002(\0132\032.foo.DefaultRequiredValues\"\302\021\n\030Test"
  "RequiredFieldsBitmap\022\016\n\006field1\030\001 \002(\t\022\016\n\006"
  "field2\030\002 \001(\t\022\016\n\006field3\030\003 \001(\t\022\016\n\006field4\030\004"
  " \001(\t\022\016\n\006field5\030\005 \001(\t\022\016\n\006field6\030\006 \001(\t\022\016\n\006"
  "field7\030\007 \001(\t\022\016\n\006field8\030\010 \001(\t\022\016\n\006field9\030\t"
  " \001(\t\022\017\n\007field10\030\n \001(\t\022\017\n\007field11\030\013 \001(\t\022\017"
  "\n\007field12\030\014 \001(\t\022\017\n\007field13\030\r \001(\t\022\017\n\007fiel"
  "d14\030\016 \001(\t\022\017\n\007field15\030\017 \001(\t\022\017\n\007field16\030\020 "
  "\001(\t\022\017\n\007field17\030\021 \001(\t\022\017\n\007field18\030\022 \001(\t\022\017\n"
  "\007field19\030\023 \001(\t\022\017\n\007field20\030\024 \001(\t\022\017\n\007field"
  "21\030\025 \001(\t\022\017\n\007field22\030\026 \001(\t\022\017\n\007field23\030\027 \001"
  "(\t\022\017\n\007field24\030\030 \001(\t\022\017\n\007field25\030\031 \001(\t\022\017\n\007"
  "field26\030\032 \001(\t\022\017\n\007field27\030\033 \001(\t\022\017\n\007field2"
  "8\030\034 \001(\t\022\017\n\007field29\030\035 \001(\t\022\017\n\007field30\030\036 \001("
  "\t\022\017\n\007field31\030\037 \001(\t\022\017\n\007field32\030  \001(\t\022\017\n\007f"
  "ield33\030! \001(\t\022\017\n\007field34\030\" \001(\t\022\017\n\007field35"
  "\030# \001(\t\022\017\n\007field36\030$ \001(\t\022\017\n\007field37\030% \001(\t"
  "\022\017\n\007field38\030& \001(\t\022\017\n\007field39\030\' \001(\t\022\017\n\007fi"
  "eld40\030( \001(\t\022\017\n\007field41\030) \001(\t\022\017\n\007field42\030"
  "* \001(\t\022\017\n\007field43\030+ \001(\t\022\017\n\007field44\030, \001(\t\022"
  "\017\n\007field45\030- \001(\t\022\017\n\007field46\030. \001(\t\022\017\n\007fie"
  "ld47\030/ \001(\t\022\017\n\007field48\0300 \001(\t\022\017\n\007field49\0301"
  " \001(\t\022\017\n\007field50\0302 \001(\t\022\017\n\007field51\0303 \001(\t\022\017"
  "\n\007field52\0304 \001(\t\022\017\n\007field53\0305 \001(\t\022\017\n\007fiel"
  "d54\0306 \001(\t\022\017\n\007field55\0307 \001(\t\022\017\n\007field56\0308 "
  "\001(\t\022\017\n\007field57\0309 \001(\t\022\017\n\007field58\030: \001(\t\022\017\n"
  "\007field59\030; \001(\t\022\017\n\007field60\030< \001(\t\022\017\n\007field"
  "61\030= \001(\t\022\017\n\007field62\030> \001(\t\022\017\n\007field63\030\? \001"
  "(\t\022\017\n\007field64\030@ \001(\t\022\017\n\007field65\030A \001(\t\022\017\n\007"
  "field66\030B \001(\t\022\017\n\007field67\030C \001(\t\022\017\n\007field6"
  "8\030D \001(\t\022\017\n\007field69\030E \001(\t\022\017\n\007field70\030F \001("
  "\t\022\017\n\007field71\030G \001(\t\022\017\n\007field72\030H \001(\t\022\017\n\007f"
  "ield73\030I \001(\t\022\017\n\007field74\030J \001(\t\022\017\n\007field75"
  "\030K \001(\t\022\017\n\007field76\030L \001(\t\022\017\n\007field77\030M \001(\t"
  "\022\017\n\007field78\030N \001(\t\022\017\n\007field79\030O \001(\t\022\017\n\007fi"
  "eld80\030P \001(\t\022\017\n\007field81\030Q \001(\t\022\017\n\007field82\030"
  "R \001(\t\022\017\n\007field83\030S \001(\t\022\017\n\007field84\030T \001(\t\022"
  "\017\n\007field85\030U \001(\t\022\017\n\007field86\030V \001(\t\022\017\n\007fie"
  "ld87\030W \001(\t\022\017\n\007field88\030X \001(\t\022\017\n\007field89\030Y"
  " \001(\t\022\017\n\007field90\030Z \001(\t\022\017\n\007field91\030[ \001(\t\022\017"
  "\n\007field92\030\\ \001(\t\022\017\n\007field93\030] \001(\t\022\017\n\007fiel"
  "d94\030^ \001(\t\022\017\n\007field95\030_ \001(\t\022\017\n\007field96\030` "
  "\001(\t\022\017\n\007field97\030a \001(\t\022\017\n\007field98\030b \001(\t\022\017\n"
  "\007field99\030c \001(\t\022\020\n\010field100\030d \001(\t\022\020\n\010fiel"
  "d101\030e \001(\t\022\020\n\010field102\030f \001(\t\022\020\n\010field103"
  "\030g \001(\t\022\020\n\010field104\030h \001(\t\022\020\n\010field105\030i \001"
  "(\t\022\020\n\010field106\030j \001(\t\022\020\n\010field107\030k \001(\t\022\020"
  "\n\010field108\030l \001(\t\022\020\n\010field109\030m \001(\t\022\020\n\010fi"
  "eld110\030n \001(\t\022\020\n\010field111\030o \001(\t\022\020\n\010field1"
  "12\030p \001(\t\022\020\n\010field113\030q \001(\t\022\020\n\010field114\030r"
  " \001(\t\022\020\n\010field115\030s \001(\t\022\020\n\010field116\030t \001(\t"
  "\022\020\n\010field117\030u \001(\t\022\020\n\010field118\030v \001(\t\022\020\n\010"
  "field119\030w \001(\t\022\020\n\010field120\030x \001(\t\022\020\n\010fiel"
  "d121\030y \001(\t\022\020\n\010field122\030z \001(\t\022\020\n\010field123"
  "\030{ \001(\t\022\020\n\010field124\030| \001(\t\022\020\n\010field125\030} \001"
  "(\t\022\020\n\010field126\030~ \001(\t\022\020\n\010field127\030\177 \001(\t\022\021"
  "\n\010field128\030\200\001 \001(\t\022\021\n\010field129\030\201\001 \002(\t\"\226\001\n"
  "\016TestFieldFlags\022\021\n\tno_flags1\030\001 \001(\005\022\021\n\tno"
  "_flags2\030\002 \002(\005\022\021\n\tno_flags3\030\003 \003(\005\022\022\n\006pack"
  "ed\030\004 \003(\005B\002\020\001\022\037\n\021packed_deprecated\030\005 \003(\005B"
  "\004\020\001\030\001\022\026\n\ndeprecated\030\006 \003(\005B\002\030\001\"\350\002\n\020TestMe"
  "ssageCheck\0226\n\014required_msg\030\001 \002(\0132 .foo.T"
  "estMessageCheck.SubMessage\0226\n\014repeated_m"
  "sg\030\002 \003(\0132 .foo.TestMessageCheck.SubMessa"
  "ge\0226\n\014optional_msg\030\003 \001(\0132 .foo.TestMessa"
  "geCheck.SubMessage\022\027\n\017required_string\030\004 "
  "\002(\t\022\027\n\017repeated_string\030\005 \003(\t\022\027\n\017optional"
  "_string\030\006 \001(\t\022\026\n\016required_bytes\030\007 \002(\014\022\026\n"
  "\016repeated_bytes\030\010 \003(\014\022\026\n\016optional_bytes\030"
  "\t \001(\014\032\031\n\nSubMessage\022\013\n\003str\030\001 \002(\t\"\321\001\n\017Tes"
  "tMessSubMess\022\037\n\010rep_mess\030\001 \002(\0132\r.foo.Tes"
  "tMess\022\'\n\010opt_mess\030\002 \002(\0132\025.foo.TestMessOp"
  "tional\022&\n\noneof_mess\030\003 \002(\0132\022.foo.TestMes"
  "sOneof\022\036\n\010req_mess\030\004 \002(\0132\014.foo.SubMess\022,"
  "\n\010def_mess\030\005 \002(\0132\032.foo.DefaultOptionalVa"
  "lues*C\n\rTestEnumSmall\022\026\n\tNEG_VALUE\020\377\377\377\377\377"
  "\377\377\377\377\001\022\t\n\005VALUE\020\000\022\017\n\013OTHER_VALUE\020\001*\357\001\n\010Te"
  "stEnum\022\033\n\016VALUENEG123456\020\300\273\370\377\377\377\377\377\377\001\022\026\n\tV"
  "ALUENEG1\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006VALUE0\020\000\022\n\n\006VALUE"
  "1\020\001\022\014\n\010VALUE127\020\177\022\r\n\010VALUE128\020\200\001\022\017\n\nVALU"
  "E16383\020\377\177\022\020\n\nVALUE16384\020\200\200\001\022\022\n\014VALUE2097"
  "151\020\377\377\177\022\023\n\014VALUE2097152\020\200\200\200\001\022\025\n\016VALUE268"
  "435455\020\377\377\377\177\022\026\n\016VALUE268435456\020\200\200\200\200\001*\206\001\n\021"
  "TestEnumDupValues\022\013\n\007VALUE_A\020*\022\013\n\007VALUE_"
  "B\020*\022\013\n\007VALUE_C\020*\022\014\n\007VALUE_D\020\232\005\022\014\n\007VALUE_"
  "E\020\232\005\022\014\n\007VALUE_F\020\350\007\022\r\n\010VALUE_AA\020\350\007\022\r\n\010VAL"
  "UE_BB\020\351\007\032\002\020\001B\005\332\?\002 \001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_t_2ftest_2dfull_2eproto_deps[1] = {
  &::descriptor_table_protobuf_2dc_2fprotobuf_2dc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_t_2ftest_2dfull_2eproto_sccs[42] = {
  &scc_info_AllocValues_t_2ftest_2dfull_2eproto.base,
  &scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto.base,
  &scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto.base,
  &scc_info_EmptyMess_t_2ftest_2dfull_2eproto.base,
  &scc_info_LowerCase_t_2ftest_2dfull_2eproto.base,
  &scc_info_SubMess_t_2ftest_2dfull_2eproto.base,
  &scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldFlags_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo15_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo16_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMess_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessOneof_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessOptional_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessPacked_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredBool_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredDouble_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredEnum_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredEnumSmall_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredFixed32_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredFixed64_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredFloat_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredInt32_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredInt64_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredSFixed32_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredSFixed64_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredSInt32_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredSInt64_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredUInt32_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessRequiredUInt64_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessSubMess_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessageCheck_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto.base,
  &scc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_t_2ftest_2dfull_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_t_2ftest_2dfull_2eproto = {
  false, false, descriptor_table_protodef_t_2ftest_2dfull_2eproto, "t/test-full.proto", 7379,
  &descriptor_table_t_2ftest_2dfull_2eproto_once, descriptor_table_t_2ftest_2dfull_2eproto_sccs, descriptor_table_t_2ftest_2dfull_2eproto_deps, 42, 1,
  schemas, file_default_instances, TableStruct_t_2ftest_2dfull_2eproto::offsets,
  file_level_metadata_t_2ftest_2dfull_2eproto, 42, file_level_enum_descriptors_t_2ftest_2dfull_2eproto, file_level_service_descriptors_t_2ftest_2dfull_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_t_2ftest_2dfull_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_t_2ftest_2dfull_2eproto)), true);
namespace foo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LowerCase_CaseEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_t_2ftest_2dfull_2eproto);
  return file_level_enum_descriptors_t_2ftest_2dfull_2eproto[0];
}
bool LowerCase_CaseEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LowerCase_CaseEnum LowerCase::UPPER;
constexpr LowerCase_CaseEnum LowerCase::lower;
constexpr LowerCase_CaseEnum LowerCase::CaseEnum_MIN;
constexpr LowerCase_CaseEnum LowerCase::CaseEnum_MAX;
constexpr int LowerCase::CaseEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnumSmall_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_t_2ftest_2dfull_2eproto);
  return file_level_enum_descriptors_t_2ftest_2dfull_2eproto[1];
}
bool TestEnumSmall_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_t_2ftest_2dfull_2eproto);
  return file_level_enum_descriptors_t_2ftest_2dfull_2eproto[2];
}
bool TestEnum_IsValid(int value) {
  switch (value) {
    case -123456:
    case -1:
    case 0:
    case 1:
    case 127:
    case 128:
    case 16383:
    case 16384:
    case 2097151:
    case 2097152:
    case 268435455:
    case 268435456:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestEnumDupValues_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_t_2ftest_2dfull_2eproto);
  return file_level_enum_descriptors_t_2ftest_2dfull_2eproto[3];
}
bool TestEnumDupValues_IsValid(int value) {
  switch (value) {
    case 42:
    case 666:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SubMess_SubSubMess::InitAsDefaultInstance() {
}
class SubMess_SubSubMess::_Internal {
 public:
  using HasBits = decltype(std::declval<SubMess_SubSubMess>()._has_bits_);
  static void set_has_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bytes1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_str1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_str2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_;
SubMess_SubSubMess::SubMess_SubSubMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rep_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.SubMess.SubSubMess)
}
SubMess_SubSubMess::SubMess_SubSubMess(const SubMess_SubSubMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rep_(from.rep_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bytes1_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get());
  if (from._internal_has_bytes1()) {
    bytes1_.Set(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get(), from._internal_bytes1(),
      GetArena());
  }
  str1_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get());
  if (from._internal_has_str1()) {
    str1_.Set(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get(), from._internal_str1(),
      GetArena());
  }
  str2_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get());
  if (from._internal_has_str2()) {
    str2_.Set(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get(), from._internal_str2(),
      GetArena());
  }
  val1_ = from.val1_;
  // @@protoc_insertion_point(copy_constructor:foo.SubMess.SubSubMess)
}

void SubMess_SubSubMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto.base);
  bytes1_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get());
  str1_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get());
  str2_.UnsafeSetDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get());
  val1_ = 100;
}

SubMess_SubSubMess::~SubMess_SubSubMess() {
  // @@protoc_insertion_point(destructor:foo.SubMess.SubSubMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubMess_SubSubMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bytes1_.DestroyNoArena(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get());
  str1_.DestroyNoArena(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get());
  str2_.DestroyNoArena(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get());
}

void SubMess_SubSubMess::ArenaDtor(void* object) {
  SubMess_SubSubMess* _this = reinterpret_cast< SubMess_SubSubMess* >(object);
  (void)_this;
}
void SubMess_SubSubMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubMess_SubSubMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubMess_SubSubMess& SubMess_SubSubMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubMess_SubSubMess_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void SubMess_SubSubMess::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.SubMess.SubSubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rep_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bytes1_.ClearToDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      str1_.ClearToDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000004u) {
      str2_.ClearToDefault(&::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get(), GetArena());
    }
    val1_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubMess_SubSubMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 val1 = 1 [default = 100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_val1(&has_bits);
          val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes1 = 2 [default = "a \000 char"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bytes1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str1 = 3 [default = "hello world\n"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_str1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.SubMess.SubSubMess.str1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string str2 = 5 [default = "hello\000world\n", (.pb_c_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_str2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.SubMess.SubSubMess.str2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubMess_SubSubMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.SubMess.SubSubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 val1 = 1 [default = 100];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_val1(), target);
  }

  // optional bytes bytes1 = 2 [default = "a \000 char"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytes1(), target);
  }

  // optional string str1 = 3 [default = "hello world\n"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str1().data(), static_cast<int>(this->_internal_str1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.SubMess.SubSubMess.str1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str1(), target);
  }

  // repeated int32 rep = 4;
  for (int i = 0, n = this->_internal_rep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_rep(i), target);
  }

  // optional string str2 = 5 [default = "hello\000world\n", (.pb_c_field) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str2().data(), static_cast<int>(this->_internal_str2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.SubMess.SubSubMess.str2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.SubMess.SubSubMess)
  return target;
}

size_t SubMess_SubSubMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.SubMess.SubSubMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 rep = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rep_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rep_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes bytes1 = 2 [default = "a \000 char"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes1());
    }

    // optional string str1 = 3 [default = "hello world\n"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str1());
    }

    // optional string str2 = 5 [default = "hello\000world\n", (.pb_c_field) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str2());
    }

    // optional int32 val1 = 1 [default = 100];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubMess_SubSubMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.SubMess.SubSubMess)
  GOOGLE_DCHECK_NE(&from, this);
  const SubMess_SubSubMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubMess_SubSubMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.SubMess.SubSubMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.SubMess.SubSubMess)
    MergeFrom(*source);
  }
}

void SubMess_SubSubMess::MergeFrom(const SubMess_SubSubMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.SubMess.SubSubMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rep_.MergeFrom(from.rep_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bytes1(from._internal_bytes1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_str1(from._internal_str1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_str2(from._internal_str2());
    }
    if (cached_has_bits & 0x00000008u) {
      val1_ = from.val1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubMess_SubSubMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.SubMess.SubSubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubMess_SubSubMess::CopyFrom(const SubMess_SubSubMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.SubMess.SubSubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubMess_SubSubMess::IsInitialized() const {
  return true;
}

void SubMess_SubSubMess::InternalSwap(SubMess_SubSubMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rep_.InternalSwap(&other->rep_);
  bytes1_.Swap(&other->bytes1_, &::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_bytes1_.get(), GetArena());
  str1_.Swap(&other->str1_, &::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str1_.get(), GetArena());
  str2_.Swap(&other->str2_, &::foo::SubMess_SubSubMess::_i_give_permission_to_break_this_code_default_str2_.get(), GetArena());
  swap(val1_, other->val1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubMess_SubSubMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubMess::InitAsDefaultInstance() {
  ::foo::_SubMess_default_instance_._instance.get_mutable()->sub1_ = const_cast< ::foo::SubMess_SubSubMess*>(
      ::foo::SubMess_SubSubMess::internal_default_instance());
  ::foo::_SubMess_default_instance_._instance.get_mutable()->sub2_ = const_cast< ::foo::SubMess_SubSubMess*>(
      ::foo::SubMess_SubSubMess::internal_default_instance());
}
class SubMess::_Internal {
 public:
  using HasBits = decltype(std::declval<SubMess>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::foo::SubMess_SubSubMess& sub1(const SubMess* msg);
  static void set_has_sub1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::foo::SubMess_SubSubMess& sub2(const SubMess* msg);
  static void set_has_sub2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::foo::SubMess_SubSubMess&
SubMess::_Internal::sub1(const SubMess* msg) {
  return *msg->sub1_;
}
const ::foo::SubMess_SubSubMess&
SubMess::_Internal::sub2(const SubMess* msg) {
  return *msg->sub2_;
}
SubMess::SubMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rep_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.SubMess)
}
SubMess::SubMess(const SubMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rep_(from.rep_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sub1()) {
    sub1_ = new ::foo::SubMess_SubSubMess(*from.sub1_);
  } else {
    sub1_ = nullptr;
  }
  if (from._internal_has_sub2()) {
    sub2_ = new ::foo::SubMess_SubSubMess(*from.sub2_);
  } else {
    sub2_ = nullptr;
  }
  ::memcpy(&test_, &from.test_,
    static_cast<size_t>(reinterpret_cast<char*>(&val2_) -
    reinterpret_cast<char*>(&test_)) + sizeof(val2_));
  // @@protoc_insertion_point(copy_constructor:foo.SubMess)
}

void SubMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubMess_t_2ftest_2dfull_2eproto.base);
  ::memset(&sub1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val2_) -
      reinterpret_cast<char*>(&sub1_)) + sizeof(val2_));
}

SubMess::~SubMess() {
  // @@protoc_insertion_point(destructor:foo.SubMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sub1_;
  if (this != internal_default_instance()) delete sub2_;
}

void SubMess::ArenaDtor(void* object) {
  SubMess* _this = reinterpret_cast< SubMess* >(object);
  (void)_this;
}
void SubMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubMess& SubMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubMess_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void SubMess::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.SubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rep_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sub1_ != nullptr);
      sub1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sub2_ != nullptr);
      sub2_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&test_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val2_) -
        reinterpret_cast<char*>(&test_)) + sizeof(val2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 test = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_val1(&has_bits);
          val1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_val2(&has_bits);
          val2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rep = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .foo.SubMess.SubSubMess sub1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .foo.SubMess.SubSubMess sub2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.SubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 test = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_test(), target);
  }

  // optional int32 val1 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_val1(), target);
  }

  // optional int32 val2 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_val2(), target);
  }

  // repeated int32 rep = 8;
  for (int i = 0, n = this->_internal_rep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_rep(i), target);
  }

  // optional .foo.SubMess.SubSubMess sub1 = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sub1(this), target, stream);
  }

  // optional .foo.SubMess.SubSubMess sub2 = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sub2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.SubMess)
  return target;
}

size_t SubMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.SubMess)
  size_t total_size = 0;

  // required int32 test = 4;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 rep = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rep_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rep_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .foo.SubMess.SubSubMess sub1 = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub1_);
    }

    // optional .foo.SubMess.SubSubMess sub2 = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub2_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional int32 val1 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val1());
    }

    // optional int32 val2 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.SubMess)
  GOOGLE_DCHECK_NE(&from, this);
  const SubMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.SubMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.SubMess)
    MergeFrom(*source);
  }
}

void SubMess::MergeFrom(const SubMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.SubMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rep_.MergeFrom(from.rep_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sub1()->::foo::SubMess_SubSubMess::MergeFrom(from._internal_sub1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sub2()->::foo::SubMess_SubSubMess::MergeFrom(from._internal_sub2());
    }
    if (cached_has_bits & 0x00000004u) {
      test_ = from.test_;
    }
    if (cached_has_bits & 0x00000008u) {
      val1_ = from.val1_;
    }
    if (cached_has_bits & 0x00000010u) {
      val2_ = from.val2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.SubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubMess::CopyFrom(const SubMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.SubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubMess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SubMess::InternalSwap(SubMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rep_.InternalSwap(&other->rep_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubMess, val2_)
      + sizeof(SubMess::val2_)
      - PROTOBUF_FIELD_OFFSET(SubMess, sub1_)>(
          reinterpret_cast<char*>(&sub1_),
          reinterpret_cast<char*>(&other->sub1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo15::InitAsDefaultInstance() {
}
class TestFieldNo15::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo15>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo15::TestFieldNo15(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo15)
}
TestFieldNo15::TestFieldNo15(const TestFieldNo15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo15)
}

void TestFieldNo15::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo15_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo15::~TestFieldNo15() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo15)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo15::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo15::ArenaDtor(void* object) {
  TestFieldNo15* _this = reinterpret_cast< TestFieldNo15* >(object);
  (void)_this;
}
void TestFieldNo15::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo15& TestFieldNo15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo15_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo15::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo15.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo15.test");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo15)
  return target;
}

size_t TestFieldNo15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo15)
  size_t total_size = 0;

  // required string test = 15;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo15)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo15)
    MergeFrom(*source);
  }
}

void TestFieldNo15::MergeFrom(const TestFieldNo15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo15::CopyFrom(const TestFieldNo15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo15::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo15::InternalSwap(TestFieldNo15* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo16::InitAsDefaultInstance() {
}
class TestFieldNo16::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo16>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo16::TestFieldNo16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo16)
}
TestFieldNo16::TestFieldNo16(const TestFieldNo16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo16)
}

void TestFieldNo16::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo16_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo16::~TestFieldNo16() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo16)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo16::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo16::ArenaDtor(void* object) {
  TestFieldNo16* _this = reinterpret_cast< TestFieldNo16* >(object);
  (void)_this;
}
void TestFieldNo16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo16& TestFieldNo16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo16_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo16::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo16.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo16.test");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo16)
  return target;
}

size_t TestFieldNo16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo16)
  size_t total_size = 0;

  // required string test = 16;
  if (_internal_has_test()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo16)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo16)
    MergeFrom(*source);
  }
}

void TestFieldNo16::MergeFrom(const TestFieldNo16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo16::CopyFrom(const TestFieldNo16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo16::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo16::InternalSwap(TestFieldNo16* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo2047::InitAsDefaultInstance() {
}
class TestFieldNo2047::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo2047>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo2047::TestFieldNo2047(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo2047)
}
TestFieldNo2047::TestFieldNo2047(const TestFieldNo2047& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo2047)
}

void TestFieldNo2047::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo2047::~TestFieldNo2047() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo2047)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo2047::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo2047::ArenaDtor(void* object) {
  TestFieldNo2047* _this = reinterpret_cast< TestFieldNo2047* >(object);
  (void)_this;
}
void TestFieldNo2047::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo2047::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo2047& TestFieldNo2047::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo2047_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo2047::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo2047)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo2047::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 2047;
      case 2047:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo2047.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo2047::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo2047)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 2047;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo2047.test");
    target = stream->WriteStringMaybeAliased(
        2047, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo2047)
  return target;
}

size_t TestFieldNo2047::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo2047)
  size_t total_size = 0;

  // required string test = 2047;
  if (_internal_has_test()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo2047::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo2047)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo2047* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo2047>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo2047)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo2047)
    MergeFrom(*source);
  }
}

void TestFieldNo2047::MergeFrom(const TestFieldNo2047& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo2047)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo2047::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo2047)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo2047::CopyFrom(const TestFieldNo2047& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo2047)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo2047::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo2047::InternalSwap(TestFieldNo2047* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo2047::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo2048::InitAsDefaultInstance() {
}
class TestFieldNo2048::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo2048>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo2048::TestFieldNo2048(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo2048)
}
TestFieldNo2048::TestFieldNo2048(const TestFieldNo2048& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo2048)
}

void TestFieldNo2048::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo2048::~TestFieldNo2048() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo2048)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo2048::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo2048::ArenaDtor(void* object) {
  TestFieldNo2048* _this = reinterpret_cast< TestFieldNo2048* >(object);
  (void)_this;
}
void TestFieldNo2048::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo2048::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo2048& TestFieldNo2048::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo2048_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo2048::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo2048)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo2048::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 2048;
      case 2048:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo2048.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo2048::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo2048)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 2048;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo2048.test");
    target = stream->WriteStringMaybeAliased(
        2048, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo2048)
  return target;
}

size_t TestFieldNo2048::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo2048)
  size_t total_size = 0;

  // required string test = 2048;
  if (_internal_has_test()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo2048::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo2048)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo2048* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo2048>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo2048)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo2048)
    MergeFrom(*source);
  }
}

void TestFieldNo2048::MergeFrom(const TestFieldNo2048& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo2048)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo2048::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo2048::CopyFrom(const TestFieldNo2048& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo2048)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo2048::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo2048::InternalSwap(TestFieldNo2048* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo2048::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo262143::InitAsDefaultInstance() {
}
class TestFieldNo262143::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo262143>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo262143::TestFieldNo262143(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo262143)
}
TestFieldNo262143::TestFieldNo262143(const TestFieldNo262143& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo262143)
}

void TestFieldNo262143::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo262143::~TestFieldNo262143() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo262143)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo262143::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo262143::ArenaDtor(void* object) {
  TestFieldNo262143* _this = reinterpret_cast< TestFieldNo262143* >(object);
  (void)_this;
}
void TestFieldNo262143::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo262143::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo262143& TestFieldNo262143::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo262143_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo262143::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo262143)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo262143::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 262143;
      case 262143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo262143.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo262143::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo262143)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 262143;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo262143.test");
    target = stream->WriteStringMaybeAliased(
        262143, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo262143)
  return target;
}

size_t TestFieldNo262143::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo262143)
  size_t total_size = 0;

  // required string test = 262143;
  if (_internal_has_test()) {
    total_size += 3 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo262143::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo262143)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo262143* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo262143>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo262143)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo262143)
    MergeFrom(*source);
  }
}

void TestFieldNo262143::MergeFrom(const TestFieldNo262143& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo262143)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo262143::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo262143)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo262143::CopyFrom(const TestFieldNo262143& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo262143)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo262143::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo262143::InternalSwap(TestFieldNo262143* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo262143::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo262144::InitAsDefaultInstance() {
}
class TestFieldNo262144::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo262144>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo262144::TestFieldNo262144(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo262144)
}
TestFieldNo262144::TestFieldNo262144(const TestFieldNo262144& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo262144)
}

void TestFieldNo262144::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo262144::~TestFieldNo262144() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo262144)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo262144::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo262144::ArenaDtor(void* object) {
  TestFieldNo262144* _this = reinterpret_cast< TestFieldNo262144* >(object);
  (void)_this;
}
void TestFieldNo262144::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo262144::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo262144& TestFieldNo262144::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo262144_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo262144::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo262144)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo262144::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 262144;
      case 262144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo262144.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo262144::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo262144)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 262144;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo262144.test");
    target = stream->WriteStringMaybeAliased(
        262144, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo262144)
  return target;
}

size_t TestFieldNo262144::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo262144)
  size_t total_size = 0;

  // required string test = 262144;
  if (_internal_has_test()) {
    total_size += 4 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo262144::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo262144)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo262144* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo262144>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo262144)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo262144)
    MergeFrom(*source);
  }
}

void TestFieldNo262144::MergeFrom(const TestFieldNo262144& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo262144)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo262144::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo262144)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo262144::CopyFrom(const TestFieldNo262144& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo262144)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo262144::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo262144::InternalSwap(TestFieldNo262144* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo262144::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo33554431::InitAsDefaultInstance() {
}
class TestFieldNo33554431::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo33554431>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo33554431::TestFieldNo33554431(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo33554431)
}
TestFieldNo33554431::TestFieldNo33554431(const TestFieldNo33554431& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo33554431)
}

void TestFieldNo33554431::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo33554431::~TestFieldNo33554431() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo33554431)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo33554431::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo33554431::ArenaDtor(void* object) {
  TestFieldNo33554431* _this = reinterpret_cast< TestFieldNo33554431* >(object);
  (void)_this;
}
void TestFieldNo33554431::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo33554431::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo33554431& TestFieldNo33554431::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo33554431_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo33554431::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo33554431)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo33554431::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 33554431;
      case 33554431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo33554431.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo33554431::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo33554431)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 33554431;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo33554431.test");
    target = stream->WriteStringMaybeAliased(
        33554431, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo33554431)
  return target;
}

size_t TestFieldNo33554431::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo33554431)
  size_t total_size = 0;

  // required string test = 33554431;
  if (_internal_has_test()) {
    total_size += 4 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo33554431::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo33554431)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo33554431* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo33554431>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo33554431)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo33554431)
    MergeFrom(*source);
  }
}

void TestFieldNo33554431::MergeFrom(const TestFieldNo33554431& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo33554431)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo33554431::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo33554431)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo33554431::CopyFrom(const TestFieldNo33554431& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo33554431)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo33554431::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo33554431::InternalSwap(TestFieldNo33554431* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo33554431::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldNo33554432::InitAsDefaultInstance() {
}
class TestFieldNo33554432::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldNo33554432>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestFieldNo33554432::TestFieldNo33554432(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldNo33554432)
}
TestFieldNo33554432::TestFieldNo33554432(const TestFieldNo33554432& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldNo33554432)
}

void TestFieldNo33554432::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFieldNo33554432::~TestFieldNo33554432() {
  // @@protoc_insertion_point(destructor:foo.TestFieldNo33554432)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldNo33554432::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFieldNo33554432::ArenaDtor(void* object) {
  TestFieldNo33554432* _this = reinterpret_cast< TestFieldNo33554432* >(object);
  (void)_this;
}
void TestFieldNo33554432::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldNo33554432::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldNo33554432& TestFieldNo33554432::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldNo33554432_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldNo33554432::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldNo33554432)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldNo33554432::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 33554432;
      case 33554432:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestFieldNo33554432.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldNo33554432::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldNo33554432)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 33554432;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestFieldNo33554432.test");
    target = stream->WriteStringMaybeAliased(
        33554432, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldNo33554432)
  return target;
}

size_t TestFieldNo33554432::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldNo33554432)
  size_t total_size = 0;

  // required string test = 33554432;
  if (_internal_has_test()) {
    total_size += 5 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldNo33554432::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldNo33554432)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldNo33554432* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldNo33554432>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldNo33554432)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldNo33554432)
    MergeFrom(*source);
  }
}

void TestFieldNo33554432::MergeFrom(const TestFieldNo33554432& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldNo33554432)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestFieldNo33554432::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldNo33554432)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldNo33554432::CopyFrom(const TestFieldNo33554432& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldNo33554432)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldNo33554432::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldNo33554432::InternalSwap(TestFieldNo33554432* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldNo33554432::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMess::InitAsDefaultInstance() {
}
class TestMess::_Internal {
 public:
};

TestMess::TestMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  test_int32_(arena),
  test_sint32_(arena),
  test_sfixed32_(arena),
  test_int64_(arena),
  test_sint64_(arena),
  test_sfixed64_(arena),
  test_uint32_(arena),
  test_fixed32_(arena),
  test_uint64_(arena),
  test_fixed64_(arena),
  test_float_(arena),
  test_double_(arena),
  test_boolean_(arena),
  test_enum_small_(arena),
  test_enum_(arena),
  test_string_(arena),
  test_bytes_(arena),
  test_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMess)
}
TestMess::TestMess(const TestMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      test_int32_(from.test_int32_),
      test_sint32_(from.test_sint32_),
      test_sfixed32_(from.test_sfixed32_),
      test_int64_(from.test_int64_),
      test_sint64_(from.test_sint64_),
      test_sfixed64_(from.test_sfixed64_),
      test_uint32_(from.test_uint32_),
      test_fixed32_(from.test_fixed32_),
      test_uint64_(from.test_uint64_),
      test_fixed64_(from.test_fixed64_),
      test_float_(from.test_float_),
      test_double_(from.test_double_),
      test_boolean_(from.test_boolean_),
      test_enum_small_(from.test_enum_small_),
      test_enum_(from.test_enum_),
      test_string_(from.test_string_),
      test_bytes_(from.test_bytes_),
      test_message_(from.test_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:foo.TestMess)
}

void TestMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMess_t_2ftest_2dfull_2eproto.base);
}

TestMess::~TestMess() {
  // @@protoc_insertion_point(destructor:foo.TestMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMess::ArenaDtor(void* object) {
  TestMess* _this = reinterpret_cast< TestMess* >(object);
  (void)_this;
}
void TestMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMess& TestMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMess_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMess::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_int32_.Clear();
  test_sint32_.Clear();
  test_sfixed32_.Clear();
  test_int64_.Clear();
  test_sint64_.Clear();
  test_sfixed64_.Clear();
  test_uint32_.Clear();
  test_fixed32_.Clear();
  test_uint64_.Clear();
  test_fixed64_.Clear();
  test_float_.Clear();
  test_double_.Clear();
  test_boolean_.Clear();
  test_enum_small_.Clear();
  test_enum_.Clear();
  test_string_.Clear();
  test_bytes_.Clear();
  test_message_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 test_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_test_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 test_sint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_test_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 test_sfixed32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_test_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 test_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_test_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 test_sint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_test_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 test_sfixed64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_test_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 test_uint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_test_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 test_fixed32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_test_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 test_uint64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_test_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 test_fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_test_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float test_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_test_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double test_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_test_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool test_boolean = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_test_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_test_boolean(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .foo.TestEnumSmall test_enum_small = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::foo::TestEnumSmall_IsValid(val))) {
              _internal_add_test_enum_small(static_cast<::foo::TestEnumSmall>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_test_enum_small(), ptr, ctx, ::foo::TestEnumSmall_IsValid, &_internal_metadata_, 14);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .foo.TestEnum test_enum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::foo::TestEnum_IsValid(val))) {
              _internal_add_test_enum(static_cast<::foo::TestEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_test_enum(), ptr, ctx, ::foo::TestEnum_IsValid, &_internal_metadata_, 15);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string test_string = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_test_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMess.test_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes test_bytes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_test_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .foo.SubMess test_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_test_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 test_int32 = 1;
  for (int i = 0, n = this->_internal_test_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test_int32(i), target);
  }

  // repeated sint32 test_sint32 = 2;
  for (int i = 0, n = this->_internal_test_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_test_sint32(i), target);
  }

  // repeated sfixed32 test_sfixed32 = 3;
  for (int i = 0, n = this->_internal_test_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_test_sfixed32(i), target);
  }

  // repeated int64 test_int64 = 4;
  for (int i = 0, n = this->_internal_test_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_test_int64(i), target);
  }

  // repeated sint64 test_sint64 = 5;
  for (int i = 0, n = this->_internal_test_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_test_sint64(i), target);
  }

  // repeated sfixed64 test_sfixed64 = 6;
  for (int i = 0, n = this->_internal_test_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_test_sfixed64(i), target);
  }

  // repeated uint32 test_uint32 = 7;
  for (int i = 0, n = this->_internal_test_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_test_uint32(i), target);
  }

  // repeated fixed32 test_fixed32 = 8;
  for (int i = 0, n = this->_internal_test_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_test_fixed32(i), target);
  }

  // repeated uint64 test_uint64 = 9;
  for (int i = 0, n = this->_internal_test_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_test_uint64(i), target);
  }

  // repeated fixed64 test_fixed64 = 10;
  for (int i = 0, n = this->_internal_test_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_test_fixed64(i), target);
  }

  // repeated float test_float = 11;
  for (int i = 0, n = this->_internal_test_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_test_float(i), target);
  }

  // repeated double test_double = 12;
  for (int i = 0, n = this->_internal_test_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_test_double(i), target);
  }

  // repeated bool test_boolean = 13;
  for (int i = 0, n = this->_internal_test_boolean_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_test_boolean(i), target);
  }

  // repeated .foo.TestEnumSmall test_enum_small = 14;
  for (int i = 0, n = this->_internal_test_enum_small_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        14, this->_internal_test_enum_small(i), target);
  }

  // repeated .foo.TestEnum test_enum = 15;
  for (int i = 0, n = this->_internal_test_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        15, this->_internal_test_enum(i), target);
  }

  // repeated string test_string = 16;
  for (int i = 0, n = this->_internal_test_string_size(); i < n; i++) {
    const auto& s = this->_internal_test_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMess.test_string");
    target = stream->WriteString(16, s, target);
  }

  // repeated bytes test_bytes = 17;
  for (int i = 0, n = this->_internal_test_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_test_bytes(i);
    target = stream->WriteBytes(17, s, target);
  }

  // repeated .foo.SubMess test_message = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_test_message(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMess)
  return target;
}

size_t TestMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 test_int32 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->test_int32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_int32_size());
    total_size += data_size;
  }

  // repeated sint32 test_sint32 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->test_sint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_sint32_size());
    total_size += data_size;
  }

  // repeated sfixed32 test_sfixed32 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_sfixed32_size());
    total_size += data_size;
  }

  // repeated int64 test_int64 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->test_int64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_int64_size());
    total_size += data_size;
  }

  // repeated sint64 test_sint64 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->test_sint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_sint64_size());
    total_size += data_size;
  }

  // repeated sfixed64 test_sfixed64 = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_sfixed64_size());
    total_size += data_size;
  }

  // repeated uint32 test_uint32 = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->test_uint32_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_uint32_size());
    total_size += data_size;
  }

  // repeated fixed32 test_fixed32 = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_fixed32_size());
    total_size += data_size;
  }

  // repeated uint64 test_uint64 = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->test_uint64_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_uint64_size());
    total_size += data_size;
  }

  // repeated fixed64 test_fixed64 = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_fixed64_size());
    total_size += data_size;
  }

  // repeated float test_float = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_float_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_float_size());
    total_size += data_size;
  }

  // repeated double test_double = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_double_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_double_size());
    total_size += data_size;
  }

  // repeated bool test_boolean = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_boolean_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_boolean_size());
    total_size += data_size;
  }

  // repeated .foo.TestEnumSmall test_enum_small = 14;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_enum_small_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_test_enum_small(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .foo.TestEnum test_enum = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_test_enum(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated string test_string = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_string_.size());
  for (int i = 0, n = test_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      test_string_.Get(i));
  }

  // repeated bytes test_bytes = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_bytes_.size());
  for (int i = 0, n = test_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      test_bytes_.Get(i));
  }

  // repeated .foo.SubMess test_message = 18;
  total_size += 2UL * this->_internal_test_message_size();
  for (const auto& msg : this->test_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMess)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMess)
    MergeFrom(*source);
  }
}

void TestMess::MergeFrom(const TestMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_int32_.MergeFrom(from.test_int32_);
  test_sint32_.MergeFrom(from.test_sint32_);
  test_sfixed32_.MergeFrom(from.test_sfixed32_);
  test_int64_.MergeFrom(from.test_int64_);
  test_sint64_.MergeFrom(from.test_sint64_);
  test_sfixed64_.MergeFrom(from.test_sfixed64_);
  test_uint32_.MergeFrom(from.test_uint32_);
  test_fixed32_.MergeFrom(from.test_fixed32_);
  test_uint64_.MergeFrom(from.test_uint64_);
  test_fixed64_.MergeFrom(from.test_fixed64_);
  test_float_.MergeFrom(from.test_float_);
  test_double_.MergeFrom(from.test_double_);
  test_boolean_.MergeFrom(from.test_boolean_);
  test_enum_small_.MergeFrom(from.test_enum_small_);
  test_enum_.MergeFrom(from.test_enum_);
  test_string_.MergeFrom(from.test_string_);
  test_bytes_.MergeFrom(from.test_bytes_);
  test_message_.MergeFrom(from.test_message_);
}

void TestMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMess::CopyFrom(const TestMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMess::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(test_message_)) return false;
  return true;
}

void TestMess::InternalSwap(TestMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  test_int32_.InternalSwap(&other->test_int32_);
  test_sint32_.InternalSwap(&other->test_sint32_);
  test_sfixed32_.InternalSwap(&other->test_sfixed32_);
  test_int64_.InternalSwap(&other->test_int64_);
  test_sint64_.InternalSwap(&other->test_sint64_);
  test_sfixed64_.InternalSwap(&other->test_sfixed64_);
  test_uint32_.InternalSwap(&other->test_uint32_);
  test_fixed32_.InternalSwap(&other->test_fixed32_);
  test_uint64_.InternalSwap(&other->test_uint64_);
  test_fixed64_.InternalSwap(&other->test_fixed64_);
  test_float_.InternalSwap(&other->test_float_);
  test_double_.InternalSwap(&other->test_double_);
  test_boolean_.InternalSwap(&other->test_boolean_);
  test_enum_small_.InternalSwap(&other->test_enum_small_);
  test_enum_.InternalSwap(&other->test_enum_);
  test_string_.InternalSwap(&other->test_string_);
  test_bytes_.InternalSwap(&other->test_bytes_);
  test_message_.InternalSwap(&other->test_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessPacked::InitAsDefaultInstance() {
}
class TestMessPacked::_Internal {
 public:
};

TestMessPacked::TestMessPacked(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  test_int32_(arena),
  test_sint32_(arena),
  test_sfixed32_(arena),
  test_int64_(arena),
  test_sint64_(arena),
  test_sfixed64_(arena),
  test_uint32_(arena),
  test_fixed32_(arena),
  test_uint64_(arena),
  test_fixed64_(arena),
  test_float_(arena),
  test_double_(arena),
  test_boolean_(arena),
  test_enum_small_(arena),
  test_enum_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessPacked)
}
TestMessPacked::TestMessPacked(const TestMessPacked& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      test_int32_(from.test_int32_),
      test_sint32_(from.test_sint32_),
      test_sfixed32_(from.test_sfixed32_),
      test_int64_(from.test_int64_),
      test_sint64_(from.test_sint64_),
      test_sfixed64_(from.test_sfixed64_),
      test_uint32_(from.test_uint32_),
      test_fixed32_(from.test_fixed32_),
      test_uint64_(from.test_uint64_),
      test_fixed64_(from.test_fixed64_),
      test_float_(from.test_float_),
      test_double_(from.test_double_),
      test_boolean_(from.test_boolean_),
      test_enum_small_(from.test_enum_small_),
      test_enum_(from.test_enum_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:foo.TestMessPacked)
}

void TestMessPacked::SharedCtor() {
}

TestMessPacked::~TestMessPacked() {
  // @@protoc_insertion_point(destructor:foo.TestMessPacked)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessPacked::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessPacked::ArenaDtor(void* object) {
  TestMessPacked* _this = reinterpret_cast< TestMessPacked* >(object);
  (void)_this;
}
void TestMessPacked::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessPacked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessPacked& TestMessPacked::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessPacked_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessPacked::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessPacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_int32_.Clear();
  test_sint32_.Clear();
  test_sfixed32_.Clear();
  test_int64_.Clear();
  test_sint64_.Clear();
  test_sfixed64_.Clear();
  test_uint32_.Clear();
  test_fixed32_.Clear();
  test_uint64_.Clear();
  test_fixed64_.Clear();
  test_float_.Clear();
  test_double_.Clear();
  test_boolean_.Clear();
  test_enum_small_.Clear();
  test_enum_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessPacked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 test_int32 = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_test_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_test_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 test_sint32 = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_test_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_test_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 test_sfixed32 = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_test_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_test_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated int64 test_int64 = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_test_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_test_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 test_sint64 = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_test_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_test_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 test_sfixed64 = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_test_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_test_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 test_uint32 = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_test_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_test_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 test_fixed32 = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_test_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_test_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint64 test_uint64 = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_test_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_test_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 test_fixed64 = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_test_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_test_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated float test_float = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_test_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_test_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double test_double = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_test_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97) {
          _internal_add_test_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool test_boolean = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_test_boolean(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_test_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_test_enum_small(), ptr, ctx, ::foo::TestEnumSmall_IsValid, &_internal_metadata_, 14);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnumSmall_IsValid(val))) {
            _internal_add_test_enum_small(static_cast<::foo::TestEnumSmall>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .foo.TestEnum test_enum = 15 [packed = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_test_enum(), ptr, ctx, ::foo::TestEnum_IsValid, &_internal_metadata_, 15);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnum_IsValid(val))) {
            _internal_add_test_enum(static_cast<::foo::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessPacked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessPacked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 test_int32 = 1 [packed = true];
  {
    int byte_size = _test_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_test_int32(), byte_size, target);
    }
  }

  // repeated sint32 test_sint32 = 2 [packed = true];
  {
    int byte_size = _test_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          2, _internal_test_sint32(), byte_size, target);
    }
  }

  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  if (this->_internal_test_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_test_sfixed32(), target);
  }

  // repeated int64 test_int64 = 4 [packed = true];
  {
    int byte_size = _test_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_test_int64(), byte_size, target);
    }
  }

  // repeated sint64 test_sint64 = 5 [packed = true];
  {
    int byte_size = _test_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          5, _internal_test_sint64(), byte_size, target);
    }
  }

  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  if (this->_internal_test_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_test_sfixed64(), target);
  }

  // repeated uint32 test_uint32 = 7 [packed = true];
  {
    int byte_size = _test_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_test_uint32(), byte_size, target);
    }
  }

  // repeated fixed32 test_fixed32 = 8 [packed = true];
  if (this->_internal_test_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_test_fixed32(), target);
  }

  // repeated uint64 test_uint64 = 9 [packed = true];
  {
    int byte_size = _test_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          9, _internal_test_uint64(), byte_size, target);
    }
  }

  // repeated fixed64 test_fixed64 = 10 [packed = true];
  if (this->_internal_test_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_test_fixed64(), target);
  }

  // repeated float test_float = 11 [packed = true];
  if (this->_internal_test_float_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_test_float(), target);
  }

  // repeated double test_double = 12 [packed = true];
  if (this->_internal_test_double_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_test_double(), target);
  }

  // repeated bool test_boolean = 13 [packed = true];
  if (this->_internal_test_boolean_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_test_boolean(), target);
  }

  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  {
    int byte_size = _test_enum_small_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          14, test_enum_small_, byte_size, target);
    }
  }

  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  {
    int byte_size = _test_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          15, test_enum_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessPacked)
  return target;
}

size_t TestMessPacked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessPacked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 test_int32 = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->test_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 test_sint32 = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->test_sint32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed32 test_sfixed32 = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_sfixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 test_int64 = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->test_int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 test_sint64 = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->test_sint64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sfixed64 test_sfixed64 = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_sfixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 test_uint32 = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->test_uint32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 test_fixed32 = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_fixed32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 test_uint64 = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->test_uint64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 test_fixed64 = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_fixed64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float test_float = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double test_double = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_double_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool test_boolean = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_test_boolean_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_boolean_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .foo.TestEnumSmall test_enum_small = 14 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_enum_small_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_test_enum_small(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_enum_small_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .foo.TestEnum test_enum = 15 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_test_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _test_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessPacked::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessPacked)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessPacked* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessPacked>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessPacked)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessPacked)
    MergeFrom(*source);
  }
}

void TestMessPacked::MergeFrom(const TestMessPacked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessPacked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_int32_.MergeFrom(from.test_int32_);
  test_sint32_.MergeFrom(from.test_sint32_);
  test_sfixed32_.MergeFrom(from.test_sfixed32_);
  test_int64_.MergeFrom(from.test_int64_);
  test_sint64_.MergeFrom(from.test_sint64_);
  test_sfixed64_.MergeFrom(from.test_sfixed64_);
  test_uint32_.MergeFrom(from.test_uint32_);
  test_fixed32_.MergeFrom(from.test_fixed32_);
  test_uint64_.MergeFrom(from.test_uint64_);
  test_fixed64_.MergeFrom(from.test_fixed64_);
  test_float_.MergeFrom(from.test_float_);
  test_double_.MergeFrom(from.test_double_);
  test_boolean_.MergeFrom(from.test_boolean_);
  test_enum_small_.MergeFrom(from.test_enum_small_);
  test_enum_.MergeFrom(from.test_enum_);
}

void TestMessPacked::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessPacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessPacked::CopyFrom(const TestMessPacked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessPacked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessPacked::IsInitialized() const {
  return true;
}

void TestMessPacked::InternalSwap(TestMessPacked* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  test_int32_.InternalSwap(&other->test_int32_);
  test_sint32_.InternalSwap(&other->test_sint32_);
  test_sfixed32_.InternalSwap(&other->test_sfixed32_);
  test_int64_.InternalSwap(&other->test_int64_);
  test_sint64_.InternalSwap(&other->test_sint64_);
  test_sfixed64_.InternalSwap(&other->test_sfixed64_);
  test_uint32_.InternalSwap(&other->test_uint32_);
  test_fixed32_.InternalSwap(&other->test_fixed32_);
  test_uint64_.InternalSwap(&other->test_uint64_);
  test_fixed64_.InternalSwap(&other->test_fixed64_);
  test_float_.InternalSwap(&other->test_float_);
  test_double_.InternalSwap(&other->test_double_);
  test_boolean_.InternalSwap(&other->test_boolean_);
  test_enum_small_.InternalSwap(&other->test_enum_small_);
  test_enum_.InternalSwap(&other->test_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessPacked::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessOptional::InitAsDefaultInstance() {
  ::foo::_TestMessOptional_default_instance_._instance.get_mutable()->test_message_ = const_cast< ::foo::SubMess*>(
      ::foo::SubMess::internal_default_instance());
}
class TestMessOptional::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessOptional>()._has_bits_);
  static void set_has_test_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_test_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_test_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_test_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_test_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_test_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_test_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_test_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_test_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_test_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_test_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_test_double(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_test_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_test_enum_small(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_test_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_test_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_test_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::foo::SubMess& test_message(const TestMessOptional* msg);
  static void set_has_test_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::foo::SubMess&
TestMessOptional::_Internal::test_message(const TestMessOptional* msg) {
  return *msg->test_message_;
}
TestMessOptional::TestMessOptional(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessOptional)
}
TestMessOptional::TestMessOptional(const TestMessOptional& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test_string()) {
    test_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_string(),
      GetArena());
  }
  test_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test_bytes()) {
    test_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_bytes(),
      GetArena());
  }
  if (from._internal_has_test_message()) {
    test_message_ = new ::foo::SubMess(*from.test_message_);
  } else {
    test_message_ = nullptr;
  }
  ::memcpy(&test_int32_, &from.test_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_enum_) -
    reinterpret_cast<char*>(&test_int32_)) + sizeof(test_enum_));
  // @@protoc_insertion_point(copy_constructor:foo.TestMessOptional)
}

void TestMessOptional::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessOptional_t_2ftest_2dfull_2eproto.base);
  test_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&test_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_boolean_) -
      reinterpret_cast<char*>(&test_message_)) + sizeof(test_boolean_));
  test_enum_small_ = -1;
  test_enum_ = -123456;
}

TestMessOptional::~TestMessOptional() {
  // @@protoc_insertion_point(destructor:foo.TestMessOptional)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessOptional::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete test_message_;
}

void TestMessOptional::ArenaDtor(void* object) {
  TestMessOptional* _this = reinterpret_cast< TestMessOptional* >(object);
  (void)_this;
}
void TestMessOptional::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessOptional::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessOptional& TestMessOptional::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessOptional_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessOptional::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessOptional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      test_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      test_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(test_message_ != nullptr);
      test_message_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&test_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_sfixed32_) -
        reinterpret_cast<char*>(&test_int32_)) + sizeof(test_sfixed32_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&test_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&test_boolean_) -
        reinterpret_cast<char*>(&test_uint32_)) + sizeof(test_boolean_));
  }
  if (cached_has_bits & 0x00030000u) {
    test_enum_small_ = -1;
    test_enum_ = -123456;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessOptional::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 test_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_test_int32(&has_bits);
          test_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 test_sint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_test_sint32(&has_bits);
          test_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 test_sfixed32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_test_sfixed32(&has_bits);
          test_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional int64 test_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_test_int64(&has_bits);
          test_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 test_sint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_test_sint64(&has_bits);
          test_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 test_sfixed64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_test_sfixed64(&has_bits);
          test_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional uint32 test_uint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_test_uint32(&has_bits);
          test_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 test_fixed32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_test_fixed32(&has_bits);
          test_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint64 test_uint64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_test_uint64(&has_bits);
          test_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 test_fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_test_fixed64(&has_bits);
          test_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional float test_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_test_float(&has_bits);
          test_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double test_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_test_double(&has_bits);
          test_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool test_boolean = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_test_boolean(&has_bits);
          test_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .foo.TestEnumSmall test_enum_small = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnumSmall_IsValid(val))) {
            _internal_set_test_enum_small(static_cast<::foo::TestEnumSmall>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .foo.TestEnum test_enum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnum_IsValid(val))) {
            _internal_set_test_enum(static_cast<::foo::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string test_string = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_test_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessOptional.test_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes test_bytes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_test_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .foo.SubMess test_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessOptional::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessOptional)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 test_int32 = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test_int32(), target);
  }

  // optional sint32 test_sint32 = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_test_sint32(), target);
  }

  // optional sfixed32 test_sfixed32 = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_test_sfixed32(), target);
  }

  // optional int64 test_int64 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_test_int64(), target);
  }

  // optional sint64 test_sint64 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_test_sint64(), target);
  }

  // optional sfixed64 test_sfixed64 = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_test_sfixed64(), target);
  }

  // optional uint32 test_uint32 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_test_uint32(), target);
  }

  // optional fixed32 test_fixed32 = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_test_fixed32(), target);
  }

  // optional uint64 test_uint64 = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_test_uint64(), target);
  }

  // optional fixed64 test_fixed64 = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_test_fixed64(), target);
  }

  // optional float test_float = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_test_float(), target);
  }

  // optional double test_double = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_test_double(), target);
  }

  // optional bool test_boolean = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_test_boolean(), target);
  }

  // optional .foo.TestEnumSmall test_enum_small = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_test_enum_small(), target);
  }

  // optional .foo.TestEnum test_enum = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_test_enum(), target);
  }

  // optional string test_string = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test_string().data(), static_cast<int>(this->_internal_test_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessOptional.test_string");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_test_string(), target);
  }

  // optional bytes test_bytes = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_test_bytes(), target);
  }

  // optional .foo.SubMess test_message = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::test_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessOptional)
  return target;
}

size_t TestMessOptional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessOptional)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string test_string = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_test_string());
    }

    // optional bytes test_bytes = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_test_bytes());
    }

    // optional .foo.SubMess test_message = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *test_message_);
    }

    // optional int32 test_int32 = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_test_int32());
    }

    // optional sint32 test_sint32 = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_test_sint32());
    }

    // optional int64 test_int64 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_test_int64());
    }

    // optional sint64 test_sint64 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_test_sint64());
    }

    // optional sfixed32 test_sfixed32 = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 test_uint32 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_test_uint32());
    }

    // optional sfixed64 test_sfixed64 = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint64 test_uint64 = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_test_uint64());
    }

    // optional fixed32 test_fixed32 = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float test_float = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 test_fixed64 = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double test_double = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional bool test_boolean = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .foo.TestEnumSmall test_enum_small = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test_enum_small());
    }

    // optional .foo.TestEnum test_enum = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test_enum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessOptional::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessOptional)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessOptional* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessOptional>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessOptional)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessOptional)
    MergeFrom(*source);
  }
}

void TestMessOptional::MergeFrom(const TestMessOptional& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessOptional)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_test_string(from._internal_test_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_test_bytes(from._internal_test_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_test_message()->::foo::SubMess::MergeFrom(from._internal_test_message());
    }
    if (cached_has_bits & 0x00000008u) {
      test_int32_ = from.test_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      test_sint32_ = from.test_sint32_;
    }
    if (cached_has_bits & 0x00000020u) {
      test_int64_ = from.test_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      test_sint64_ = from.test_sint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      test_sfixed32_ = from.test_sfixed32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      test_uint32_ = from.test_uint32_;
    }
    if (cached_has_bits & 0x00000200u) {
      test_sfixed64_ = from.test_sfixed64_;
    }
    if (cached_has_bits & 0x00000400u) {
      test_uint64_ = from.test_uint64_;
    }
    if (cached_has_bits & 0x00000800u) {
      test_fixed32_ = from.test_fixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      test_float_ = from.test_float_;
    }
    if (cached_has_bits & 0x00002000u) {
      test_fixed64_ = from.test_fixed64_;
    }
    if (cached_has_bits & 0x00004000u) {
      test_double_ = from.test_double_;
    }
    if (cached_has_bits & 0x00008000u) {
      test_boolean_ = from.test_boolean_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      test_enum_small_ = from.test_enum_small_;
    }
    if (cached_has_bits & 0x00020000u) {
      test_enum_ = from.test_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestMessOptional::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessOptional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessOptional::CopyFrom(const TestMessOptional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessOptional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessOptional::IsInitialized() const {
  if (_internal_has_test_message()) {
    if (!test_message_->IsInitialized()) return false;
  }
  return true;
}

void TestMessOptional::InternalSwap(TestMessOptional* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_string_.Swap(&other->test_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_bytes_.Swap(&other->test_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessOptional, test_boolean_)
      + sizeof(TestMessOptional::test_boolean_)
      - PROTOBUF_FIELD_OFFSET(TestMessOptional, test_message_)>(
          reinterpret_cast<char*>(&test_message_),
          reinterpret_cast<char*>(&other->test_message_));
  swap(test_enum_small_, other->test_enum_small_);
  swap(test_enum_, other->test_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessOptional::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessOneof::InitAsDefaultInstance() {
  ::foo::_TestMessOneof_default_instance_.test_int32_ = 0;
  ::foo::_TestMessOneof_default_instance_.test_sint32_ = 0;
  ::foo::_TestMessOneof_default_instance_.test_sfixed32_ = 0;
  ::foo::_TestMessOneof_default_instance_.test_int64_ = PROTOBUF_LONGLONG(0);
  ::foo::_TestMessOneof_default_instance_.test_sint64_ = PROTOBUF_LONGLONG(0);
  ::foo::_TestMessOneof_default_instance_.test_sfixed64_ = PROTOBUF_LONGLONG(0);
  ::foo::_TestMessOneof_default_instance_.test_uint32_ = 0u;
  ::foo::_TestMessOneof_default_instance_.test_fixed32_ = 0u;
  ::foo::_TestMessOneof_default_instance_.test_uint64_ = PROTOBUF_ULONGLONG(0);
  ::foo::_TestMessOneof_default_instance_.test_fixed64_ = PROTOBUF_ULONGLONG(0);
  ::foo::_TestMessOneof_default_instance_.test_float_ = 0;
  ::foo::_TestMessOneof_default_instance_.test_double_ = 0;
  ::foo::_TestMessOneof_default_instance_.test_boolean_ = false;
  ::foo::_TestMessOneof_default_instance_.test_enum_small_ = -1;
  ::foo::_TestMessOneof_default_instance_.test_enum_ = -123456;
  ::foo::_TestMessOneof_default_instance_.test_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::foo::_TestMessOneof_default_instance_.test_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::foo::_TestMessOneof_default_instance_.test_message_ = const_cast< ::foo::SubMess*>(
      ::foo::SubMess::internal_default_instance());
}
class TestMessOneof::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessOneof>()._has_bits_);
  static const ::foo::SubMess& test_message(const TestMessOneof* msg);
  static void set_has_opt_int(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::foo::SubMess&
TestMessOneof::_Internal::test_message(const TestMessOneof* msg) {
  return *msg->test_oneof_.test_message_;
}
void TestMessOneof::set_allocated_test_message(::foo::SubMess* test_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_test_oneof();
  if (test_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test_message);
    if (message_arena != submessage_arena) {
      test_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_message, submessage_arena);
    }
    set_has_test_message();
    test_oneof_.test_message_ = test_message;
  }
  // @@protoc_insertion_point(field_set_allocated:foo.TestMessOneof.test_message)
}
TestMessOneof::TestMessOneof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessOneof)
}
TestMessOneof::TestMessOneof(const TestMessOneof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opt_int_ = from.opt_int_;
  clear_has_test_oneof();
  switch (from.test_oneof_case()) {
    case kTestInt32: {
      _internal_set_test_int32(from._internal_test_int32());
      break;
    }
    case kTestSint32: {
      _internal_set_test_sint32(from._internal_test_sint32());
      break;
    }
    case kTestSfixed32: {
      _internal_set_test_sfixed32(from._internal_test_sfixed32());
      break;
    }
    case kTestInt64: {
      _internal_set_test_int64(from._internal_test_int64());
      break;
    }
    case kTestSint64: {
      _internal_set_test_sint64(from._internal_test_sint64());
      break;
    }
    case kTestSfixed64: {
      _internal_set_test_sfixed64(from._internal_test_sfixed64());
      break;
    }
    case kTestUint32: {
      _internal_set_test_uint32(from._internal_test_uint32());
      break;
    }
    case kTestFixed32: {
      _internal_set_test_fixed32(from._internal_test_fixed32());
      break;
    }
    case kTestUint64: {
      _internal_set_test_uint64(from._internal_test_uint64());
      break;
    }
    case kTestFixed64: {
      _internal_set_test_fixed64(from._internal_test_fixed64());
      break;
    }
    case kTestFloat: {
      _internal_set_test_float(from._internal_test_float());
      break;
    }
    case kTestDouble: {
      _internal_set_test_double(from._internal_test_double());
      break;
    }
    case kTestBoolean: {
      _internal_set_test_boolean(from._internal_test_boolean());
      break;
    }
    case kTestEnumSmall: {
      _internal_set_test_enum_small(from._internal_test_enum_small());
      break;
    }
    case kTestEnum: {
      _internal_set_test_enum(from._internal_test_enum());
      break;
    }
    case kTestString: {
      _internal_set_test_string(from._internal_test_string());
      break;
    }
    case kTestBytes: {
      _internal_set_test_bytes(from._internal_test_bytes());
      break;
    }
    case kTestMessage: {
      _internal_mutable_test_message()->::foo::SubMess::MergeFrom(from._internal_test_message());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessOneof)
}

void TestMessOneof::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessOneof_t_2ftest_2dfull_2eproto.base);
  opt_int_ = 0;
  clear_has_test_oneof();
}

TestMessOneof::~TestMessOneof() {
  // @@protoc_insertion_point(destructor:foo.TestMessOneof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessOneof::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_test_oneof()) {
    clear_test_oneof();
  }
}

void TestMessOneof::ArenaDtor(void* object) {
  TestMessOneof* _this = reinterpret_cast< TestMessOneof* >(object);
  (void)_this;
}
void TestMessOneof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessOneof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessOneof& TestMessOneof::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessOneof_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessOneof::clear_test_oneof() {
// @@protoc_insertion_point(one_of_clear_start:foo.TestMessOneof)
  switch (test_oneof_case()) {
    case kTestInt32: {
      // No need to clear
      break;
    }
    case kTestSint32: {
      // No need to clear
      break;
    }
    case kTestSfixed32: {
      // No need to clear
      break;
    }
    case kTestInt64: {
      // No need to clear
      break;
    }
    case kTestSint64: {
      // No need to clear
      break;
    }
    case kTestSfixed64: {
      // No need to clear
      break;
    }
    case kTestUint32: {
      // No need to clear
      break;
    }
    case kTestFixed32: {
      // No need to clear
      break;
    }
    case kTestUint64: {
      // No need to clear
      break;
    }
    case kTestFixed64: {
      // No need to clear
      break;
    }
    case kTestFloat: {
      // No need to clear
      break;
    }
    case kTestDouble: {
      // No need to clear
      break;
    }
    case kTestBoolean: {
      // No need to clear
      break;
    }
    case kTestEnumSmall: {
      // No need to clear
      break;
    }
    case kTestEnum: {
      // No need to clear
      break;
    }
    case kTestString: {
      test_oneof_.test_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kTestBytes: {
      test_oneof_.test_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kTestMessage: {
      if (GetArena() == nullptr) {
        delete test_oneof_.test_message_;
      }
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}


void TestMessOneof::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opt_int_ = 0;
  clear_test_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessOneof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 test_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_test_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 test_sint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_test_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sfixed32 test_sfixed32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_test_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // int64 test_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_test_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 test_sint64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_test_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sfixed64 test_sfixed64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_test_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // uint32 test_uint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_test_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 test_fixed32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _internal_set_test_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // uint64 test_uint64 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_test_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 test_fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _internal_set_test_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // float test_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _internal_set_test_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double test_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _internal_set_test_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool test_boolean = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _internal_set_test_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .foo.TestEnumSmall test_enum_small = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnumSmall_IsValid(val))) {
            _internal_set_test_enum_small(static_cast<::foo::TestEnumSmall>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .foo.TestEnum test_enum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnum_IsValid(val))) {
            _internal_set_test_enum(static_cast<::foo::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // string test_string = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_test_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessOneof.test_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes test_bytes = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_test_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .foo.SubMess test_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 opt_int = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_opt_int(&has_bits);
          opt_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessOneof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessOneof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (test_oneof_case()) {
    case kTestInt32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_test_int32(), target);
      break;
    }
    case kTestSint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_test_sint32(), target);
      break;
    }
    case kTestSfixed32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_test_sfixed32(), target);
      break;
    }
    case kTestInt64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_test_int64(), target);
      break;
    }
    case kTestSint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(5, this->_internal_test_sint64(), target);
      break;
    }
    case kTestSfixed64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_test_sfixed64(), target);
      break;
    }
    case kTestUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_test_uint32(), target);
      break;
    }
    case kTestFixed32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_test_fixed32(), target);
      break;
    }
    case kTestUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_test_uint64(), target);
      break;
    }
    case kTestFixed64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_test_fixed64(), target);
      break;
    }
    case kTestFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_test_float(), target);
      break;
    }
    case kTestDouble: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_test_double(), target);
      break;
    }
    case kTestBoolean: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_test_boolean(), target);
      break;
    }
    case kTestEnumSmall: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        14, this->_internal_test_enum_small(), target);
      break;
    }
    case kTestEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        15, this->_internal_test_enum(), target);
      break;
    }
    case kTestString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_test_string().data(), static_cast<int>(this->_internal_test_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "foo.TestMessOneof.test_string");
      target = stream->WriteStringMaybeAliased(
          16, this->_internal_test_string(), target);
      break;
    }
    case kTestBytes: {
      target = stream->WriteBytesMaybeAliased(
          17, this->_internal_test_bytes(), target);
      break;
    }
    case kTestMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::test_message(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional int32 opt_int = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_opt_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessOneof)
  return target;
}

size_t TestMessOneof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessOneof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 opt_int = 19;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opt_int());
  }

  switch (test_oneof_case()) {
    // int32 test_int32 = 1;
    case kTestInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_test_int32());
      break;
    }
    // sint32 test_sint32 = 2;
    case kTestSint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_test_sint32());
      break;
    }
    // sfixed32 test_sfixed32 = 3;
    case kTestSfixed32: {
      total_size += 1 + 4;
      break;
    }
    // int64 test_int64 = 4;
    case kTestInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_test_int64());
      break;
    }
    // sint64 test_sint64 = 5;
    case kTestSint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_test_sint64());
      break;
    }
    // sfixed64 test_sfixed64 = 6;
    case kTestSfixed64: {
      total_size += 1 + 8;
      break;
    }
    // uint32 test_uint32 = 7;
    case kTestUint32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_test_uint32());
      break;
    }
    // fixed32 test_fixed32 = 8;
    case kTestFixed32: {
      total_size += 1 + 4;
      break;
    }
    // uint64 test_uint64 = 9;
    case kTestUint64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_test_uint64());
      break;
    }
    // fixed64 test_fixed64 = 10;
    case kTestFixed64: {
      total_size += 1 + 8;
      break;
    }
    // float test_float = 11;
    case kTestFloat: {
      total_size += 1 + 4;
      break;
    }
    // double test_double = 12;
    case kTestDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool test_boolean = 13;
    case kTestBoolean: {
      total_size += 1 + 1;
      break;
    }
    // .foo.TestEnumSmall test_enum_small = 14;
    case kTestEnumSmall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test_enum_small());
      break;
    }
    // .foo.TestEnum test_enum = 15;
    case kTestEnum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test_enum());
      break;
    }
    // string test_string = 16;
    case kTestString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_test_string());
      break;
    }
    // bytes test_bytes = 17;
    case kTestBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_test_bytes());
      break;
    }
    // .foo.SubMess test_message = 18;
    case kTestMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *test_oneof_.test_message_);
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessOneof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessOneof)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessOneof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessOneof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessOneof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessOneof)
    MergeFrom(*source);
  }
}

void TestMessOneof::MergeFrom(const TestMessOneof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessOneof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opt_int()) {
    _internal_set_opt_int(from._internal_opt_int());
  }
  switch (from.test_oneof_case()) {
    case kTestInt32: {
      _internal_set_test_int32(from._internal_test_int32());
      break;
    }
    case kTestSint32: {
      _internal_set_test_sint32(from._internal_test_sint32());
      break;
    }
    case kTestSfixed32: {
      _internal_set_test_sfixed32(from._internal_test_sfixed32());
      break;
    }
    case kTestInt64: {
      _internal_set_test_int64(from._internal_test_int64());
      break;
    }
    case kTestSint64: {
      _internal_set_test_sint64(from._internal_test_sint64());
      break;
    }
    case kTestSfixed64: {
      _internal_set_test_sfixed64(from._internal_test_sfixed64());
      break;
    }
    case kTestUint32: {
      _internal_set_test_uint32(from._internal_test_uint32());
      break;
    }
    case kTestFixed32: {
      _internal_set_test_fixed32(from._internal_test_fixed32());
      break;
    }
    case kTestUint64: {
      _internal_set_test_uint64(from._internal_test_uint64());
      break;
    }
    case kTestFixed64: {
      _internal_set_test_fixed64(from._internal_test_fixed64());
      break;
    }
    case kTestFloat: {
      _internal_set_test_float(from._internal_test_float());
      break;
    }
    case kTestDouble: {
      _internal_set_test_double(from._internal_test_double());
      break;
    }
    case kTestBoolean: {
      _internal_set_test_boolean(from._internal_test_boolean());
      break;
    }
    case kTestEnumSmall: {
      _internal_set_test_enum_small(from._internal_test_enum_small());
      break;
    }
    case kTestEnum: {
      _internal_set_test_enum(from._internal_test_enum());
      break;
    }
    case kTestString: {
      _internal_set_test_string(from._internal_test_string());
      break;
    }
    case kTestBytes: {
      _internal_set_test_bytes(from._internal_test_bytes());
      break;
    }
    case kTestMessage: {
      _internal_mutable_test_message()->::foo::SubMess::MergeFrom(from._internal_test_message());
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
}

void TestMessOneof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessOneof::CopyFrom(const TestMessOneof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessOneof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessOneof::IsInitialized() const {
  switch (test_oneof_case()) {
    case kTestInt32: {
      break;
    }
    case kTestSint32: {
      break;
    }
    case kTestSfixed32: {
      break;
    }
    case kTestInt64: {
      break;
    }
    case kTestSint64: {
      break;
    }
    case kTestSfixed64: {
      break;
    }
    case kTestUint32: {
      break;
    }
    case kTestFixed32: {
      break;
    }
    case kTestUint64: {
      break;
    }
    case kTestFixed64: {
      break;
    }
    case kTestFloat: {
      break;
    }
    case kTestDouble: {
      break;
    }
    case kTestBoolean: {
      break;
    }
    case kTestEnumSmall: {
      break;
    }
    case kTestEnum: {
      break;
    }
    case kTestString: {
      break;
    }
    case kTestBytes: {
      break;
    }
    case kTestMessage: {
      if (has_test_message()) {
        if (!this->test_message().IsInitialized()) return false;
      }
      break;
    }
    case TEST_ONEOF_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestMessOneof::InternalSwap(TestMessOneof* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(opt_int_, other->opt_int_);
  swap(test_oneof_, other->test_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessOneof::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredInt32::InitAsDefaultInstance() {
}
class TestMessRequiredInt32::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredInt32>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredInt32::TestMessRequiredInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredInt32)
}
TestMessRequiredInt32::TestMessRequiredInt32(const TestMessRequiredInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredInt32)
}

void TestMessRequiredInt32::SharedCtor() {
  test_ = 0;
}

TestMessRequiredInt32::~TestMessRequiredInt32() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredInt32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredInt32::ArenaDtor(void* object) {
  TestMessRequiredInt32* _this = reinterpret_cast< TestMessRequiredInt32* >(object);
  (void)_this;
}
void TestMessRequiredInt32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredInt32& TestMessRequiredInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredInt32_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 test = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredInt32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 test = 42;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredInt32)
  return target;
}

size_t TestMessRequiredInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredInt32)
  size_t total_size = 0;

  // required int32 test = 42;
  if (_internal_has_test()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredInt32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredInt32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredInt32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredInt32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredInt32)
    MergeFrom(*source);
  }
}

void TestMessRequiredInt32::MergeFrom(const TestMessRequiredInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredInt32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredInt32::CopyFrom(const TestMessRequiredInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredInt32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredInt32::InternalSwap(TestMessRequiredInt32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredInt32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredSInt32::InitAsDefaultInstance() {
}
class TestMessRequiredSInt32::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredSInt32>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredSInt32::TestMessRequiredSInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredSInt32)
}
TestMessRequiredSInt32::TestMessRequiredSInt32(const TestMessRequiredSInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredSInt32)
}

void TestMessRequiredSInt32::SharedCtor() {
  test_ = 0;
}

TestMessRequiredSInt32::~TestMessRequiredSInt32() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredSInt32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredSInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredSInt32::ArenaDtor(void* object) {
  TestMessRequiredSInt32* _this = reinterpret_cast< TestMessRequiredSInt32* >(object);
  (void)_this;
}
void TestMessRequiredSInt32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredSInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredSInt32& TestMessRequiredSInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredSInt32_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredSInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredSInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredSInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint32 test = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredSInt32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredSInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 test = 43;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(43, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredSInt32)
  return target;
}

size_t TestMessRequiredSInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredSInt32)
  size_t total_size = 0;

  // required sint32 test = 43;
  if (_internal_has_test()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredSInt32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredSInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredSInt32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredSInt32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredSInt32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredSInt32)
    MergeFrom(*source);
  }
}

void TestMessRequiredSInt32::MergeFrom(const TestMessRequiredSInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredSInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredSInt32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredSInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSInt32::CopyFrom(const TestMessRequiredSInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredSInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSInt32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredSInt32::InternalSwap(TestMessRequiredSInt32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredSInt32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredSFixed32::InitAsDefaultInstance() {
}
class TestMessRequiredSFixed32::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredSFixed32>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredSFixed32::TestMessRequiredSFixed32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredSFixed32)
}
TestMessRequiredSFixed32::TestMessRequiredSFixed32(const TestMessRequiredSFixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredSFixed32)
}

void TestMessRequiredSFixed32::SharedCtor() {
  test_ = 0;
}

TestMessRequiredSFixed32::~TestMessRequiredSFixed32() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredSFixed32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredSFixed32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredSFixed32::ArenaDtor(void* object) {
  TestMessRequiredSFixed32* _this = reinterpret_cast< TestMessRequiredSFixed32* >(object);
  (void)_this;
}
void TestMessRequiredSFixed32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredSFixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredSFixed32& TestMessRequiredSFixed32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredSFixed32_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredSFixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredSFixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredSFixed32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sfixed32 test = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredSFixed32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredSFixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed32 test = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(100, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredSFixed32)
  return target;
}

size_t TestMessRequiredSFixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredSFixed32)
  size_t total_size = 0;

  // required sfixed32 test = 100;
  if (_internal_has_test()) {
    total_size += 2 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredSFixed32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredSFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredSFixed32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredSFixed32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredSFixed32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredSFixed32)
    MergeFrom(*source);
  }
}

void TestMessRequiredSFixed32::MergeFrom(const TestMessRequiredSFixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredSFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredSFixed32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredSFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSFixed32::CopyFrom(const TestMessRequiredSFixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredSFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSFixed32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredSFixed32::InternalSwap(TestMessRequiredSFixed32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredSFixed32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredInt64::InitAsDefaultInstance() {
}
class TestMessRequiredInt64::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredInt64>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredInt64::TestMessRequiredInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredInt64)
}
TestMessRequiredInt64::TestMessRequiredInt64(const TestMessRequiredInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredInt64)
}

void TestMessRequiredInt64::SharedCtor() {
  test_ = PROTOBUF_LONGLONG(0);
}

TestMessRequiredInt64::~TestMessRequiredInt64() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredInt64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredInt64::ArenaDtor(void* object) {
  TestMessRequiredInt64* _this = reinterpret_cast< TestMessRequiredInt64* >(object);
  (void)_this;
}
void TestMessRequiredInt64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredInt64& TestMessRequiredInt64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredInt64_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredInt64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredInt64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredInt64)
  return target;
}

size_t TestMessRequiredInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredInt64)
  size_t total_size = 0;

  // required int64 test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredInt64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredInt64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredInt64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredInt64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredInt64)
    MergeFrom(*source);
  }
}

void TestMessRequiredInt64::MergeFrom(const TestMessRequiredInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredInt64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredInt64::CopyFrom(const TestMessRequiredInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredInt64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredInt64::InternalSwap(TestMessRequiredInt64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredInt64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredSInt64::InitAsDefaultInstance() {
}
class TestMessRequiredSInt64::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredSInt64>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredSInt64::TestMessRequiredSInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredSInt64)
}
TestMessRequiredSInt64::TestMessRequiredSInt64(const TestMessRequiredSInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredSInt64)
}

void TestMessRequiredSInt64::SharedCtor() {
  test_ = PROTOBUF_LONGLONG(0);
}

TestMessRequiredSInt64::~TestMessRequiredSInt64() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredSInt64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredSInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredSInt64::ArenaDtor(void* object) {
  TestMessRequiredSInt64* _this = reinterpret_cast< TestMessRequiredSInt64* >(object);
  (void)_this;
}
void TestMessRequiredSInt64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredSInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredSInt64& TestMessRequiredSInt64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredSInt64_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredSInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredSInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredSInt64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sint64 test = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredSInt64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredSInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint64 test = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(11, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredSInt64)
  return target;
}

size_t TestMessRequiredSInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredSInt64)
  size_t total_size = 0;

  // required sint64 test = 11;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredSInt64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredSInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredSInt64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredSInt64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredSInt64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredSInt64)
    MergeFrom(*source);
  }
}

void TestMessRequiredSInt64::MergeFrom(const TestMessRequiredSInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredSInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredSInt64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredSInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSInt64::CopyFrom(const TestMessRequiredSInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredSInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSInt64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredSInt64::InternalSwap(TestMessRequiredSInt64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredSInt64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredSFixed64::InitAsDefaultInstance() {
}
class TestMessRequiredSFixed64::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredSFixed64>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredSFixed64::TestMessRequiredSFixed64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredSFixed64)
}
TestMessRequiredSFixed64::TestMessRequiredSFixed64(const TestMessRequiredSFixed64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredSFixed64)
}

void TestMessRequiredSFixed64::SharedCtor() {
  test_ = PROTOBUF_LONGLONG(0);
}

TestMessRequiredSFixed64::~TestMessRequiredSFixed64() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredSFixed64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredSFixed64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredSFixed64::ArenaDtor(void* object) {
  TestMessRequiredSFixed64* _this = reinterpret_cast< TestMessRequiredSFixed64* >(object);
  (void)_this;
}
void TestMessRequiredSFixed64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredSFixed64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredSFixed64& TestMessRequiredSFixed64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredSFixed64_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredSFixed64::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredSFixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredSFixed64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required sfixed64 test = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredSFixed64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredSFixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sfixed64 test = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredSFixed64)
  return target;
}

size_t TestMessRequiredSFixed64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredSFixed64)
  size_t total_size = 0;

  // required sfixed64 test = 12;
  if (_internal_has_test()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredSFixed64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredSFixed64)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredSFixed64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredSFixed64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredSFixed64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredSFixed64)
    MergeFrom(*source);
  }
}

void TestMessRequiredSFixed64::MergeFrom(const TestMessRequiredSFixed64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredSFixed64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredSFixed64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredSFixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredSFixed64::CopyFrom(const TestMessRequiredSFixed64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredSFixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredSFixed64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredSFixed64::InternalSwap(TestMessRequiredSFixed64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredSFixed64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredUInt32::InitAsDefaultInstance() {
}
class TestMessRequiredUInt32::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredUInt32>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredUInt32::TestMessRequiredUInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredUInt32)
}
TestMessRequiredUInt32::TestMessRequiredUInt32(const TestMessRequiredUInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredUInt32)
}

void TestMessRequiredUInt32::SharedCtor() {
  test_ = 0u;
}

TestMessRequiredUInt32::~TestMessRequiredUInt32() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredUInt32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredUInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredUInt32::ArenaDtor(void* object) {
  TestMessRequiredUInt32* _this = reinterpret_cast< TestMessRequiredUInt32* >(object);
  (void)_this;
}
void TestMessRequiredUInt32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredUInt32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredUInt32& TestMessRequiredUInt32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredUInt32_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredUInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredUInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredUInt32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredUInt32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredUInt32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredUInt32)
  return target;
}

size_t TestMessRequiredUInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredUInt32)
  size_t total_size = 0;

  // required uint32 test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredUInt32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredUInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredUInt32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredUInt32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredUInt32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredUInt32)
    MergeFrom(*source);
  }
}

void TestMessRequiredUInt32::MergeFrom(const TestMessRequiredUInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredUInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredUInt32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredUInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredUInt32::CopyFrom(const TestMessRequiredUInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredUInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredUInt32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredUInt32::InternalSwap(TestMessRequiredUInt32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredUInt32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredFixed32::InitAsDefaultInstance() {
}
class TestMessRequiredFixed32::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredFixed32>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredFixed32::TestMessRequiredFixed32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredFixed32)
}
TestMessRequiredFixed32::TestMessRequiredFixed32(const TestMessRequiredFixed32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredFixed32)
}

void TestMessRequiredFixed32::SharedCtor() {
  test_ = 0u;
}

TestMessRequiredFixed32::~TestMessRequiredFixed32() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredFixed32)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredFixed32::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredFixed32::ArenaDtor(void* object) {
  TestMessRequiredFixed32* _this = reinterpret_cast< TestMessRequiredFixed32* >(object);
  (void)_this;
}
void TestMessRequiredFixed32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredFixed32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredFixed32& TestMessRequiredFixed32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredFixed32_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredFixed32::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredFixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredFixed32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredFixed32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredFixed32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredFixed32)
  return target;
}

size_t TestMessRequiredFixed32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredFixed32)
  size_t total_size = 0;

  // required fixed32 test = 1;
  if (_internal_has_test()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredFixed32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredFixed32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredFixed32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredFixed32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredFixed32)
    MergeFrom(*source);
  }
}

void TestMessRequiredFixed32::MergeFrom(const TestMessRequiredFixed32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredFixed32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredFixed32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFixed32::CopyFrom(const TestMessRequiredFixed32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredFixed32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFixed32::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredFixed32::InternalSwap(TestMessRequiredFixed32* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredFixed32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredUInt64::InitAsDefaultInstance() {
}
class TestMessRequiredUInt64::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredUInt64>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredUInt64::TestMessRequiredUInt64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredUInt64)
}
TestMessRequiredUInt64::TestMessRequiredUInt64(const TestMessRequiredUInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredUInt64)
}

void TestMessRequiredUInt64::SharedCtor() {
  test_ = PROTOBUF_ULONGLONG(0);
}

TestMessRequiredUInt64::~TestMessRequiredUInt64() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredUInt64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredUInt64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredUInt64::ArenaDtor(void* object) {
  TestMessRequiredUInt64* _this = reinterpret_cast< TestMessRequiredUInt64* >(object);
  (void)_this;
}
void TestMessRequiredUInt64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredUInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredUInt64& TestMessRequiredUInt64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredUInt64_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredUInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredUInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredUInt64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredUInt64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredUInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredUInt64)
  return target;
}

size_t TestMessRequiredUInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredUInt64)
  size_t total_size = 0;

  // required uint64 test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredUInt64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredUInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredUInt64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredUInt64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredUInt64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredUInt64)
    MergeFrom(*source);
  }
}

void TestMessRequiredUInt64::MergeFrom(const TestMessRequiredUInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredUInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredUInt64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredUInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredUInt64::CopyFrom(const TestMessRequiredUInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredUInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredUInt64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredUInt64::InternalSwap(TestMessRequiredUInt64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredUInt64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredFixed64::InitAsDefaultInstance() {
}
class TestMessRequiredFixed64::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredFixed64>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredFixed64::TestMessRequiredFixed64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredFixed64)
}
TestMessRequiredFixed64::TestMessRequiredFixed64(const TestMessRequiredFixed64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredFixed64)
}

void TestMessRequiredFixed64::SharedCtor() {
  test_ = PROTOBUF_ULONGLONG(0);
}

TestMessRequiredFixed64::~TestMessRequiredFixed64() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredFixed64)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredFixed64::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredFixed64::ArenaDtor(void* object) {
  TestMessRequiredFixed64* _this = reinterpret_cast< TestMessRequiredFixed64* >(object);
  (void)_this;
}
void TestMessRequiredFixed64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredFixed64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredFixed64& TestMessRequiredFixed64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredFixed64_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredFixed64::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredFixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredFixed64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredFixed64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredFixed64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredFixed64)
  return target;
}

size_t TestMessRequiredFixed64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredFixed64)
  size_t total_size = 0;

  // required fixed64 test = 1;
  if (_internal_has_test()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredFixed64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredFixed64)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredFixed64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredFixed64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredFixed64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredFixed64)
    MergeFrom(*source);
  }
}

void TestMessRequiredFixed64::MergeFrom(const TestMessRequiredFixed64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredFixed64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredFixed64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredFixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFixed64::CopyFrom(const TestMessRequiredFixed64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredFixed64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFixed64::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredFixed64::InternalSwap(TestMessRequiredFixed64* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredFixed64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredFloat::InitAsDefaultInstance() {
}
class TestMessRequiredFloat::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredFloat>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredFloat::TestMessRequiredFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredFloat)
}
TestMessRequiredFloat::TestMessRequiredFloat(const TestMessRequiredFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredFloat)
}

void TestMessRequiredFloat::SharedCtor() {
  test_ = 0;
}

TestMessRequiredFloat::~TestMessRequiredFloat() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredFloat::ArenaDtor(void* object) {
  TestMessRequiredFloat* _this = reinterpret_cast< TestMessRequiredFloat* >(object);
  (void)_this;
}
void TestMessRequiredFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredFloat& TestMessRequiredFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredFloat_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredFloat)
  return target;
}

size_t TestMessRequiredFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredFloat)
  size_t total_size = 0;

  // required float test = 1;
  if (_internal_has_test()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredFloat)
    MergeFrom(*source);
  }
}

void TestMessRequiredFloat::MergeFrom(const TestMessRequiredFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredFloat::CopyFrom(const TestMessRequiredFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredFloat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredFloat::InternalSwap(TestMessRequiredFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredDouble::InitAsDefaultInstance() {
}
class TestMessRequiredDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredDouble>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredDouble::TestMessRequiredDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredDouble)
}
TestMessRequiredDouble::TestMessRequiredDouble(const TestMessRequiredDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredDouble)
}

void TestMessRequiredDouble::SharedCtor() {
  test_ = 0;
}

TestMessRequiredDouble::~TestMessRequiredDouble() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredDouble::ArenaDtor(void* object) {
  TestMessRequiredDouble* _this = reinterpret_cast< TestMessRequiredDouble* >(object);
  (void)_this;
}
void TestMessRequiredDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredDouble& TestMessRequiredDouble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredDouble_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredDouble)
  return target;
}

size_t TestMessRequiredDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredDouble)
  size_t total_size = 0;

  // required double test = 1;
  if (_internal_has_test()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredDouble)
    MergeFrom(*source);
  }
}

void TestMessRequiredDouble::MergeFrom(const TestMessRequiredDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredDouble::CopyFrom(const TestMessRequiredDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredDouble::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredDouble::InternalSwap(TestMessRequiredDouble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredDouble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredBool::InitAsDefaultInstance() {
}
class TestMessRequiredBool::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredBool>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredBool::TestMessRequiredBool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredBool)
}
TestMessRequiredBool::TestMessRequiredBool(const TestMessRequiredBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredBool)
}

void TestMessRequiredBool::SharedCtor() {
  test_ = false;
}

TestMessRequiredBool::~TestMessRequiredBool() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredBool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredBool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredBool::ArenaDtor(void* object) {
  TestMessRequiredBool* _this = reinterpret_cast< TestMessRequiredBool* >(object);
  (void)_this;
}
void TestMessRequiredBool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredBool& TestMessRequiredBool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredBool_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredBool::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredBool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_test(&has_bits);
          test_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredBool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredBool)
  return target;
}

size_t TestMessRequiredBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredBool)
  size_t total_size = 0;

  // required bool test = 1;
  if (_internal_has_test()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredBool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredBool)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredBool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredBool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredBool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredBool)
    MergeFrom(*source);
  }
}

void TestMessRequiredBool::MergeFrom(const TestMessRequiredBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredBool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredBool::CopyFrom(const TestMessRequiredBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredBool::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredBool::InternalSwap(TestMessRequiredBool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredBool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredEnum::InitAsDefaultInstance() {
}
class TestMessRequiredEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredEnum>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredEnum::TestMessRequiredEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredEnum)
}
TestMessRequiredEnum::TestMessRequiredEnum(const TestMessRequiredEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredEnum)
}

void TestMessRequiredEnum::SharedCtor() {
  test_ = -123456;
}

TestMessRequiredEnum::~TestMessRequiredEnum() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredEnum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredEnum::ArenaDtor(void* object) {
  TestMessRequiredEnum* _this = reinterpret_cast< TestMessRequiredEnum* >(object);
  (void)_this;
}
void TestMessRequiredEnum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredEnum& TestMessRequiredEnum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredEnum_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = -123456;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredEnum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .foo.TestEnum test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnum_IsValid(val))) {
            _internal_set_test(static_cast<::foo::TestEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredEnum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .foo.TestEnum test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredEnum)
  return target;
}

size_t TestMessRequiredEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredEnum)
  size_t total_size = 0;

  // required .foo.TestEnum test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredEnum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredEnum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredEnum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredEnum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredEnum)
    MergeFrom(*source);
  }
}

void TestMessRequiredEnum::MergeFrom(const TestMessRequiredEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredEnum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredEnum::CopyFrom(const TestMessRequiredEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredEnum::InternalSwap(TestMessRequiredEnum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredEnum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredEnumSmall::InitAsDefaultInstance() {
}
class TestMessRequiredEnumSmall::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredEnumSmall>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredEnumSmall::TestMessRequiredEnumSmall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredEnumSmall)
}
TestMessRequiredEnumSmall::TestMessRequiredEnumSmall(const TestMessRequiredEnumSmall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_ = from.test_;
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredEnumSmall)
}

void TestMessRequiredEnumSmall::SharedCtor() {
  test_ = -1;
}

TestMessRequiredEnumSmall::~TestMessRequiredEnumSmall() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredEnumSmall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredEnumSmall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestMessRequiredEnumSmall::ArenaDtor(void* object) {
  TestMessRequiredEnumSmall* _this = reinterpret_cast< TestMessRequiredEnumSmall* >(object);
  (void)_this;
}
void TestMessRequiredEnumSmall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredEnumSmall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredEnumSmall& TestMessRequiredEnumSmall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredEnumSmall_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredEnumSmall::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredEnumSmall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredEnumSmall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .foo.TestEnumSmall test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::TestEnumSmall_IsValid(val))) {
            _internal_set_test(static_cast<::foo::TestEnumSmall>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredEnumSmall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredEnumSmall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .foo.TestEnumSmall test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredEnumSmall)
  return target;
}

size_t TestMessRequiredEnumSmall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredEnumSmall)
  size_t total_size = 0;

  // required .foo.TestEnumSmall test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredEnumSmall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredEnumSmall)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredEnumSmall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredEnumSmall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredEnumSmall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredEnumSmall)
    MergeFrom(*source);
  }
}

void TestMessRequiredEnumSmall::MergeFrom(const TestMessRequiredEnumSmall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredEnumSmall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredEnumSmall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredEnumSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredEnumSmall::CopyFrom(const TestMessRequiredEnumSmall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredEnumSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredEnumSmall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredEnumSmall::InternalSwap(TestMessRequiredEnumSmall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredEnumSmall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredString::InitAsDefaultInstance() {
}
class TestMessRequiredString::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredString>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredString::TestMessRequiredString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredString)
}
TestMessRequiredString::TestMessRequiredString(const TestMessRequiredString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredString)
}

void TestMessRequiredString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestMessRequiredString::~TestMessRequiredString() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredString::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMessRequiredString::ArenaDtor(void* object) {
  TestMessRequiredString* _this = reinterpret_cast< TestMessRequiredString* >(object);
  (void)_this;
}
void TestMessRequiredString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredString& TestMessRequiredString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredString_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredString::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessRequiredString.test");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string test = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessRequiredString.test");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredString)
  return target;
}

size_t TestMessRequiredString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredString)
  size_t total_size = 0;

  // required string test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredString)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredString)
    MergeFrom(*source);
  }
}

void TestMessRequiredString::MergeFrom(const TestMessRequiredString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredString::CopyFrom(const TestMessRequiredString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredString::InternalSwap(TestMessRequiredString* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredBytes::InitAsDefaultInstance() {
}
class TestMessRequiredBytes::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredBytes>()._has_bits_);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessRequiredBytes::TestMessRequiredBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredBytes)
}
TestMessRequiredBytes::TestMessRequiredBytes(const TestMessRequiredBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_test()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredBytes)
}

void TestMessRequiredBytes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto.base);
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestMessRequiredBytes::~TestMessRequiredBytes() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredBytes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMessRequiredBytes::ArenaDtor(void* object) {
  TestMessRequiredBytes* _this = reinterpret_cast< TestMessRequiredBytes* >(object);
  (void)_this;
}
void TestMessRequiredBytes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredBytes& TestMessRequiredBytes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredBytes_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    test_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredBytes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredBytes)
  return target;
}

size_t TestMessRequiredBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredBytes)
  size_t total_size = 0;

  // required bytes test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_test());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredBytes)
    MergeFrom(*source);
  }
}

void TestMessRequiredBytes::MergeFrom(const TestMessRequiredBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_set_test(from._internal_test());
  }
}

void TestMessRequiredBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredBytes::CopyFrom(const TestMessRequiredBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredBytes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessRequiredBytes::InternalSwap(TestMessRequiredBytes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredBytes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessRequiredMessage::InitAsDefaultInstance() {
  ::foo::_TestMessRequiredMessage_default_instance_._instance.get_mutable()->test_ = const_cast< ::foo::SubMess*>(
      ::foo::SubMess::internal_default_instance());
}
class TestMessRequiredMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessRequiredMessage>()._has_bits_);
  static const ::foo::SubMess& test(const TestMessRequiredMessage* msg);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::foo::SubMess&
TestMessRequiredMessage::_Internal::test(const TestMessRequiredMessage* msg) {
  return *msg->test_;
}
TestMessRequiredMessage::TestMessRequiredMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessRequiredMessage)
}
TestMessRequiredMessage::TestMessRequiredMessage(const TestMessRequiredMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::foo::SubMess(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessRequiredMessage)
}

void TestMessRequiredMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto.base);
  test_ = nullptr;
}

TestMessRequiredMessage::~TestMessRequiredMessage() {
  // @@protoc_insertion_point(destructor:foo.TestMessRequiredMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessRequiredMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void TestMessRequiredMessage::ArenaDtor(void* object) {
  TestMessRequiredMessage* _this = reinterpret_cast< TestMessRequiredMessage* >(object);
  (void)_this;
}
void TestMessRequiredMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessRequiredMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessRequiredMessage& TestMessRequiredMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessRequiredMessage_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessRequiredMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessRequiredMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(test_ != nullptr);
    test_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessRequiredMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .foo.SubMess test = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessRequiredMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessRequiredMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .foo.SubMess test = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessRequiredMessage)
  return target;
}

size_t TestMessRequiredMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessRequiredMessage)
  size_t total_size = 0;

  // required .foo.SubMess test = 1;
  if (_internal_has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessRequiredMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessRequiredMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessRequiredMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessRequiredMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessRequiredMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessRequiredMessage)
    MergeFrom(*source);
  }
}

void TestMessRequiredMessage::MergeFrom(const TestMessRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessRequiredMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_test()) {
    _internal_mutable_test()->::foo::SubMess::MergeFrom(from._internal_test());
  }
}

void TestMessRequiredMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessRequiredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessRequiredMessage::CopyFrom(const TestMessRequiredMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessRequiredMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessRequiredMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_test()) {
    if (!test_->IsInitialized()) return false;
  }
  return true;
}

void TestMessRequiredMessage::InternalSwap(TestMessRequiredMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessRequiredMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyMess::InitAsDefaultInstance() {
}
class EmptyMess::_Internal {
 public:
};

EmptyMess::EmptyMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.EmptyMess)
}
EmptyMess::EmptyMess(const EmptyMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:foo.EmptyMess)
}

void EmptyMess::SharedCtor() {
}

EmptyMess::~EmptyMess() {
  // @@protoc_insertion_point(destructor:foo.EmptyMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmptyMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmptyMess::ArenaDtor(void* object) {
  EmptyMess* _this = reinterpret_cast< EmptyMess* >(object);
  (void)_this;
}
void EmptyMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyMess& EmptyMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyMess_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void EmptyMess::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.EmptyMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.EmptyMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.EmptyMess)
  return target;
}

size_t EmptyMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.EmptyMess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.EmptyMess)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.EmptyMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.EmptyMess)
    MergeFrom(*source);
  }
}

void EmptyMess::MergeFrom(const EmptyMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.EmptyMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.EmptyMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMess::CopyFrom(const EmptyMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.EmptyMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMess::IsInitialized() const {
  return true;
}

void EmptyMess::InternalSwap(EmptyMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyMess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultRequiredValues::InitAsDefaultInstance() {
}
class DefaultRequiredValues::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultRequiredValues>()._has_bits_);
  static void set_has_v_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_v_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_double(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_;
DefaultRequiredValues::DefaultRequiredValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.DefaultRequiredValues)
}
DefaultRequiredValues::DefaultRequiredValues(const DefaultRequiredValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_string_.UnsafeSetDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  if (from._internal_has_v_string()) {
    v_string_.Set(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get(), from._internal_v_string(),
      GetArena());
  }
  v_bytes_.UnsafeSetDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
  if (from._internal_has_v_bytes()) {
    v_bytes_.Set(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), from._internal_v_bytes(),
      GetArena());
  }
  ::memcpy(&v_float_, &from.v_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_double_) -
    reinterpret_cast<char*>(&v_float_)) + sizeof(v_double_));
  // @@protoc_insertion_point(copy_constructor:foo.DefaultRequiredValues)
}

void DefaultRequiredValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto.base);
  v_string_.UnsafeSetDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  v_bytes_.UnsafeSetDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
  v_float_ = 2.5f;
  v_int32_ = -42;
  v_uint32_ = 666u;
  v_int64_ = 100000;
  v_uint64_ = 100001u;
  v_double_ = 4.5;
}

DefaultRequiredValues::~DefaultRequiredValues() {
  // @@protoc_insertion_point(destructor:foo.DefaultRequiredValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefaultRequiredValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_string_.DestroyNoArena(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  v_bytes_.DestroyNoArena(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
}

void DefaultRequiredValues::ArenaDtor(void* object) {
  DefaultRequiredValues* _this = reinterpret_cast< DefaultRequiredValues* >(object);
  (void)_this;
}
void DefaultRequiredValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultRequiredValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultRequiredValues& DefaultRequiredValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultRequiredValues_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void DefaultRequiredValues::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.DefaultRequiredValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      v_string_.ClearToDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      v_bytes_.ClearToDefault(&::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), GetArena());
    }
    v_float_ = 2.5f;
    v_int32_ = -42;
    v_uint32_ = 666u;
    v_int64_ = 100000;
    v_uint64_ = 100001u;
    v_double_ = 4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultRequiredValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 v_int32 = 1 [default = -42];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_v_int32(&has_bits);
          v_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 v_uint32 = 2 [default = 666];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_v_uint32(&has_bits);
          v_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 v_int64 = 3 [default = 100000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_v_int64(&has_bits);
          v_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 v_uint64 = 4 [default = 100001];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_v_uint64(&has_bits);
          v_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float v_float = 5 [default = 2.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_float(&has_bits);
          v_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double v_double = 6 [default = 4.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_v_double(&has_bits);
          v_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string v_string = 7 [default = "hi mom\n"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_v_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.DefaultRequiredValues.v_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes v_bytes = 8 [default = "a \000 character"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_v_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultRequiredValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.DefaultRequiredValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 v_int32 = 1 [default = -42];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v_int32(), target);
  }

  // required uint32 v_uint32 = 2 [default = 666];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v_uint32(), target);
  }

  // required int32 v_int64 = 3 [default = 100000];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v_int64(), target);
  }

  // required uint32 v_uint64 = 4 [default = 100001];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v_uint64(), target);
  }

  // required float v_float = 5 [default = 2.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_float(), target);
  }

  // required double v_double = 6 [default = 4.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v_double(), target);
  }

  // required string v_string = 7 [default = "hi mom\n"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v_string().data(), static_cast<int>(this->_internal_v_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.DefaultRequiredValues.v_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_v_string(), target);
  }

  // required bytes v_bytes = 8 [default = "a \000 character"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_v_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.DefaultRequiredValues)
  return target;
}

size_t DefaultRequiredValues::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:foo.DefaultRequiredValues)
  size_t total_size = 0;

  if (_internal_has_v_string()) {
    // required string v_string = 7 [default = "hi mom\n"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v_string());
  }

  if (_internal_has_v_bytes()) {
    // required bytes v_bytes = 8 [default = "a \000 character"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v_bytes());
  }

  if (_internal_has_v_float()) {
    // required float v_float = 5 [default = 2.5];
    total_size += 1 + 4;
  }

  if (_internal_has_v_int32()) {
    // required int32 v_int32 = 1 [default = -42];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_int32());
  }

  if (_internal_has_v_uint32()) {
    // required uint32 v_uint32 = 2 [default = 666];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_uint32());
  }

  if (_internal_has_v_int64()) {
    // required int32 v_int64 = 3 [default = 100000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_int64());
  }

  if (_internal_has_v_uint64()) {
    // required uint32 v_uint64 = 4 [default = 100001];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_uint64());
  }

  if (_internal_has_v_double()) {
    // required double v_double = 6 [default = 4.5];
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DefaultRequiredValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.DefaultRequiredValues)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string v_string = 7 [default = "hi mom\n"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v_string());

    // required bytes v_bytes = 8 [default = "a \000 character"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_v_bytes());

    // required float v_float = 5 [default = 2.5];
    total_size += 1 + 4;

    // required int32 v_int32 = 1 [default = -42];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_int32());

    // required uint32 v_uint32 = 2 [default = 666];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_uint32());

    // required int32 v_int64 = 3 [default = 100000];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v_int64());

    // required uint32 v_uint64 = 4 [default = 100001];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v_uint64());

    // required double v_double = 6 [default = 4.5];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultRequiredValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.DefaultRequiredValues)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultRequiredValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultRequiredValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.DefaultRequiredValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.DefaultRequiredValues)
    MergeFrom(*source);
  }
}

void DefaultRequiredValues::MergeFrom(const DefaultRequiredValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.DefaultRequiredValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_v_string(from._internal_v_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_v_bytes(from._internal_v_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      v_float_ = from.v_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_int32_ = from.v_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_uint32_ = from.v_uint32_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_int64_ = from.v_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_uint64_ = from.v_uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      v_double_ = from.v_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DefaultRequiredValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.DefaultRequiredValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultRequiredValues::CopyFrom(const DefaultRequiredValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.DefaultRequiredValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRequiredValues::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DefaultRequiredValues::InternalSwap(DefaultRequiredValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  v_string_.Swap(&other->v_string_, &::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_string_.get(), GetArena());
  v_bytes_.Swap(&other->v_bytes_, &::foo::DefaultRequiredValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), GetArena());
  swap(v_float_, other->v_float_);
  swap(v_int32_, other->v_int32_);
  swap(v_uint32_, other->v_uint32_);
  swap(v_int64_, other->v_int64_);
  swap(v_uint64_, other->v_uint64_);
  swap(v_double_, other->v_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultRequiredValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultOptionalValues::InitAsDefaultInstance() {
}
class DefaultOptionalValues::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultOptionalValues>()._has_bits_);
  static void set_has_v_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_v_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_v_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_v_double(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_v_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_;
::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_;
DefaultOptionalValues::DefaultOptionalValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.DefaultOptionalValues)
}
DefaultOptionalValues::DefaultOptionalValues(const DefaultOptionalValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  v_string_.UnsafeSetDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  if (from._internal_has_v_string()) {
    v_string_.Set(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get(), from._internal_v_string(),
      GetArena());
  }
  v_bytes_.UnsafeSetDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
  if (from._internal_has_v_bytes()) {
    v_bytes_.Set(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), from._internal_v_bytes(),
      GetArena());
  }
  ::memcpy(&v_float_, &from.v_float_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_double_) -
    reinterpret_cast<char*>(&v_float_)) + sizeof(v_double_));
  // @@protoc_insertion_point(copy_constructor:foo.DefaultOptionalValues)
}

void DefaultOptionalValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto.base);
  v_string_.UnsafeSetDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  v_bytes_.UnsafeSetDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
  v_float_ = 2.5f;
  v_int32_ = -42;
  v_uint32_ = 666u;
  v_int64_ = 100000;
  v_uint64_ = 100001u;
  v_double_ = 4.5;
}

DefaultOptionalValues::~DefaultOptionalValues() {
  // @@protoc_insertion_point(destructor:foo.DefaultOptionalValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefaultOptionalValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  v_string_.DestroyNoArena(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get());
  v_bytes_.DestroyNoArena(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get());
}

void DefaultOptionalValues::ArenaDtor(void* object) {
  DefaultOptionalValues* _this = reinterpret_cast< DefaultOptionalValues* >(object);
  (void)_this;
}
void DefaultOptionalValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultOptionalValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultOptionalValues& DefaultOptionalValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultOptionalValues_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void DefaultOptionalValues::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.DefaultOptionalValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      v_string_.ClearToDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      v_bytes_.ClearToDefault(&::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), GetArena());
    }
    v_float_ = 2.5f;
    v_int32_ = -42;
    v_uint32_ = 666u;
    v_int64_ = 100000;
    v_uint64_ = 100001u;
    v_double_ = 4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultOptionalValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 v_int32 = 1 [default = -42];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_v_int32(&has_bits);
          v_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_uint32 = 2 [default = 666];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_v_uint32(&has_bits);
          v_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 v_int64 = 3 [default = 100000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_v_int64(&has_bits);
          v_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 v_uint64 = 4 [default = 100001];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_v_uint64(&has_bits);
          v_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float v_float = 5 [default = 2.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_v_float(&has_bits);
          v_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double v_double = 6 [default = 4.5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_v_double(&has_bits);
          v_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string v_string = 7 [default = "hi mom\n"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_v_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.DefaultOptionalValues.v_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes v_bytes = 8 [default = "a \000 character"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_v_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultOptionalValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.DefaultOptionalValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 v_int32 = 1 [default = -42];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v_int32(), target);
  }

  // optional uint32 v_uint32 = 2 [default = 666];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v_uint32(), target);
  }

  // optional int32 v_int64 = 3 [default = 100000];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v_int64(), target);
  }

  // optional uint32 v_uint64 = 4 [default = 100001];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v_uint64(), target);
  }

  // optional float v_float = 5 [default = 2.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_v_float(), target);
  }

  // optional double v_double = 6 [default = 4.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v_double(), target);
  }

  // optional string v_string = 7 [default = "hi mom\n"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v_string().data(), static_cast<int>(this->_internal_v_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.DefaultOptionalValues.v_string");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_v_string(), target);
  }

  // optional bytes v_bytes = 8 [default = "a \000 character"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_v_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.DefaultOptionalValues)
  return target;
}

size_t DefaultOptionalValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.DefaultOptionalValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string v_string = 7 [default = "hi mom\n"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v_string());
    }

    // optional bytes v_bytes = 8 [default = "a \000 character"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_v_bytes());
    }

    // optional float v_float = 5 [default = 2.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 v_int32 = 1 [default = -42];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_v_int32());
    }

    // optional uint32 v_uint32 = 2 [default = 666];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_uint32());
    }

    // optional int32 v_int64 = 3 [default = 100000];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_v_int64());
    }

    // optional uint32 v_uint64 = 4 [default = 100001];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_v_uint64());
    }

    // optional double v_double = 6 [default = 4.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultOptionalValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.DefaultOptionalValues)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultOptionalValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultOptionalValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.DefaultOptionalValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.DefaultOptionalValues)
    MergeFrom(*source);
  }
}

void DefaultOptionalValues::MergeFrom(const DefaultOptionalValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.DefaultOptionalValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_v_string(from._internal_v_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_v_bytes(from._internal_v_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      v_float_ = from.v_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      v_int32_ = from.v_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_uint32_ = from.v_uint32_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_int64_ = from.v_int64_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_uint64_ = from.v_uint64_;
    }
    if (cached_has_bits & 0x00000080u) {
      v_double_ = from.v_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DefaultOptionalValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.DefaultOptionalValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultOptionalValues::CopyFrom(const DefaultOptionalValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.DefaultOptionalValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultOptionalValues::IsInitialized() const {
  return true;
}

void DefaultOptionalValues::InternalSwap(DefaultOptionalValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  v_string_.Swap(&other->v_string_, &::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_string_.get(), GetArena());
  v_bytes_.Swap(&other->v_bytes_, &::foo::DefaultOptionalValues::_i_give_permission_to_break_this_code_default_v_bytes_.get(), GetArena());
  swap(v_float_, other->v_float_);
  swap(v_int32_, other->v_int32_);
  swap(v_uint32_, other->v_uint32_);
  swap(v_int64_, other->v_int64_);
  swap(v_uint64_, other->v_uint64_);
  swap(v_double_, other->v_double_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultOptionalValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LowerCase::InitAsDefaultInstance() {
}
class LowerCase::_Internal {
 public:
  using HasBits = decltype(std::declval<LowerCase>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LowerCase::LowerCase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.LowerCase)
}
LowerCase::LowerCase(const LowerCase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:foo.LowerCase)
}

void LowerCase::SharedCtor() {
  value_ = 2;
}

LowerCase::~LowerCase() {
  // @@protoc_insertion_point(destructor:foo.LowerCase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LowerCase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LowerCase::ArenaDtor(void* object) {
  LowerCase* _this = reinterpret_cast< LowerCase* >(object);
  (void)_this;
}
void LowerCase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LowerCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LowerCase& LowerCase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LowerCase_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void LowerCase::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.LowerCase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LowerCase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .foo.LowerCase.CaseEnum value = 1 [default = lower];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::foo::LowerCase_CaseEnum_IsValid(val))) {
            _internal_set_value(static_cast<::foo::LowerCase_CaseEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LowerCase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.LowerCase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .foo.LowerCase.CaseEnum value = 1 [default = lower];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.LowerCase)
  return target;
}

size_t LowerCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.LowerCase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .foo.LowerCase.CaseEnum value = 1 [default = lower];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LowerCase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.LowerCase)
  GOOGLE_DCHECK_NE(&from, this);
  const LowerCase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LowerCase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.LowerCase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.LowerCase)
    MergeFrom(*source);
  }
}

void LowerCase::MergeFrom(const LowerCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.LowerCase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void LowerCase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.LowerCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LowerCase::CopyFrom(const LowerCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.LowerCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LowerCase::IsInitialized() const {
  return true;
}

void LowerCase::InternalSwap(LowerCase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LowerCase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocValues::InitAsDefaultInstance() {
  ::foo::_AllocValues_default_instance_._instance.get_mutable()->a_mess_ = const_cast< ::foo::DefaultRequiredValues*>(
      ::foo::DefaultRequiredValues::internal_default_instance());
}
class AllocValues::_Internal {
 public:
  using HasBits = decltype(std::declval<AllocValues>()._has_bits_);
  static void set_has_o_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::foo::DefaultRequiredValues& a_mess(const AllocValues* msg);
  static void set_has_a_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::foo::DefaultRequiredValues&
AllocValues::_Internal::a_mess(const AllocValues* msg) {
  return *msg->a_mess_;
}
AllocValues::AllocValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  r_string_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.AllocValues)
}
AllocValues::AllocValues(const AllocValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      r_string_(from.r_string_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  o_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_o_bytes()) {
    o_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_o_bytes(),
      GetArena());
  }
  a_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_a_string()) {
    a_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_a_string(),
      GetArena());
  }
  a_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_a_bytes()) {
    a_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_a_bytes(),
      GetArena());
  }
  if (from._internal_has_a_mess()) {
    a_mess_ = new ::foo::DefaultRequiredValues(*from.a_mess_);
  } else {
    a_mess_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:foo.AllocValues)
}

void AllocValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocValues_t_2ftest_2dfull_2eproto.base);
  o_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_mess_ = nullptr;
}

AllocValues::~AllocValues() {
  // @@protoc_insertion_point(destructor:foo.AllocValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllocValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  o_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  a_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete a_mess_;
}

void AllocValues::ArenaDtor(void* object) {
  AllocValues* _this = reinterpret_cast< AllocValues* >(object);
  (void)_this;
}
void AllocValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocValues& AllocValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocValues_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void AllocValues::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.AllocValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_string_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      o_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      a_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      a_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(a_mess_ != nullptr);
      a_mess_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes o_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_o_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string r_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_r_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.AllocValues.r_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required string a_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_a_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.AllocValues.a_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes a_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_a_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .foo.DefaultRequiredValues a_mess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_a_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.AllocValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes o_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_o_bytes(), target);
  }

  // repeated string r_string = 2;
  for (int i = 0, n = this->_internal_r_string_size(); i < n; i++) {
    const auto& s = this->_internal_r_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.AllocValues.r_string");
    target = stream->WriteString(2, s, target);
  }

  // required string a_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_a_string().data(), static_cast<int>(this->_internal_a_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.AllocValues.a_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_a_string(), target);
  }

  // required bytes a_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_a_bytes(), target);
  }

  // required .foo.DefaultRequiredValues a_mess = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::a_mess(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.AllocValues)
  return target;
}

size_t AllocValues::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:foo.AllocValues)
  size_t total_size = 0;

  if (_internal_has_a_string()) {
    // required string a_string = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a_string());
  }

  if (_internal_has_a_bytes()) {
    // required bytes a_bytes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_a_bytes());
  }

  if (_internal_has_a_mess()) {
    // required .foo.DefaultRequiredValues a_mess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_mess_);
  }

  return total_size;
}
size_t AllocValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.AllocValues)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string a_string = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a_string());

    // required bytes a_bytes = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_a_bytes());

    // required .foo.DefaultRequiredValues a_mess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *a_mess_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string r_string = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(r_string_.size());
  for (int i = 0, n = r_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      r_string_.Get(i));
  }

  // optional bytes o_bytes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_o_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.AllocValues)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.AllocValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.AllocValues)
    MergeFrom(*source);
  }
}

void AllocValues::MergeFrom(const AllocValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.AllocValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  r_string_.MergeFrom(from.r_string_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_o_bytes(from._internal_o_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_a_string(from._internal_a_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_a_bytes(from._internal_a_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_a_mess()->::foo::DefaultRequiredValues::MergeFrom(from._internal_a_mess());
    }
  }
}

void AllocValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.AllocValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocValues::CopyFrom(const AllocValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.AllocValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocValues::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_a_mess()) {
    if (!a_mess_->IsInitialized()) return false;
  }
  return true;
}

void AllocValues::InternalSwap(AllocValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  r_string_.InternalSwap(&other->r_string_);
  o_bytes_.Swap(&other->o_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  a_string_.Swap(&other->a_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  a_bytes_.Swap(&other->a_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(a_mess_, other->a_mess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestRequiredFieldsBitmap::InitAsDefaultInstance() {
}
class TestRequiredFieldsBitmap::_Internal {
 public:
  using HasBits = decltype(std::declval<TestRequiredFieldsBitmap>()._has_bits_);
  static void set_has_field1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_field3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_field4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_field5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_field6(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_field7(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_field8(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_field9(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_field10(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_field11(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_field12(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_field13(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_field14(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_field15(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_field16(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_field17(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_field18(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_field19(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_field20(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_field21(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_field22(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_field23(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_field24(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_field25(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_field26(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_field27(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_field28(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_field29(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_field30(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_field31(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_field32(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_field33(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_field34(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_field35(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_field36(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_field37(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_field38(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_field39(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_field40(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_field41(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_field42(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_field43(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_field44(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_field45(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_field46(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_field47(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_field48(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_field49(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_field50(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_field51(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_field52(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_field53(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_field54(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_field55(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_field56(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_field57(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_field58(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_field59(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_field60(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_field61(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_field62(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_field63(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_field64(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_field65(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_field66(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_field67(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_field68(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_field69(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_field70(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_field71(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_field72(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_field73(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_field74(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_field75(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_field76(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_field77(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_field78(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_field79(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_field80(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_field81(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_field82(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_field83(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_field84(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_field85(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_field86(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_field87(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_field88(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_field89(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_field90(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_field91(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_field92(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_field93(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_field94(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_field95(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_field96(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_field97(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_field98(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_field99(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_field100(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_field101(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_field102(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_field103(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_field104(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_field105(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_field106(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_field107(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_field108(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_field109(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_field110(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_field111(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_field112(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_field113(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_field114(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_field115(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_field116(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_field117(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_field118(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_field119(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static void set_has_field120(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_field121(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_field122(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static void set_has_field123(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_field124(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_field125(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_field126(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_field127(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_field128(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static void set_has_field129(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x00000001) ^ 0x00000001)
       | ((has_bits[4] & 0x00000001) ^ 0x00000001)) != 0;
  }
};

TestRequiredFieldsBitmap::TestRequiredFieldsBitmap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestRequiredFieldsBitmap)
}
TestRequiredFieldsBitmap::TestRequiredFieldsBitmap(const TestRequiredFieldsBitmap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field1()) {
    field1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field1(),
      GetArena());
  }
  field2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field2()) {
    field2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field2(),
      GetArena());
  }
  field3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field3()) {
    field3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field3(),
      GetArena());
  }
  field4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field4()) {
    field4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field4(),
      GetArena());
  }
  field5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field5()) {
    field5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field5(),
      GetArena());
  }
  field6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field6()) {
    field6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field6(),
      GetArena());
  }
  field7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field7()) {
    field7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field7(),
      GetArena());
  }
  field8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field8()) {
    field8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field8(),
      GetArena());
  }
  field9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field9()) {
    field9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field9(),
      GetArena());
  }
  field10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field10()) {
    field10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field10(),
      GetArena());
  }
  field11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field11()) {
    field11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field11(),
      GetArena());
  }
  field12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field12()) {
    field12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field12(),
      GetArena());
  }
  field13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field13()) {
    field13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field13(),
      GetArena());
  }
  field14_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field14()) {
    field14_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field14(),
      GetArena());
  }
  field15_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field15()) {
    field15_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field15(),
      GetArena());
  }
  field16_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field16()) {
    field16_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field16(),
      GetArena());
  }
  field17_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field17()) {
    field17_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field17(),
      GetArena());
  }
  field18_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field18()) {
    field18_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field18(),
      GetArena());
  }
  field19_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field19()) {
    field19_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field19(),
      GetArena());
  }
  field20_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field20()) {
    field20_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field20(),
      GetArena());
  }
  field21_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field21()) {
    field21_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field21(),
      GetArena());
  }
  field22_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field22()) {
    field22_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field22(),
      GetArena());
  }
  field23_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field23()) {
    field23_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field23(),
      GetArena());
  }
  field24_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field24()) {
    field24_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field24(),
      GetArena());
  }
  field25_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field25()) {
    field25_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field25(),
      GetArena());
  }
  field26_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field26()) {
    field26_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field26(),
      GetArena());
  }
  field27_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field27()) {
    field27_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field27(),
      GetArena());
  }
  field28_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field28()) {
    field28_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field28(),
      GetArena());
  }
  field29_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field29()) {
    field29_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field29(),
      GetArena());
  }
  field30_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field30()) {
    field30_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field30(),
      GetArena());
  }
  field31_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field31()) {
    field31_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field31(),
      GetArena());
  }
  field32_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field32()) {
    field32_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field32(),
      GetArena());
  }
  field33_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field33()) {
    field33_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field33(),
      GetArena());
  }
  field34_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field34()) {
    field34_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field34(),
      GetArena());
  }
  field35_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field35()) {
    field35_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field35(),
      GetArena());
  }
  field36_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field36()) {
    field36_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field36(),
      GetArena());
  }
  field37_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field37()) {
    field37_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field37(),
      GetArena());
  }
  field38_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field38()) {
    field38_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field38(),
      GetArena());
  }
  field39_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field39()) {
    field39_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field39(),
      GetArena());
  }
  field40_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field40()) {
    field40_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field40(),
      GetArena());
  }
  field41_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field41()) {
    field41_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field41(),
      GetArena());
  }
  field42_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field42()) {
    field42_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field42(),
      GetArena());
  }
  field43_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field43()) {
    field43_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field43(),
      GetArena());
  }
  field44_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field44()) {
    field44_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field44(),
      GetArena());
  }
  field45_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field45()) {
    field45_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field45(),
      GetArena());
  }
  field46_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field46()) {
    field46_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field46(),
      GetArena());
  }
  field47_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field47()) {
    field47_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field47(),
      GetArena());
  }
  field48_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field48()) {
    field48_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field48(),
      GetArena());
  }
  field49_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field49()) {
    field49_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field49(),
      GetArena());
  }
  field50_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field50()) {
    field50_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field50(),
      GetArena());
  }
  field51_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field51()) {
    field51_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field51(),
      GetArena());
  }
  field52_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field52()) {
    field52_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field52(),
      GetArena());
  }
  field53_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field53()) {
    field53_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field53(),
      GetArena());
  }
  field54_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field54()) {
    field54_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field54(),
      GetArena());
  }
  field55_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field55()) {
    field55_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field55(),
      GetArena());
  }
  field56_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field56()) {
    field56_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field56(),
      GetArena());
  }
  field57_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field57()) {
    field57_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field57(),
      GetArena());
  }
  field58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field58()) {
    field58_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field58(),
      GetArena());
  }
  field59_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field59()) {
    field59_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field59(),
      GetArena());
  }
  field60_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field60()) {
    field60_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field60(),
      GetArena());
  }
  field61_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field61()) {
    field61_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field61(),
      GetArena());
  }
  field62_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field62()) {
    field62_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field62(),
      GetArena());
  }
  field63_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field63()) {
    field63_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field63(),
      GetArena());
  }
  field64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field64()) {
    field64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field64(),
      GetArena());
  }
  field65_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field65()) {
    field65_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field65(),
      GetArena());
  }
  field66_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field66()) {
    field66_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field66(),
      GetArena());
  }
  field67_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field67()) {
    field67_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field67(),
      GetArena());
  }
  field68_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field68()) {
    field68_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field68(),
      GetArena());
  }
  field69_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field69()) {
    field69_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field69(),
      GetArena());
  }
  field70_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field70()) {
    field70_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field70(),
      GetArena());
  }
  field71_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field71()) {
    field71_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field71(),
      GetArena());
  }
  field72_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field72()) {
    field72_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field72(),
      GetArena());
  }
  field73_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field73()) {
    field73_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field73(),
      GetArena());
  }
  field74_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field74()) {
    field74_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field74(),
      GetArena());
  }
  field75_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field75()) {
    field75_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field75(),
      GetArena());
  }
  field76_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field76()) {
    field76_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field76(),
      GetArena());
  }
  field77_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field77()) {
    field77_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field77(),
      GetArena());
  }
  field78_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field78()) {
    field78_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field78(),
      GetArena());
  }
  field79_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field79()) {
    field79_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field79(),
      GetArena());
  }
  field80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field80()) {
    field80_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field80(),
      GetArena());
  }
  field81_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field81()) {
    field81_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field81(),
      GetArena());
  }
  field82_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field82()) {
    field82_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field82(),
      GetArena());
  }
  field83_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field83()) {
    field83_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field83(),
      GetArena());
  }
  field84_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field84()) {
    field84_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field84(),
      GetArena());
  }
  field85_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field85()) {
    field85_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field85(),
      GetArena());
  }
  field86_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field86()) {
    field86_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field86(),
      GetArena());
  }
  field87_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field87()) {
    field87_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field87(),
      GetArena());
  }
  field88_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field88()) {
    field88_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field88(),
      GetArena());
  }
  field89_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field89()) {
    field89_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field89(),
      GetArena());
  }
  field90_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field90()) {
    field90_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field90(),
      GetArena());
  }
  field91_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field91()) {
    field91_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field91(),
      GetArena());
  }
  field92_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field92()) {
    field92_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field92(),
      GetArena());
  }
  field93_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field93()) {
    field93_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field93(),
      GetArena());
  }
  field94_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field94()) {
    field94_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field94(),
      GetArena());
  }
  field95_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field95()) {
    field95_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field95(),
      GetArena());
  }
  field96_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field96()) {
    field96_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field96(),
      GetArena());
  }
  field97_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field97()) {
    field97_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field97(),
      GetArena());
  }
  field98_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field98()) {
    field98_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field98(),
      GetArena());
  }
  field99_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field99()) {
    field99_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field99(),
      GetArena());
  }
  field100_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field100()) {
    field100_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field100(),
      GetArena());
  }
  field101_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field101()) {
    field101_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field101(),
      GetArena());
  }
  field102_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field102()) {
    field102_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field102(),
      GetArena());
  }
  field103_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field103()) {
    field103_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field103(),
      GetArena());
  }
  field104_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field104()) {
    field104_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field104(),
      GetArena());
  }
  field105_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field105()) {
    field105_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field105(),
      GetArena());
  }
  field106_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field106()) {
    field106_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field106(),
      GetArena());
  }
  field107_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field107()) {
    field107_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field107(),
      GetArena());
  }
  field108_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field108()) {
    field108_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field108(),
      GetArena());
  }
  field109_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field109()) {
    field109_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field109(),
      GetArena());
  }
  field110_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field110()) {
    field110_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field110(),
      GetArena());
  }
  field111_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field111()) {
    field111_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field111(),
      GetArena());
  }
  field112_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field112()) {
    field112_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field112(),
      GetArena());
  }
  field113_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field113()) {
    field113_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field113(),
      GetArena());
  }
  field114_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field114()) {
    field114_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field114(),
      GetArena());
  }
  field115_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field115()) {
    field115_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field115(),
      GetArena());
  }
  field116_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field116()) {
    field116_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field116(),
      GetArena());
  }
  field117_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field117()) {
    field117_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field117(),
      GetArena());
  }
  field118_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field118()) {
    field118_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field118(),
      GetArena());
  }
  field119_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field119()) {
    field119_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field119(),
      GetArena());
  }
  field120_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field120()) {
    field120_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field120(),
      GetArena());
  }
  field121_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field121()) {
    field121_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field121(),
      GetArena());
  }
  field122_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field122()) {
    field122_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field122(),
      GetArena());
  }
  field123_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field123()) {
    field123_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field123(),
      GetArena());
  }
  field124_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field124()) {
    field124_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field124(),
      GetArena());
  }
  field125_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field125()) {
    field125_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field125(),
      GetArena());
  }
  field126_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field126()) {
    field126_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field126(),
      GetArena());
  }
  field127_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field127()) {
    field127_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field127(),
      GetArena());
  }
  field128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field128()) {
    field128_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field128(),
      GetArena());
  }
  field129_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_field129()) {
    field129_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_field129(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestRequiredFieldsBitmap)
}

void TestRequiredFieldsBitmap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto.base);
  field1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field14_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field15_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field16_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field17_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field18_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field19_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field20_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field21_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field22_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field23_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field24_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field25_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field26_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field27_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field28_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field29_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field30_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field31_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field32_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field33_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field34_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field35_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field36_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field37_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field38_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field39_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field40_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field41_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field42_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field43_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field44_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field45_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field46_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field47_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field48_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field49_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field50_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field51_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field52_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field53_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field54_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field55_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field56_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field57_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field58_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field59_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field60_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field61_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field62_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field63_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field65_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field66_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field67_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field68_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field69_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field70_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field71_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field72_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field73_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field74_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field75_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field76_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field77_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field78_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field79_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field81_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field82_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field83_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field84_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field85_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field86_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field87_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field88_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field89_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field90_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field91_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field92_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field93_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field94_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field95_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field96_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field97_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field98_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field99_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field100_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field101_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field102_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field103_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field104_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field105_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field106_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field107_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field108_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field109_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field110_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field111_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field112_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field113_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field114_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field115_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field116_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field117_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field118_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field119_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field120_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field121_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field122_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field123_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field124_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field125_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field126_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field127_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field129_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestRequiredFieldsBitmap::~TestRequiredFieldsBitmap() {
  // @@protoc_insertion_point(destructor:foo.TestRequiredFieldsBitmap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestRequiredFieldsBitmap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  field1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field13_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field14_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field15_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field16_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field17_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field18_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field19_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field20_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field21_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field22_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field23_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field24_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field25_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field26_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field27_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field28_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field29_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field30_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field31_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field32_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field33_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field34_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field35_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field36_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field37_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field38_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field39_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field40_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field41_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field42_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field43_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field44_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field45_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field46_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field47_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field48_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field49_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field50_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field51_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field52_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field53_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field54_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field55_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field56_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field57_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field58_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field59_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field60_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field61_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field62_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field63_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field65_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field66_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field67_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field68_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field69_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field70_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field71_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field72_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field73_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field74_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field75_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field76_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field77_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field78_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field79_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field80_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field81_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field82_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field83_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field84_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field85_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field86_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field87_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field88_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field89_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field90_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field91_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field92_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field93_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field94_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field95_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field96_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field97_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field98_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field99_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field100_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field101_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field102_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field103_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field104_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field105_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field106_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field107_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field108_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field109_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field110_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field111_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field112_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field113_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field114_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field115_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field116_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field117_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field118_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field119_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field120_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field121_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field122_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field123_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field124_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field125_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field126_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field127_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field128_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field129_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestRequiredFieldsBitmap::ArenaDtor(void* object) {
  TestRequiredFieldsBitmap* _this = reinterpret_cast< TestRequiredFieldsBitmap* >(object);
  (void)_this;
}
void TestRequiredFieldsBitmap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestRequiredFieldsBitmap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestRequiredFieldsBitmap& TestRequiredFieldsBitmap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestRequiredFieldsBitmap_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestRequiredFieldsBitmap::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestRequiredFieldsBitmap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      field2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      field3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      field4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      field5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      field6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      field7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      field8_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      field9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      field10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      field11_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      field12_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      field13_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      field14_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      field15_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      field16_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      field17_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      field18_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      field19_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      field20_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      field21_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      field22_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      field23_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      field24_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      field25_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      field26_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      field27_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      field28_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      field29_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      field30_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      field31_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      field32_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field33_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      field34_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      field35_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      field36_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      field37_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      field38_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      field39_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      field40_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      field41_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      field42_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      field43_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      field44_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      field45_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      field46_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      field47_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      field48_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      field49_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      field50_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      field51_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      field52_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      field53_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      field54_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      field55_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      field56_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      field57_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      field58_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      field59_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      field60_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      field61_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      field62_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      field63_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      field64_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field65_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      field66_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      field67_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      field68_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      field69_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      field70_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      field71_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      field72_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      field73_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      field74_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      field75_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      field76_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      field77_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      field78_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      field79_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      field80_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      field81_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      field82_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      field83_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      field84_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      field85_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      field86_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      field87_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      field88_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      field89_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      field90_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      field91_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      field92_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      field93_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      field94_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      field95_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      field96_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      field97_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      field98_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      field99_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      field100_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      field101_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      field102_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      field103_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      field104_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      field105_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      field106_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      field107_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      field108_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      field109_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      field110_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      field111_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      field112_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      field113_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      field114_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      field115_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      field116_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      field117_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      field118_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      field119_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      field120_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      field121_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      field122_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      field123_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x08000000u) {
      field124_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x10000000u) {
      field125_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x20000000u) {
      field126_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x40000000u) {
      field127_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x80000000u) {
      field128_.ClearNonDefaultToEmpty();
    }
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x00000001u) {
    field129_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestRequiredFieldsBitmap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_field3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_field5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_field6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_field7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_field8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field9 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_field9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field9");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_field10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field10");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field11 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_field11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field11");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field12 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_field12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field12");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field13 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_field13();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field13");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field14 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_field14();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field14");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field15 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_field15();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field15");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field16 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_field16();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field16");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field17 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_field17();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field17");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field18 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_field18();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field18");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field19 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_field19();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field19");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field20 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_field20();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field20");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field21 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_field21();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field21");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field22 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_field22();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field22");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field23 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_field23();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field23");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field24 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_field24();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field24");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field25 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_field25();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field25");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field26 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_field26();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field26");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field27 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_field27();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field27");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field28 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_field28();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field28");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field29 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_field29();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field29");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field30 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_field30();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field30");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field31 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_field31();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field31");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field32 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_field32();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field32");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field33 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field33();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field33");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field34 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field34();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field34");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field35 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_field35();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field35");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field36 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field36();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field36");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field37 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_field37();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field37");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field38 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_field38();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field38");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field39 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_field39();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field39");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field40 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_field40();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field40");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field41 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_field41();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field41");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field42 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_field42();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field42");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field43 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_field43();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field43");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field44 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_field44();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field44");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field45 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_field45();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field45");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field46 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_field46();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field46");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field47 = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_field47();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field47");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field48 = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_field48();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field48");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field49 = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_field49();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field49");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field50 = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_field50();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field50");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field51 = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_field51();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field51");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field52 = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_field52();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field52");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field53 = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_field53();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field53");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field54 = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_field54();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field54");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field55 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_field55();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field55");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field56 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_field56();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field56");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field57 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_field57();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field57");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field58 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_field58();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field58");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field59 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_field59();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field59");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field60 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_field60();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field60");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field61 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_field61();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field61");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field62 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_field62();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field62");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field63 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_field63();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field63");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field64 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_field64();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field64");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field65 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field65();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field65");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field66 = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field66();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field66");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field67 = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_field67();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field67");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field68 = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field68();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field68");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field69 = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_field69();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field69");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field70 = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_field70();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field70");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field71 = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_field71();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field71");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field72 = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_field72();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field72");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field73 = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_field73();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field73");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field74 = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_field74();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field74");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field75 = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_field75();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field75");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field76 = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_field76();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field76");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field77 = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_field77();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field77");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field78 = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_field78();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field78");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field79 = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_field79();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field79");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field80 = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_field80();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field80");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field81 = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_field81();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field81");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field82 = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_field82();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field82");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field83 = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_field83();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field83");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field84 = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_field84();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field84");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field85 = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_field85();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field85");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field86 = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_field86();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field86");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field87 = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_field87();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field87");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field88 = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_field88();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field88");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field89 = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_field89();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field89");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field90 = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_field90();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field90");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field91 = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_field91();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field91");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field92 = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_field92();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field92");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field93 = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_field93();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field93");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field94 = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_field94();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field94");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field95 = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_field95();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field95");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field96 = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_field96();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field96");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field97 = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field97();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field97");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field98 = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field98();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field98");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field99 = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_field99();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field99");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field100 = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_field100();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field100");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field101 = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_field101();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field101");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field102 = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_field102();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field102");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field103 = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_field103();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field103");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field104 = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_field104();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field104");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field105 = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_field105();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field105");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field106 = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_field106();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field106");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field107 = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_field107();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field107");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field108 = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_field108();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field108");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field109 = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_field109();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field109");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field110 = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_field110();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field110");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field111 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_field111();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field111");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field112 = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_field112();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field112");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field113 = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_field113();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field113");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field114 = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_field114();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field114");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field115 = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_field115();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field115");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field116 = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_field116();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field116");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field117 = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_field117();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field117");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field118 = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_field118();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field118");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field119 = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_field119();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field119");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field120 = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_field120();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field120");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field121 = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_field121();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field121");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field122 = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_field122();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field122");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field123 = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_field123();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field123");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field124 = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_field124();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field124");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field125 = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_field125();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field125");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field126 = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_field126();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field126");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field127 = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_field127();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field127");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string field128 = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_field128();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field128");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string field129 = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_field129();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestRequiredFieldsBitmap.field129");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestRequiredFieldsBitmap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestRequiredFieldsBitmap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string field1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field1().data(), static_cast<int>(this->_internal_field1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_field1(), target);
  }

  // optional string field2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field2().data(), static_cast<int>(this->_internal_field2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field2(), target);
  }

  // optional string field3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field3().data(), static_cast<int>(this->_internal_field3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_field3(), target);
  }

  // optional string field4 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field4().data(), static_cast<int>(this->_internal_field4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_field4(), target);
  }

  // optional string field5 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field5().data(), static_cast<int>(this->_internal_field5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field5");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_field5(), target);
  }

  // optional string field6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field6().data(), static_cast<int>(this->_internal_field6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_field6(), target);
  }

  // optional string field7 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field7().data(), static_cast<int>(this->_internal_field7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field7");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_field7(), target);
  }

  // optional string field8 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field8().data(), static_cast<int>(this->_internal_field8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field8");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_field8(), target);
  }

  // optional string field9 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field9().data(), static_cast<int>(this->_internal_field9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field9");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_field9(), target);
  }

  // optional string field10 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field10().data(), static_cast<int>(this->_internal_field10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field10");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_field10(), target);
  }

  // optional string field11 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field11().data(), static_cast<int>(this->_internal_field11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field11");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_field11(), target);
  }

  // optional string field12 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field12().data(), static_cast<int>(this->_internal_field12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field12");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_field12(), target);
  }

  // optional string field13 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field13().data(), static_cast<int>(this->_internal_field13().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field13");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_field13(), target);
  }

  // optional string field14 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field14().data(), static_cast<int>(this->_internal_field14().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field14");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_field14(), target);
  }

  // optional string field15 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field15().data(), static_cast<int>(this->_internal_field15().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field15");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_field15(), target);
  }

  // optional string field16 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field16().data(), static_cast<int>(this->_internal_field16().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field16");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_field16(), target);
  }

  // optional string field17 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field17().data(), static_cast<int>(this->_internal_field17().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field17");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_field17(), target);
  }

  // optional string field18 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field18().data(), static_cast<int>(this->_internal_field18().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field18");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_field18(), target);
  }

  // optional string field19 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field19().data(), static_cast<int>(this->_internal_field19().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field19");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_field19(), target);
  }

  // optional string field20 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field20().data(), static_cast<int>(this->_internal_field20().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field20");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_field20(), target);
  }

  // optional string field21 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field21().data(), static_cast<int>(this->_internal_field21().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field21");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_field21(), target);
  }

  // optional string field22 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field22().data(), static_cast<int>(this->_internal_field22().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field22");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_field22(), target);
  }

  // optional string field23 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field23().data(), static_cast<int>(this->_internal_field23().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field23");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_field23(), target);
  }

  // optional string field24 = 24;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field24().data(), static_cast<int>(this->_internal_field24().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field24");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_field24(), target);
  }

  // optional string field25 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field25().data(), static_cast<int>(this->_internal_field25().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field25");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_field25(), target);
  }

  // optional string field26 = 26;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field26().data(), static_cast<int>(this->_internal_field26().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field26");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_field26(), target);
  }

  // optional string field27 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field27().data(), static_cast<int>(this->_internal_field27().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field27");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_field27(), target);
  }

  // optional string field28 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field28().data(), static_cast<int>(this->_internal_field28().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field28");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_field28(), target);
  }

  // optional string field29 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field29().data(), static_cast<int>(this->_internal_field29().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field29");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_field29(), target);
  }

  // optional string field30 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field30().data(), static_cast<int>(this->_internal_field30().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field30");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_field30(), target);
  }

  // optional string field31 = 31;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field31().data(), static_cast<int>(this->_internal_field31().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field31");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_field31(), target);
  }

  // optional string field32 = 32;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field32().data(), static_cast<int>(this->_internal_field32().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field32");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_field32(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional string field33 = 33;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field33().data(), static_cast<int>(this->_internal_field33().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field33");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_field33(), target);
  }

  // optional string field34 = 34;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field34().data(), static_cast<int>(this->_internal_field34().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field34");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_field34(), target);
  }

  // optional string field35 = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field35().data(), static_cast<int>(this->_internal_field35().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field35");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_field35(), target);
  }

  // optional string field36 = 36;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field36().data(), static_cast<int>(this->_internal_field36().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field36");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_field36(), target);
  }

  // optional string field37 = 37;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field37().data(), static_cast<int>(this->_internal_field37().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field37");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_field37(), target);
  }

  // optional string field38 = 38;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field38().data(), static_cast<int>(this->_internal_field38().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field38");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_field38(), target);
  }

  // optional string field39 = 39;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field39().data(), static_cast<int>(this->_internal_field39().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field39");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_field39(), target);
  }

  // optional string field40 = 40;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field40().data(), static_cast<int>(this->_internal_field40().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field40");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_field40(), target);
  }

  // optional string field41 = 41;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field41().data(), static_cast<int>(this->_internal_field41().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field41");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_field41(), target);
  }

  // optional string field42 = 42;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field42().data(), static_cast<int>(this->_internal_field42().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field42");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_field42(), target);
  }

  // optional string field43 = 43;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field43().data(), static_cast<int>(this->_internal_field43().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field43");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_field43(), target);
  }

  // optional string field44 = 44;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field44().data(), static_cast<int>(this->_internal_field44().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field44");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_field44(), target);
  }

  // optional string field45 = 45;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field45().data(), static_cast<int>(this->_internal_field45().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field45");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_field45(), target);
  }

  // optional string field46 = 46;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field46().data(), static_cast<int>(this->_internal_field46().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field46");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_field46(), target);
  }

  // optional string field47 = 47;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field47().data(), static_cast<int>(this->_internal_field47().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field47");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_field47(), target);
  }

  // optional string field48 = 48;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field48().data(), static_cast<int>(this->_internal_field48().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field48");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_field48(), target);
  }

  // optional string field49 = 49;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field49().data(), static_cast<int>(this->_internal_field49().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field49");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_field49(), target);
  }

  // optional string field50 = 50;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field50().data(), static_cast<int>(this->_internal_field50().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field50");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_field50(), target);
  }

  // optional string field51 = 51;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field51().data(), static_cast<int>(this->_internal_field51().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field51");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_field51(), target);
  }

  // optional string field52 = 52;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field52().data(), static_cast<int>(this->_internal_field52().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field52");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_field52(), target);
  }

  // optional string field53 = 53;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field53().data(), static_cast<int>(this->_internal_field53().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field53");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_field53(), target);
  }

  // optional string field54 = 54;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field54().data(), static_cast<int>(this->_internal_field54().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field54");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_field54(), target);
  }

  // optional string field55 = 55;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field55().data(), static_cast<int>(this->_internal_field55().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field55");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_field55(), target);
  }

  // optional string field56 = 56;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field56().data(), static_cast<int>(this->_internal_field56().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field56");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_field56(), target);
  }

  // optional string field57 = 57;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field57().data(), static_cast<int>(this->_internal_field57().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field57");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_field57(), target);
  }

  // optional string field58 = 58;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field58().data(), static_cast<int>(this->_internal_field58().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field58");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_field58(), target);
  }

  // optional string field59 = 59;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field59().data(), static_cast<int>(this->_internal_field59().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field59");
    target = stream->WriteStringMaybeAliased(
        59, this->_internal_field59(), target);
  }

  // optional string field60 = 60;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field60().data(), static_cast<int>(this->_internal_field60().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field60");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_field60(), target);
  }

  // optional string field61 = 61;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field61().data(), static_cast<int>(this->_internal_field61().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field61");
    target = stream->WriteStringMaybeAliased(
        61, this->_internal_field61(), target);
  }

  // optional string field62 = 62;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field62().data(), static_cast<int>(this->_internal_field62().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field62");
    target = stream->WriteStringMaybeAliased(
        62, this->_internal_field62(), target);
  }

  // optional string field63 = 63;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field63().data(), static_cast<int>(this->_internal_field63().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field63");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_field63(), target);
  }

  // optional string field64 = 64;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field64().data(), static_cast<int>(this->_internal_field64().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field64");
    target = stream->WriteStringMaybeAliased(
        64, this->_internal_field64(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional string field65 = 65;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field65().data(), static_cast<int>(this->_internal_field65().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field65");
    target = stream->WriteStringMaybeAliased(
        65, this->_internal_field65(), target);
  }

  // optional string field66 = 66;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field66().data(), static_cast<int>(this->_internal_field66().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field66");
    target = stream->WriteStringMaybeAliased(
        66, this->_internal_field66(), target);
  }

  // optional string field67 = 67;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field67().data(), static_cast<int>(this->_internal_field67().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field67");
    target = stream->WriteStringMaybeAliased(
        67, this->_internal_field67(), target);
  }

  // optional string field68 = 68;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field68().data(), static_cast<int>(this->_internal_field68().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field68");
    target = stream->WriteStringMaybeAliased(
        68, this->_internal_field68(), target);
  }

  // optional string field69 = 69;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field69().data(), static_cast<int>(this->_internal_field69().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field69");
    target = stream->WriteStringMaybeAliased(
        69, this->_internal_field69(), target);
  }

  // optional string field70 = 70;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field70().data(), static_cast<int>(this->_internal_field70().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field70");
    target = stream->WriteStringMaybeAliased(
        70, this->_internal_field70(), target);
  }

  // optional string field71 = 71;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field71().data(), static_cast<int>(this->_internal_field71().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field71");
    target = stream->WriteStringMaybeAliased(
        71, this->_internal_field71(), target);
  }

  // optional string field72 = 72;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field72().data(), static_cast<int>(this->_internal_field72().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field72");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_field72(), target);
  }

  // optional string field73 = 73;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field73().data(), static_cast<int>(this->_internal_field73().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field73");
    target = stream->WriteStringMaybeAliased(
        73, this->_internal_field73(), target);
  }

  // optional string field74 = 74;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field74().data(), static_cast<int>(this->_internal_field74().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field74");
    target = stream->WriteStringMaybeAliased(
        74, this->_internal_field74(), target);
  }

  // optional string field75 = 75;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field75().data(), static_cast<int>(this->_internal_field75().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field75");
    target = stream->WriteStringMaybeAliased(
        75, this->_internal_field75(), target);
  }

  // optional string field76 = 76;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field76().data(), static_cast<int>(this->_internal_field76().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field76");
    target = stream->WriteStringMaybeAliased(
        76, this->_internal_field76(), target);
  }

  // optional string field77 = 77;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field77().data(), static_cast<int>(this->_internal_field77().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field77");
    target = stream->WriteStringMaybeAliased(
        77, this->_internal_field77(), target);
  }

  // optional string field78 = 78;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field78().data(), static_cast<int>(this->_internal_field78().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field78");
    target = stream->WriteStringMaybeAliased(
        78, this->_internal_field78(), target);
  }

  // optional string field79 = 79;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field79().data(), static_cast<int>(this->_internal_field79().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field79");
    target = stream->WriteStringMaybeAliased(
        79, this->_internal_field79(), target);
  }

  // optional string field80 = 80;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field80().data(), static_cast<int>(this->_internal_field80().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field80");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_field80(), target);
  }

  // optional string field81 = 81;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field81().data(), static_cast<int>(this->_internal_field81().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field81");
    target = stream->WriteStringMaybeAliased(
        81, this->_internal_field81(), target);
  }

  // optional string field82 = 82;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field82().data(), static_cast<int>(this->_internal_field82().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field82");
    target = stream->WriteStringMaybeAliased(
        82, this->_internal_field82(), target);
  }

  // optional string field83 = 83;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field83().data(), static_cast<int>(this->_internal_field83().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field83");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_field83(), target);
  }

  // optional string field84 = 84;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field84().data(), static_cast<int>(this->_internal_field84().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field84");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_field84(), target);
  }

  // optional string field85 = 85;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field85().data(), static_cast<int>(this->_internal_field85().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field85");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_field85(), target);
  }

  // optional string field86 = 86;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field86().data(), static_cast<int>(this->_internal_field86().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field86");
    target = stream->WriteStringMaybeAliased(
        86, this->_internal_field86(), target);
  }

  // optional string field87 = 87;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field87().data(), static_cast<int>(this->_internal_field87().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field87");
    target = stream->WriteStringMaybeAliased(
        87, this->_internal_field87(), target);
  }

  // optional string field88 = 88;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field88().data(), static_cast<int>(this->_internal_field88().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field88");
    target = stream->WriteStringMaybeAliased(
        88, this->_internal_field88(), target);
  }

  // optional string field89 = 89;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field89().data(), static_cast<int>(this->_internal_field89().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field89");
    target = stream->WriteStringMaybeAliased(
        89, this->_internal_field89(), target);
  }

  // optional string field90 = 90;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field90().data(), static_cast<int>(this->_internal_field90().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field90");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_field90(), target);
  }

  // optional string field91 = 91;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field91().data(), static_cast<int>(this->_internal_field91().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field91");
    target = stream->WriteStringMaybeAliased(
        91, this->_internal_field91(), target);
  }

  // optional string field92 = 92;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field92().data(), static_cast<int>(this->_internal_field92().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field92");
    target = stream->WriteStringMaybeAliased(
        92, this->_internal_field92(), target);
  }

  // optional string field93 = 93;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field93().data(), static_cast<int>(this->_internal_field93().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field93");
    target = stream->WriteStringMaybeAliased(
        93, this->_internal_field93(), target);
  }

  // optional string field94 = 94;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field94().data(), static_cast<int>(this->_internal_field94().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field94");
    target = stream->WriteStringMaybeAliased(
        94, this->_internal_field94(), target);
  }

  // optional string field95 = 95;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field95().data(), static_cast<int>(this->_internal_field95().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field95");
    target = stream->WriteStringMaybeAliased(
        95, this->_internal_field95(), target);
  }

  // optional string field96 = 96;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field96().data(), static_cast<int>(this->_internal_field96().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field96");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_field96(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional string field97 = 97;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field97().data(), static_cast<int>(this->_internal_field97().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field97");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_field97(), target);
  }

  // optional string field98 = 98;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field98().data(), static_cast<int>(this->_internal_field98().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field98");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_field98(), target);
  }

  // optional string field99 = 99;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field99().data(), static_cast<int>(this->_internal_field99().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field99");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_field99(), target);
  }

  // optional string field100 = 100;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field100().data(), static_cast<int>(this->_internal_field100().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field100");
    target = stream->WriteStringMaybeAliased(
        100, this->_internal_field100(), target);
  }

  // optional string field101 = 101;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field101().data(), static_cast<int>(this->_internal_field101().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field101");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_field101(), target);
  }

  // optional string field102 = 102;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field102().data(), static_cast<int>(this->_internal_field102().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field102");
    target = stream->WriteStringMaybeAliased(
        102, this->_internal_field102(), target);
  }

  // optional string field103 = 103;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field103().data(), static_cast<int>(this->_internal_field103().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field103");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_field103(), target);
  }

  // optional string field104 = 104;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field104().data(), static_cast<int>(this->_internal_field104().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field104");
    target = stream->WriteStringMaybeAliased(
        104, this->_internal_field104(), target);
  }

  // optional string field105 = 105;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field105().data(), static_cast<int>(this->_internal_field105().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field105");
    target = stream->WriteStringMaybeAliased(
        105, this->_internal_field105(), target);
  }

  // optional string field106 = 106;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field106().data(), static_cast<int>(this->_internal_field106().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field106");
    target = stream->WriteStringMaybeAliased(
        106, this->_internal_field106(), target);
  }

  // optional string field107 = 107;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field107().data(), static_cast<int>(this->_internal_field107().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field107");
    target = stream->WriteStringMaybeAliased(
        107, this->_internal_field107(), target);
  }

  // optional string field108 = 108;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field108().data(), static_cast<int>(this->_internal_field108().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field108");
    target = stream->WriteStringMaybeAliased(
        108, this->_internal_field108(), target);
  }

  // optional string field109 = 109;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field109().data(), static_cast<int>(this->_internal_field109().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field109");
    target = stream->WriteStringMaybeAliased(
        109, this->_internal_field109(), target);
  }

  // optional string field110 = 110;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field110().data(), static_cast<int>(this->_internal_field110().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field110");
    target = stream->WriteStringMaybeAliased(
        110, this->_internal_field110(), target);
  }

  // optional string field111 = 111;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field111().data(), static_cast<int>(this->_internal_field111().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field111");
    target = stream->WriteStringMaybeAliased(
        111, this->_internal_field111(), target);
  }

  // optional string field112 = 112;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field112().data(), static_cast<int>(this->_internal_field112().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field112");
    target = stream->WriteStringMaybeAliased(
        112, this->_internal_field112(), target);
  }

  // optional string field113 = 113;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field113().data(), static_cast<int>(this->_internal_field113().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field113");
    target = stream->WriteStringMaybeAliased(
        113, this->_internal_field113(), target);
  }

  // optional string field114 = 114;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field114().data(), static_cast<int>(this->_internal_field114().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field114");
    target = stream->WriteStringMaybeAliased(
        114, this->_internal_field114(), target);
  }

  // optional string field115 = 115;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field115().data(), static_cast<int>(this->_internal_field115().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field115");
    target = stream->WriteStringMaybeAliased(
        115, this->_internal_field115(), target);
  }

  // optional string field116 = 116;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field116().data(), static_cast<int>(this->_internal_field116().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field116");
    target = stream->WriteStringMaybeAliased(
        116, this->_internal_field116(), target);
  }

  // optional string field117 = 117;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field117().data(), static_cast<int>(this->_internal_field117().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field117");
    target = stream->WriteStringMaybeAliased(
        117, this->_internal_field117(), target);
  }

  // optional string field118 = 118;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field118().data(), static_cast<int>(this->_internal_field118().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field118");
    target = stream->WriteStringMaybeAliased(
        118, this->_internal_field118(), target);
  }

  // optional string field119 = 119;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field119().data(), static_cast<int>(this->_internal_field119().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field119");
    target = stream->WriteStringMaybeAliased(
        119, this->_internal_field119(), target);
  }

  // optional string field120 = 120;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field120().data(), static_cast<int>(this->_internal_field120().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field120");
    target = stream->WriteStringMaybeAliased(
        120, this->_internal_field120(), target);
  }

  // optional string field121 = 121;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field121().data(), static_cast<int>(this->_internal_field121().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field121");
    target = stream->WriteStringMaybeAliased(
        121, this->_internal_field121(), target);
  }

  // optional string field122 = 122;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field122().data(), static_cast<int>(this->_internal_field122().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field122");
    target = stream->WriteStringMaybeAliased(
        122, this->_internal_field122(), target);
  }

  // optional string field123 = 123;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field123().data(), static_cast<int>(this->_internal_field123().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field123");
    target = stream->WriteStringMaybeAliased(
        123, this->_internal_field123(), target);
  }

  // optional string field124 = 124;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field124().data(), static_cast<int>(this->_internal_field124().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field124");
    target = stream->WriteStringMaybeAliased(
        124, this->_internal_field124(), target);
  }

  // optional string field125 = 125;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field125().data(), static_cast<int>(this->_internal_field125().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field125");
    target = stream->WriteStringMaybeAliased(
        125, this->_internal_field125(), target);
  }

  // optional string field126 = 126;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field126().data(), static_cast<int>(this->_internal_field126().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field126");
    target = stream->WriteStringMaybeAliased(
        126, this->_internal_field126(), target);
  }

  // optional string field127 = 127;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field127().data(), static_cast<int>(this->_internal_field127().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field127");
    target = stream->WriteStringMaybeAliased(
        127, this->_internal_field127(), target);
  }

  // optional string field128 = 128;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field128().data(), static_cast<int>(this->_internal_field128().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field128");
    target = stream->WriteStringMaybeAliased(
        128, this->_internal_field128(), target);
  }

  cached_has_bits = _has_bits_[4];
  // required string field129 = 129;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_field129().data(), static_cast<int>(this->_internal_field129().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestRequiredFieldsBitmap.field129");
    target = stream->WriteStringMaybeAliased(
        129, this->_internal_field129(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestRequiredFieldsBitmap)
  return target;
}

size_t TestRequiredFieldsBitmap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:foo.TestRequiredFieldsBitmap)
  size_t total_size = 0;

  if (_internal_has_field1()) {
    // required string field1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field1());
  }

  if (_internal_has_field129()) {
    // required string field129 = 129;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field129());
  }

  return total_size;
}
size_t TestRequiredFieldsBitmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestRequiredFieldsBitmap)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x00000001) ^ 0x00000001)
       | ((_has_bits_[4] & 0x00000001) ^ 0x00000001)) == 0) {  // All required fields are present.
    // required string field1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field1());

    // required string field129 = 129;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field129());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string field2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field2());
    }

    // optional string field3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field3());
    }

    // optional string field4 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field4());
    }

    // optional string field5 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field5());
    }

    // optional string field6 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field6());
    }

    // optional string field7 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field7());
    }

    // optional string field8 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field8());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string field9 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field9());
    }

    // optional string field10 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field10());
    }

    // optional string field11 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field11());
    }

    // optional string field12 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field12());
    }

    // optional string field13 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field13());
    }

    // optional string field14 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field14());
    }

    // optional string field15 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field15());
    }

    // optional string field16 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field16());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string field17 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field17());
    }

    // optional string field18 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field18());
    }

    // optional string field19 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field19());
    }

    // optional string field20 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field20());
    }

    // optional string field21 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field21());
    }

    // optional string field22 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field22());
    }

    // optional string field23 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field23());
    }

    // optional string field24 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field24());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string field25 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field25());
    }

    // optional string field26 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field26());
    }

    // optional string field27 = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field27());
    }

    // optional string field28 = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field28());
    }

    // optional string field29 = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field29());
    }

    // optional string field30 = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field30());
    }

    // optional string field31 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field31());
    }

    // optional string field32 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field32());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional string field33 = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field33());
    }

    // optional string field34 = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field34());
    }

    // optional string field35 = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field35());
    }

    // optional string field36 = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field36());
    }

    // optional string field37 = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field37());
    }

    // optional string field38 = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field38());
    }

    // optional string field39 = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field39());
    }

    // optional string field40 = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field40());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string field41 = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field41());
    }

    // optional string field42 = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field42());
    }

    // optional string field43 = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field43());
    }

    // optional string field44 = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field44());
    }

    // optional string field45 = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field45());
    }

    // optional string field46 = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field46());
    }

    // optional string field47 = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field47());
    }

    // optional string field48 = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field48());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string field49 = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field49());
    }

    // optional string field50 = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field50());
    }

    // optional string field51 = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field51());
    }

    // optional string field52 = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field52());
    }

    // optional string field53 = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field53());
    }

    // optional string field54 = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field54());
    }

    // optional string field55 = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field55());
    }

    // optional string field56 = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field56());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string field57 = 57;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field57());
    }

    // optional string field58 = 58;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field58());
    }

    // optional string field59 = 59;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field59());
    }

    // optional string field60 = 60;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field60());
    }

    // optional string field61 = 61;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field61());
    }

    // optional string field62 = 62;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field62());
    }

    // optional string field63 = 63;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field63());
    }

    // optional string field64 = 64;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field64());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional string field65 = 65;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field65());
    }

    // optional string field66 = 66;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field66());
    }

    // optional string field67 = 67;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field67());
    }

    // optional string field68 = 68;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field68());
    }

    // optional string field69 = 69;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field69());
    }

    // optional string field70 = 70;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field70());
    }

    // optional string field71 = 71;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field71());
    }

    // optional string field72 = 72;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field72());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string field73 = 73;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field73());
    }

    // optional string field74 = 74;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field74());
    }

    // optional string field75 = 75;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field75());
    }

    // optional string field76 = 76;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field76());
    }

    // optional string field77 = 77;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field77());
    }

    // optional string field78 = 78;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field78());
    }

    // optional string field79 = 79;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field79());
    }

    // optional string field80 = 80;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field80());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string field81 = 81;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field81());
    }

    // optional string field82 = 82;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field82());
    }

    // optional string field83 = 83;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field83());
    }

    // optional string field84 = 84;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field84());
    }

    // optional string field85 = 85;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field85());
    }

    // optional string field86 = 86;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field86());
    }

    // optional string field87 = 87;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field87());
    }

    // optional string field88 = 88;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field88());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string field89 = 89;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field89());
    }

    // optional string field90 = 90;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field90());
    }

    // optional string field91 = 91;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field91());
    }

    // optional string field92 = 92;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field92());
    }

    // optional string field93 = 93;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field93());
    }

    // optional string field94 = 94;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field94());
    }

    // optional string field95 = 95;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field95());
    }

    // optional string field96 = 96;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field96());
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional string field97 = 97;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field97());
    }

    // optional string field98 = 98;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field98());
    }

    // optional string field99 = 99;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field99());
    }

    // optional string field100 = 100;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field100());
    }

    // optional string field101 = 101;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field101());
    }

    // optional string field102 = 102;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field102());
    }

    // optional string field103 = 103;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field103());
    }

    // optional string field104 = 104;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field104());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string field105 = 105;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field105());
    }

    // optional string field106 = 106;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field106());
    }

    // optional string field107 = 107;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field107());
    }

    // optional string field108 = 108;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field108());
    }

    // optional string field109 = 109;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field109());
    }

    // optional string field110 = 110;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field110());
    }

    // optional string field111 = 111;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field111());
    }

    // optional string field112 = 112;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field112());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string field113 = 113;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field113());
    }

    // optional string field114 = 114;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field114());
    }

    // optional string field115 = 115;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field115());
    }

    // optional string field116 = 116;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field116());
    }

    // optional string field117 = 117;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field117());
    }

    // optional string field118 = 118;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field118());
    }

    // optional string field119 = 119;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field119());
    }

    // optional string field120 = 120;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field120());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional string field121 = 121;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field121());
    }

    // optional string field122 = 122;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field122());
    }

    // optional string field123 = 123;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field123());
    }

    // optional string field124 = 124;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field124());
    }

    // optional string field125 = 125;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field125());
    }

    // optional string field126 = 126;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field126());
    }

    // optional string field127 = 127;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field127());
    }

    // optional string field128 = 128;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_field128());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestRequiredFieldsBitmap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestRequiredFieldsBitmap)
  GOOGLE_DCHECK_NE(&from, this);
  const TestRequiredFieldsBitmap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestRequiredFieldsBitmap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestRequiredFieldsBitmap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestRequiredFieldsBitmap)
    MergeFrom(*source);
  }
}

void TestRequiredFieldsBitmap::MergeFrom(const TestRequiredFieldsBitmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestRequiredFieldsBitmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field1(from._internal_field1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_field2(from._internal_field2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_field3(from._internal_field3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_field4(from._internal_field4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_field5(from._internal_field5());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_field6(from._internal_field6());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_field7(from._internal_field7());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_field8(from._internal_field8());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_field9(from._internal_field9());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_field10(from._internal_field10());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_field11(from._internal_field11());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_field12(from._internal_field12());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_field13(from._internal_field13());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_field14(from._internal_field14());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_field15(from._internal_field15());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_field16(from._internal_field16());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_field17(from._internal_field17());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_field18(from._internal_field18());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_field19(from._internal_field19());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_field20(from._internal_field20());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_field21(from._internal_field21());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_field22(from._internal_field22());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_field23(from._internal_field23());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_field24(from._internal_field24());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_field25(from._internal_field25());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_field26(from._internal_field26());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_field27(from._internal_field27());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_field28(from._internal_field28());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_field29(from._internal_field29());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_field30(from._internal_field30());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_field31(from._internal_field31());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_field32(from._internal_field32());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field33(from._internal_field33());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_field34(from._internal_field34());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_field35(from._internal_field35());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_field36(from._internal_field36());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_field37(from._internal_field37());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_field38(from._internal_field38());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_field39(from._internal_field39());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_field40(from._internal_field40());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_field41(from._internal_field41());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_field42(from._internal_field42());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_field43(from._internal_field43());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_field44(from._internal_field44());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_field45(from._internal_field45());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_field46(from._internal_field46());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_field47(from._internal_field47());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_field48(from._internal_field48());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_field49(from._internal_field49());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_field50(from._internal_field50());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_field51(from._internal_field51());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_field52(from._internal_field52());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_field53(from._internal_field53());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_field54(from._internal_field54());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_field55(from._internal_field55());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_field56(from._internal_field56());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_field57(from._internal_field57());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_field58(from._internal_field58());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_field59(from._internal_field59());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_field60(from._internal_field60());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_field61(from._internal_field61());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_field62(from._internal_field62());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_field63(from._internal_field63());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_field64(from._internal_field64());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field65(from._internal_field65());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_field66(from._internal_field66());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_field67(from._internal_field67());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_field68(from._internal_field68());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_field69(from._internal_field69());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_field70(from._internal_field70());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_field71(from._internal_field71());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_field72(from._internal_field72());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_field73(from._internal_field73());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_field74(from._internal_field74());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_field75(from._internal_field75());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_field76(from._internal_field76());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_field77(from._internal_field77());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_field78(from._internal_field78());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_field79(from._internal_field79());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_field80(from._internal_field80());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_field81(from._internal_field81());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_field82(from._internal_field82());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_field83(from._internal_field83());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_field84(from._internal_field84());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_field85(from._internal_field85());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_field86(from._internal_field86());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_field87(from._internal_field87());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_field88(from._internal_field88());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_field89(from._internal_field89());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_field90(from._internal_field90());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_field91(from._internal_field91());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_field92(from._internal_field92());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_field93(from._internal_field93());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_field94(from._internal_field94());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_field95(from._internal_field95());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_field96(from._internal_field96());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_field97(from._internal_field97());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_field98(from._internal_field98());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_field99(from._internal_field99());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_field100(from._internal_field100());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_field101(from._internal_field101());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_field102(from._internal_field102());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_field103(from._internal_field103());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_field104(from._internal_field104());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_field105(from._internal_field105());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_field106(from._internal_field106());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_field107(from._internal_field107());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_field108(from._internal_field108());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_field109(from._internal_field109());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_field110(from._internal_field110());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_field111(from._internal_field111());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_field112(from._internal_field112());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_field113(from._internal_field113());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_field114(from._internal_field114());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_field115(from._internal_field115());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_field116(from._internal_field116());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_field117(from._internal_field117());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_field118(from._internal_field118());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_field119(from._internal_field119());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_field120(from._internal_field120());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_field121(from._internal_field121());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_field122(from._internal_field122());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_field123(from._internal_field123());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_set_field124(from._internal_field124());
    }
    if (cached_has_bits & 0x10000000u) {
      _internal_set_field125(from._internal_field125());
    }
    if (cached_has_bits & 0x20000000u) {
      _internal_set_field126(from._internal_field126());
    }
    if (cached_has_bits & 0x40000000u) {
      _internal_set_field127(from._internal_field127());
    }
    if (cached_has_bits & 0x80000000u) {
      _internal_set_field128(from._internal_field128());
    }
  }
  if (from._internal_has_field129()) {
    _internal_set_field129(from._internal_field129());
  }
}

void TestRequiredFieldsBitmap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestRequiredFieldsBitmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequiredFieldsBitmap::CopyFrom(const TestRequiredFieldsBitmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestRequiredFieldsBitmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequiredFieldsBitmap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestRequiredFieldsBitmap::InternalSwap(TestRequiredFieldsBitmap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  field1_.Swap(&other->field1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field2_.Swap(&other->field2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field3_.Swap(&other->field3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field4_.Swap(&other->field4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field5_.Swap(&other->field5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field6_.Swap(&other->field6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field7_.Swap(&other->field7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field8_.Swap(&other->field8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field9_.Swap(&other->field9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field10_.Swap(&other->field10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field11_.Swap(&other->field11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field12_.Swap(&other->field12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field13_.Swap(&other->field13_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field14_.Swap(&other->field14_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field15_.Swap(&other->field15_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field16_.Swap(&other->field16_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field17_.Swap(&other->field17_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field18_.Swap(&other->field18_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field19_.Swap(&other->field19_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field20_.Swap(&other->field20_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field21_.Swap(&other->field21_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field22_.Swap(&other->field22_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field23_.Swap(&other->field23_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field24_.Swap(&other->field24_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field25_.Swap(&other->field25_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field26_.Swap(&other->field26_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field27_.Swap(&other->field27_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field28_.Swap(&other->field28_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field29_.Swap(&other->field29_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field30_.Swap(&other->field30_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field31_.Swap(&other->field31_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field32_.Swap(&other->field32_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field33_.Swap(&other->field33_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field34_.Swap(&other->field34_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field35_.Swap(&other->field35_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field36_.Swap(&other->field36_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field37_.Swap(&other->field37_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field38_.Swap(&other->field38_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field39_.Swap(&other->field39_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field40_.Swap(&other->field40_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field41_.Swap(&other->field41_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field42_.Swap(&other->field42_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field43_.Swap(&other->field43_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field44_.Swap(&other->field44_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field45_.Swap(&other->field45_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field46_.Swap(&other->field46_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field47_.Swap(&other->field47_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field48_.Swap(&other->field48_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field49_.Swap(&other->field49_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field50_.Swap(&other->field50_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field51_.Swap(&other->field51_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field52_.Swap(&other->field52_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field53_.Swap(&other->field53_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field54_.Swap(&other->field54_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field55_.Swap(&other->field55_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field56_.Swap(&other->field56_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field57_.Swap(&other->field57_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field58_.Swap(&other->field58_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field59_.Swap(&other->field59_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field60_.Swap(&other->field60_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field61_.Swap(&other->field61_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field62_.Swap(&other->field62_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field63_.Swap(&other->field63_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field64_.Swap(&other->field64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field65_.Swap(&other->field65_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field66_.Swap(&other->field66_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field67_.Swap(&other->field67_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field68_.Swap(&other->field68_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field69_.Swap(&other->field69_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field70_.Swap(&other->field70_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field71_.Swap(&other->field71_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field72_.Swap(&other->field72_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field73_.Swap(&other->field73_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field74_.Swap(&other->field74_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field75_.Swap(&other->field75_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field76_.Swap(&other->field76_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field77_.Swap(&other->field77_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field78_.Swap(&other->field78_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field79_.Swap(&other->field79_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field80_.Swap(&other->field80_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field81_.Swap(&other->field81_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field82_.Swap(&other->field82_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field83_.Swap(&other->field83_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field84_.Swap(&other->field84_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field85_.Swap(&other->field85_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field86_.Swap(&other->field86_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field87_.Swap(&other->field87_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field88_.Swap(&other->field88_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field89_.Swap(&other->field89_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field90_.Swap(&other->field90_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field91_.Swap(&other->field91_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field92_.Swap(&other->field92_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field93_.Swap(&other->field93_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field94_.Swap(&other->field94_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field95_.Swap(&other->field95_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field96_.Swap(&other->field96_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field97_.Swap(&other->field97_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field98_.Swap(&other->field98_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field99_.Swap(&other->field99_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field100_.Swap(&other->field100_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field101_.Swap(&other->field101_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field102_.Swap(&other->field102_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field103_.Swap(&other->field103_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field104_.Swap(&other->field104_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field105_.Swap(&other->field105_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field106_.Swap(&other->field106_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field107_.Swap(&other->field107_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field108_.Swap(&other->field108_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field109_.Swap(&other->field109_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field110_.Swap(&other->field110_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field111_.Swap(&other->field111_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field112_.Swap(&other->field112_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field113_.Swap(&other->field113_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field114_.Swap(&other->field114_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field115_.Swap(&other->field115_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field116_.Swap(&other->field116_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field117_.Swap(&other->field117_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field118_.Swap(&other->field118_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field119_.Swap(&other->field119_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field120_.Swap(&other->field120_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field121_.Swap(&other->field121_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field122_.Swap(&other->field122_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field123_.Swap(&other->field123_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field124_.Swap(&other->field124_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field125_.Swap(&other->field125_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field126_.Swap(&other->field126_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field127_.Swap(&other->field127_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field128_.Swap(&other->field128_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  field129_.Swap(&other->field129_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestRequiredFieldsBitmap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFieldFlags::InitAsDefaultInstance() {
}
class TestFieldFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<TestFieldFlags>()._has_bits_);
  static void set_has_no_flags1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_no_flags2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

TestFieldFlags::TestFieldFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  no_flags3_(arena),
  packed_(arena),
  packed_deprecated_(arena),
  deprecated_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestFieldFlags)
}
TestFieldFlags::TestFieldFlags(const TestFieldFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      no_flags3_(from.no_flags3_),
      packed_(from.packed_),
      packed_deprecated_(from.packed_deprecated_),
      deprecated_(from.deprecated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&no_flags1_, &from.no_flags1_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_flags2_) -
    reinterpret_cast<char*>(&no_flags1_)) + sizeof(no_flags2_));
  // @@protoc_insertion_point(copy_constructor:foo.TestFieldFlags)
}

void TestFieldFlags::SharedCtor() {
  ::memset(&no_flags1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_flags2_) -
      reinterpret_cast<char*>(&no_flags1_)) + sizeof(no_flags2_));
}

TestFieldFlags::~TestFieldFlags() {
  // @@protoc_insertion_point(destructor:foo.TestFieldFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestFieldFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestFieldFlags::ArenaDtor(void* object) {
  TestFieldFlags* _this = reinterpret_cast< TestFieldFlags* >(object);
  (void)_this;
}
void TestFieldFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestFieldFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFieldFlags& TestFieldFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFieldFlags_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestFieldFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestFieldFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  no_flags3_.Clear();
  packed_.Clear();
  packed_deprecated_.Clear();
  deprecated_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&no_flags1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&no_flags2_) -
        reinterpret_cast<char*>(&no_flags1_)) + sizeof(no_flags2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestFieldFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 no_flags1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_no_flags1(&has_bits);
          no_flags1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 no_flags2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_no_flags2(&has_bits);
          no_flags2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 no_flags3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_no_flags3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_no_flags3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 packed = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_packed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 packed_deprecated = 5 [packed = true, deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_deprecated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_packed_deprecated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 deprecated = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deprecated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deprecated(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFieldFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestFieldFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_flags1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_no_flags1(), target);
  }

  // required int32 no_flags2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_no_flags2(), target);
  }

  // repeated int32 no_flags3 = 3;
  for (int i = 0, n = this->_internal_no_flags3_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_no_flags3(i), target);
  }

  // repeated int32 packed = 4 [packed = true];
  {
    int byte_size = _packed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_packed(), byte_size, target);
    }
  }

  // repeated int32 packed_deprecated = 5 [packed = true, deprecated = true];
  {
    int byte_size = _packed_deprecated_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_packed_deprecated(), byte_size, target);
    }
  }

  // repeated int32 deprecated = 6 [deprecated = true];
  for (int i = 0, n = this->_internal_deprecated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_deprecated(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestFieldFlags)
  return target;
}

size_t TestFieldFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestFieldFlags)
  size_t total_size = 0;

  // required int32 no_flags2 = 2;
  if (_internal_has_no_flags2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_flags2());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 no_flags3 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->no_flags3_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_no_flags3_size());
    total_size += data_size;
  }

  // repeated int32 packed = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 packed_deprecated = 5 [packed = true, deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->packed_deprecated_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _packed_deprecated_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 deprecated = 6 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->deprecated_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_deprecated_size());
    total_size += data_size;
  }

  // optional int32 no_flags1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_no_flags1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFieldFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestFieldFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFieldFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFieldFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestFieldFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestFieldFlags)
    MergeFrom(*source);
  }
}

void TestFieldFlags::MergeFrom(const TestFieldFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestFieldFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  no_flags3_.MergeFrom(from.no_flags3_);
  packed_.MergeFrom(from.packed_);
  packed_deprecated_.MergeFrom(from.packed_deprecated_);
  deprecated_.MergeFrom(from.deprecated_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      no_flags1_ = from.no_flags1_;
    }
    if (cached_has_bits & 0x00000002u) {
      no_flags2_ = from.no_flags2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TestFieldFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestFieldFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFieldFlags::CopyFrom(const TestFieldFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestFieldFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFieldFlags::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestFieldFlags::InternalSwap(TestFieldFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  no_flags3_.InternalSwap(&other->no_flags3_);
  packed_.InternalSwap(&other->packed_);
  packed_deprecated_.InternalSwap(&other->packed_deprecated_);
  deprecated_.InternalSwap(&other->deprecated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestFieldFlags, no_flags2_)
      + sizeof(TestFieldFlags::no_flags2_)
      - PROTOBUF_FIELD_OFFSET(TestFieldFlags, no_flags1_)>(
          reinterpret_cast<char*>(&no_flags1_),
          reinterpret_cast<char*>(&other->no_flags1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFieldFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessageCheck_SubMessage::InitAsDefaultInstance() {
}
class TestMessageCheck_SubMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageCheck_SubMessage>()._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TestMessageCheck_SubMessage::TestMessageCheck_SubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessageCheck.SubMessage)
}
TestMessageCheck_SubMessage::TestMessageCheck_SubMessage(const TestMessageCheck_SubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str()) {
    str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_str(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessageCheck.SubMessage)
}

void TestMessageCheck_SubMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto.base);
  str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestMessageCheck_SubMessage::~TestMessageCheck_SubMessage() {
  // @@protoc_insertion_point(destructor:foo.TestMessageCheck.SubMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessageCheck_SubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMessageCheck_SubMessage::ArenaDtor(void* object) {
  TestMessageCheck_SubMessage* _this = reinterpret_cast< TestMessageCheck_SubMessage* >(object);
  (void)_this;
}
void TestMessageCheck_SubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessageCheck_SubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessageCheck_SubMessage& TestMessageCheck_SubMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessageCheck_SubMessage_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessageCheck_SubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessageCheck.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    str_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageCheck_SubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessageCheck.SubMessage.str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessageCheck_SubMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessageCheck.SubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string str = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessageCheck.SubMessage.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessageCheck.SubMessage)
  return target;
}

size_t TestMessageCheck_SubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessageCheck.SubMessage)
  size_t total_size = 0;

  // required string str = 1;
  if (_internal_has_str()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageCheck_SubMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessageCheck.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessageCheck_SubMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessageCheck_SubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessageCheck.SubMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessageCheck.SubMessage)
    MergeFrom(*source);
  }
}

void TestMessageCheck_SubMessage::MergeFrom(const TestMessageCheck_SubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessageCheck.SubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _internal_set_str(from._internal_str());
  }
}

void TestMessageCheck_SubMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessageCheck.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessageCheck_SubMessage::CopyFrom(const TestMessageCheck_SubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessageCheck.SubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageCheck_SubMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TestMessageCheck_SubMessage::InternalSwap(TestMessageCheck_SubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_.Swap(&other->str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageCheck_SubMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessageCheck::InitAsDefaultInstance() {
  ::foo::_TestMessageCheck_default_instance_._instance.get_mutable()->required_msg_ = const_cast< ::foo::TestMessageCheck_SubMessage*>(
      ::foo::TestMessageCheck_SubMessage::internal_default_instance());
  ::foo::_TestMessageCheck_default_instance_._instance.get_mutable()->optional_msg_ = const_cast< ::foo::TestMessageCheck_SubMessage*>(
      ::foo::TestMessageCheck_SubMessage::internal_default_instance());
}
class TestMessageCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessageCheck>()._has_bits_);
  static const ::foo::TestMessageCheck_SubMessage& required_msg(const TestMessageCheck* msg);
  static void set_has_required_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::foo::TestMessageCheck_SubMessage& optional_msg(const TestMessageCheck* msg);
  static void set_has_optional_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_required_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000015) ^ 0x00000015) != 0;
  }
};

const ::foo::TestMessageCheck_SubMessage&
TestMessageCheck::_Internal::required_msg(const TestMessageCheck* msg) {
  return *msg->required_msg_;
}
const ::foo::TestMessageCheck_SubMessage&
TestMessageCheck::_Internal::optional_msg(const TestMessageCheck* msg) {
  return *msg->optional_msg_;
}
TestMessageCheck::TestMessageCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  repeated_msg_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessageCheck)
}
TestMessageCheck::TestMessageCheck(const TestMessageCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_msg_(from.repeated_msg_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_string()) {
    required_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_required_string(),
      GetArena());
  }
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_string(),
      GetArena());
  }
  required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_bytes()) {
    required_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_required_bytes(),
      GetArena());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_optional_bytes(),
      GetArena());
  }
  if (from._internal_has_required_msg()) {
    required_msg_ = new ::foo::TestMessageCheck_SubMessage(*from.required_msg_);
  } else {
    required_msg_ = nullptr;
  }
  if (from._internal_has_optional_msg()) {
    optional_msg_ = new ::foo::TestMessageCheck_SubMessage(*from.optional_msg_);
  } else {
    optional_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessageCheck)
}

void TestMessageCheck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessageCheck_t_2ftest_2dfull_2eproto.base);
  required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&required_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_msg_) -
      reinterpret_cast<char*>(&required_msg_)) + sizeof(optional_msg_));
}

TestMessageCheck::~TestMessageCheck() {
  // @@protoc_insertion_point(destructor:foo.TestMessageCheck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessageCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  required_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete required_msg_;
  if (this != internal_default_instance()) delete optional_msg_;
}

void TestMessageCheck::ArenaDtor(void* object) {
  TestMessageCheck* _this = reinterpret_cast< TestMessageCheck* >(object);
  (void)_this;
}
void TestMessageCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessageCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessageCheck& TestMessageCheck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessageCheck_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessageCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessageCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_msg_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      required_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      required_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(required_msg_ != nullptr);
      required_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optional_msg_ != nullptr);
      optional_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessageCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .foo.TestMessageCheck.SubMessage required_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .foo.TestMessageCheck.SubMessage repeated_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .foo.TestMessageCheck.SubMessage optional_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string required_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_required_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessageCheck.required_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessageCheck.repeated_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "foo.TestMessageCheck.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes required_bytes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_required_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessageCheck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessageCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .foo.TestMessageCheck.SubMessage required_msg = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::required_msg(this), target, stream);
  }

  // repeated .foo.TestMessageCheck.SubMessage repeated_msg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_repeated_msg(i), target, stream);
  }

  // optional .foo.TestMessageCheck.SubMessage optional_msg = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::optional_msg(this), target, stream);
  }

  // required string required_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_string().data(), static_cast<int>(this->_internal_required_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessageCheck.required_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_required_string(), target);
  }

  // repeated string repeated_string = 5;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessageCheck.repeated_string");
    target = stream->WriteString(5, s, target);
  }

  // optional string optional_string = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "foo.TestMessageCheck.optional_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_optional_string(), target);
  }

  // required bytes required_bytes = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_required_bytes(), target);
  }

  // repeated bytes repeated_bytes = 8;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(8, s, target);
  }

  // optional bytes optional_bytes = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_optional_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessageCheck)
  return target;
}

size_t TestMessageCheck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:foo.TestMessageCheck)
  size_t total_size = 0;

  if (_internal_has_required_string()) {
    // required string required_string = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());
  }

  if (_internal_has_required_bytes()) {
    // required bytes required_bytes = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());
  }

  if (_internal_has_required_msg()) {
    // required .foo.TestMessageCheck.SubMessage required_msg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);
  }

  return total_size;
}
size_t TestMessageCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessageCheck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000015) ^ 0x00000015) == 0) {  // All required fields are present.
    // required string required_string = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());

    // required bytes required_bytes = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());

    // required .foo.TestMessageCheck.SubMessage required_msg = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .foo.TestMessageCheck.SubMessage repeated_msg = 2;
  total_size += 1UL * this->_internal_repeated_msg_size();
  for (const auto& msg : this->repeated_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string repeated_string = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // optional string optional_string = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_optional_string());
  }

  // optional bytes optional_bytes = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_optional_bytes());
  }

  // optional .foo.TestMessageCheck.SubMessage optional_msg = 3;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optional_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessageCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessageCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessageCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessageCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessageCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessageCheck)
    MergeFrom(*source);
  }
}

void TestMessageCheck::MergeFrom(const TestMessageCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessageCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_msg_.MergeFrom(from.repeated_msg_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_required_string(from._internal_required_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_required_bytes(from._internal_required_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_required_msg()->::foo::TestMessageCheck_SubMessage::MergeFrom(from._internal_required_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optional_msg()->::foo::TestMessageCheck_SubMessage::MergeFrom(from._internal_optional_msg());
    }
  }
}

void TestMessageCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessageCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessageCheck::CopyFrom(const TestMessageCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessageCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessageCheck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_msg_)) return false;
  if (_internal_has_required_msg()) {
    if (!required_msg_->IsInitialized()) return false;
  }
  if (_internal_has_optional_msg()) {
    if (!optional_msg_->IsInitialized()) return false;
  }
  return true;
}

void TestMessageCheck::InternalSwap(TestMessageCheck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_msg_.InternalSwap(&other->repeated_msg_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  required_string_.Swap(&other->required_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_string_.Swap(&other->optional_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  required_bytes_.Swap(&other->required_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  optional_bytes_.Swap(&other->optional_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessageCheck, optional_msg_)
      + sizeof(TestMessageCheck::optional_msg_)
      - PROTOBUF_FIELD_OFFSET(TestMessageCheck, required_msg_)>(
          reinterpret_cast<char*>(&required_msg_),
          reinterpret_cast<char*>(&other->required_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessageCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMessSubMess::InitAsDefaultInstance() {
  ::foo::_TestMessSubMess_default_instance_._instance.get_mutable()->rep_mess_ = const_cast< ::foo::TestMess*>(
      ::foo::TestMess::internal_default_instance());
  ::foo::_TestMessSubMess_default_instance_._instance.get_mutable()->opt_mess_ = const_cast< ::foo::TestMessOptional*>(
      ::foo::TestMessOptional::internal_default_instance());
  ::foo::_TestMessSubMess_default_instance_._instance.get_mutable()->oneof_mess_ = const_cast< ::foo::TestMessOneof*>(
      ::foo::TestMessOneof::internal_default_instance());
  ::foo::_TestMessSubMess_default_instance_._instance.get_mutable()->req_mess_ = const_cast< ::foo::SubMess*>(
      ::foo::SubMess::internal_default_instance());
  ::foo::_TestMessSubMess_default_instance_._instance.get_mutable()->def_mess_ = const_cast< ::foo::DefaultOptionalValues*>(
      ::foo::DefaultOptionalValues::internal_default_instance());
}
class TestMessSubMess::_Internal {
 public:
  using HasBits = decltype(std::declval<TestMessSubMess>()._has_bits_);
  static const ::foo::TestMess& rep_mess(const TestMessSubMess* msg);
  static void set_has_rep_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::foo::TestMessOptional& opt_mess(const TestMessSubMess* msg);
  static void set_has_opt_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::foo::TestMessOneof& oneof_mess(const TestMessSubMess* msg);
  static void set_has_oneof_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::foo::SubMess& req_mess(const TestMessSubMess* msg);
  static void set_has_req_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::foo::DefaultOptionalValues& def_mess(const TestMessSubMess* msg);
  static void set_has_def_mess(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::foo::TestMess&
TestMessSubMess::_Internal::rep_mess(const TestMessSubMess* msg) {
  return *msg->rep_mess_;
}
const ::foo::TestMessOptional&
TestMessSubMess::_Internal::opt_mess(const TestMessSubMess* msg) {
  return *msg->opt_mess_;
}
const ::foo::TestMessOneof&
TestMessSubMess::_Internal::oneof_mess(const TestMessSubMess* msg) {
  return *msg->oneof_mess_;
}
const ::foo::SubMess&
TestMessSubMess::_Internal::req_mess(const TestMessSubMess* msg) {
  return *msg->req_mess_;
}
const ::foo::DefaultOptionalValues&
TestMessSubMess::_Internal::def_mess(const TestMessSubMess* msg) {
  return *msg->def_mess_;
}
TestMessSubMess::TestMessSubMess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:foo.TestMessSubMess)
}
TestMessSubMess::TestMessSubMess(const TestMessSubMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rep_mess()) {
    rep_mess_ = new ::foo::TestMess(*from.rep_mess_);
  } else {
    rep_mess_ = nullptr;
  }
  if (from._internal_has_opt_mess()) {
    opt_mess_ = new ::foo::TestMessOptional(*from.opt_mess_);
  } else {
    opt_mess_ = nullptr;
  }
  if (from._internal_has_oneof_mess()) {
    oneof_mess_ = new ::foo::TestMessOneof(*from.oneof_mess_);
  } else {
    oneof_mess_ = nullptr;
  }
  if (from._internal_has_req_mess()) {
    req_mess_ = new ::foo::SubMess(*from.req_mess_);
  } else {
    req_mess_ = nullptr;
  }
  if (from._internal_has_def_mess()) {
    def_mess_ = new ::foo::DefaultOptionalValues(*from.def_mess_);
  } else {
    def_mess_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:foo.TestMessSubMess)
}

void TestMessSubMess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMessSubMess_t_2ftest_2dfull_2eproto.base);
  ::memset(&rep_mess_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_mess_) -
      reinterpret_cast<char*>(&rep_mess_)) + sizeof(def_mess_));
}

TestMessSubMess::~TestMessSubMess() {
  // @@protoc_insertion_point(destructor:foo.TestMessSubMess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMessSubMess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rep_mess_;
  if (this != internal_default_instance()) delete opt_mess_;
  if (this != internal_default_instance()) delete oneof_mess_;
  if (this != internal_default_instance()) delete req_mess_;
  if (this != internal_default_instance()) delete def_mess_;
}

void TestMessSubMess::ArenaDtor(void* object) {
  TestMessSubMess* _this = reinterpret_cast< TestMessSubMess* >(object);
  (void)_this;
}
void TestMessSubMess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMessSubMess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMessSubMess& TestMessSubMess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMessSubMess_t_2ftest_2dfull_2eproto.base);
  return *internal_default_instance();
}


void TestMessSubMess::Clear() {
// @@protoc_insertion_point(message_clear_start:foo.TestMessSubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rep_mess_ != nullptr);
      rep_mess_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(opt_mess_ != nullptr);
      opt_mess_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(oneof_mess_ != nullptr);
      oneof_mess_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(req_mess_ != nullptr);
      req_mess_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(def_mess_ != nullptr);
      def_mess_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMessSubMess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .foo.TestMess rep_mess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rep_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .foo.TestMessOptional opt_mess = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_opt_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .foo.TestMessOneof oneof_mess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .foo.SubMess req_mess = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_req_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .foo.DefaultOptionalValues def_mess = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_def_mess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMessSubMess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foo.TestMessSubMess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .foo.TestMess rep_mess = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rep_mess(this), target, stream);
  }

  // required .foo.TestMessOptional opt_mess = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::opt_mess(this), target, stream);
  }

  // required .foo.TestMessOneof oneof_mess = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::oneof_mess(this), target, stream);
  }

  // required .foo.SubMess req_mess = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::req_mess(this), target, stream);
  }

  // required .foo.DefaultOptionalValues def_mess = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::def_mess(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foo.TestMessSubMess)
  return target;
}

size_t TestMessSubMess::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:foo.TestMessSubMess)
  size_t total_size = 0;

  if (_internal_has_rep_mess()) {
    // required .foo.TestMess rep_mess = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rep_mess_);
  }

  if (_internal_has_opt_mess()) {
    // required .foo.TestMessOptional opt_mess = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opt_mess_);
  }

  if (_internal_has_oneof_mess()) {
    // required .foo.TestMessOneof oneof_mess = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oneof_mess_);
  }

  if (_internal_has_req_mess()) {
    // required .foo.SubMess req_mess = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_mess_);
  }

  if (_internal_has_def_mess()) {
    // required .foo.DefaultOptionalValues def_mess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *def_mess_);
  }

  return total_size;
}
size_t TestMessSubMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foo.TestMessSubMess)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .foo.TestMess rep_mess = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rep_mess_);

    // required .foo.TestMessOptional opt_mess = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opt_mess_);

    // required .foo.TestMessOneof oneof_mess = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oneof_mess_);

    // required .foo.SubMess req_mess = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_mess_);

    // required .foo.DefaultOptionalValues def_mess = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *def_mess_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMessSubMess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foo.TestMessSubMess)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMessSubMess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMessSubMess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foo.TestMessSubMess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foo.TestMessSubMess)
    MergeFrom(*source);
  }
}

void TestMessSubMess::MergeFrom(const TestMessSubMess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foo.TestMessSubMess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rep_mess()->::foo::TestMess::MergeFrom(from._internal_rep_mess());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_opt_mess()->::foo::TestMessOptional::MergeFrom(from._internal_opt_mess());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_oneof_mess()->::foo::TestMessOneof::MergeFrom(from._internal_oneof_mess());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_req_mess()->::foo::SubMess::MergeFrom(from._internal_req_mess());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_def_mess()->::foo::DefaultOptionalValues::MergeFrom(from._internal_def_mess());
    }
  }
}

void TestMessSubMess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foo.TestMessSubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessSubMess::CopyFrom(const TestMessSubMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foo.TestMessSubMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessSubMess::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_rep_mess()) {
    if (!rep_mess_->IsInitialized()) return false;
  }
  if (_internal_has_opt_mess()) {
    if (!opt_mess_->IsInitialized()) return false;
  }
  if (_internal_has_oneof_mess()) {
    if (!oneof_mess_->IsInitialized()) return false;
  }
  if (_internal_has_req_mess()) {
    if (!req_mess_->IsInitialized()) return false;
  }
  return true;
}

void TestMessSubMess::InternalSwap(TestMessSubMess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMessSubMess, def_mess_)
      + sizeof(TestMessSubMess::def_mess_)
      - PROTOBUF_FIELD_OFFSET(TestMessSubMess, rep_mess_)>(
          reinterpret_cast<char*>(&rep_mess_),
          reinterpret_cast<char*>(&other->rep_mess_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMessSubMess::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace foo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foo::SubMess_SubSubMess* Arena::CreateMaybeMessage< ::foo::SubMess_SubSubMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::SubMess_SubSubMess >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::SubMess* Arena::CreateMaybeMessage< ::foo::SubMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::SubMess >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo15* Arena::CreateMaybeMessage< ::foo::TestFieldNo15 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo15 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo16* Arena::CreateMaybeMessage< ::foo::TestFieldNo16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo16 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo2047* Arena::CreateMaybeMessage< ::foo::TestFieldNo2047 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo2047 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo2048* Arena::CreateMaybeMessage< ::foo::TestFieldNo2048 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo2048 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo262143* Arena::CreateMaybeMessage< ::foo::TestFieldNo262143 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo262143 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo262144* Arena::CreateMaybeMessage< ::foo::TestFieldNo262144 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo262144 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo33554431* Arena::CreateMaybeMessage< ::foo::TestFieldNo33554431 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo33554431 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldNo33554432* Arena::CreateMaybeMessage< ::foo::TestFieldNo33554432 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldNo33554432 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMess* Arena::CreateMaybeMessage< ::foo::TestMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMess >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessPacked* Arena::CreateMaybeMessage< ::foo::TestMessPacked >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessPacked >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessOptional* Arena::CreateMaybeMessage< ::foo::TestMessOptional >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessOptional >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessOneof* Arena::CreateMaybeMessage< ::foo::TestMessOneof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessOneof >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredInt32* Arena::CreateMaybeMessage< ::foo::TestMessRequiredInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredSInt32* Arena::CreateMaybeMessage< ::foo::TestMessRequiredSInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredSInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredSFixed32* Arena::CreateMaybeMessage< ::foo::TestMessRequiredSFixed32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredSFixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredInt64* Arena::CreateMaybeMessage< ::foo::TestMessRequiredInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredSInt64* Arena::CreateMaybeMessage< ::foo::TestMessRequiredSInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredSInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredSFixed64* Arena::CreateMaybeMessage< ::foo::TestMessRequiredSFixed64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredSFixed64 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredUInt32* Arena::CreateMaybeMessage< ::foo::TestMessRequiredUInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredUInt32 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredFixed32* Arena::CreateMaybeMessage< ::foo::TestMessRequiredFixed32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredFixed32 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredUInt64* Arena::CreateMaybeMessage< ::foo::TestMessRequiredUInt64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredUInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredFixed64* Arena::CreateMaybeMessage< ::foo::TestMessRequiredFixed64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredFixed64 >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredFloat* Arena::CreateMaybeMessage< ::foo::TestMessRequiredFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredDouble* Arena::CreateMaybeMessage< ::foo::TestMessRequiredDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredBool* Arena::CreateMaybeMessage< ::foo::TestMessRequiredBool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredBool >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredEnum* Arena::CreateMaybeMessage< ::foo::TestMessRequiredEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredEnumSmall* Arena::CreateMaybeMessage< ::foo::TestMessRequiredEnumSmall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredEnumSmall >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredString* Arena::CreateMaybeMessage< ::foo::TestMessRequiredString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredString >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredBytes* Arena::CreateMaybeMessage< ::foo::TestMessRequiredBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessRequiredMessage* Arena::CreateMaybeMessage< ::foo::TestMessRequiredMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessRequiredMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::EmptyMess* Arena::CreateMaybeMessage< ::foo::EmptyMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::EmptyMess >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::DefaultRequiredValues* Arena::CreateMaybeMessage< ::foo::DefaultRequiredValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::DefaultRequiredValues >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::DefaultOptionalValues* Arena::CreateMaybeMessage< ::foo::DefaultOptionalValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::DefaultOptionalValues >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::LowerCase* Arena::CreateMaybeMessage< ::foo::LowerCase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::LowerCase >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::AllocValues* Arena::CreateMaybeMessage< ::foo::AllocValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::AllocValues >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestRequiredFieldsBitmap* Arena::CreateMaybeMessage< ::foo::TestRequiredFieldsBitmap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestRequiredFieldsBitmap >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestFieldFlags* Arena::CreateMaybeMessage< ::foo::TestFieldFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestFieldFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessageCheck_SubMessage* Arena::CreateMaybeMessage< ::foo::TestMessageCheck_SubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessageCheck_SubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessageCheck* Arena::CreateMaybeMessage< ::foo::TestMessageCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessageCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::foo::TestMessSubMess* Arena::CreateMaybeMessage< ::foo::TestMessSubMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foo::TestMessSubMess >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
