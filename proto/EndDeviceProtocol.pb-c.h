/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/enddeviceprotocol.proto */

#ifndef PROTOBUF_C_proto_2fenddeviceprotocol_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fenddeviceprotocol_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct EndDeviceProtocol__Data EndDeviceProtocol__Data;
typedef struct EndDeviceProtocol__Output EndDeviceProtocol__Output;
typedef struct EndDeviceProtocol__Output__QueryResponse EndDeviceProtocol__Output__QueryResponse;
typedef struct EndDeviceProtocol__Expression EndDeviceProtocol__Expression;
typedef struct EndDeviceProtocol__MapOperation EndDeviceProtocol__MapOperation;
typedef struct EndDeviceProtocol__FilterOperation EndDeviceProtocol__FilterOperation;
typedef struct EndDeviceProtocol__WindowOperation EndDeviceProtocol__WindowOperation;
typedef struct EndDeviceProtocol__Operation EndDeviceProtocol__Operation;
typedef struct EndDeviceProtocol__Query EndDeviceProtocol__Query;
typedef struct EndDeviceProtocol__Message EndDeviceProtocol__Message;


/* --- enums --- */

typedef enum _EndDeviceProtocol__ExpressionInstructions {
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__CONST = 0,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__VAR = 1,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__AND = 2,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__OR = 3,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__NOT = 4,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__LT = 5,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__GT = 6,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__EQ = 7,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__ADD = 8,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__SUB = 9,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__MUL = 10,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__DIV = 11,
  END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS__MOD = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(END_DEVICE_PROTOCOL__EXPRESSION_INSTRUCTIONS)
} EndDeviceProtocol__ExpressionInstructions;
typedef enum _EndDeviceProtocol__WindowAggregationType {
  END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__MIN = 0,
  END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__MAX = 1,
  END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__SUM = 2,
  END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__AVG = 3,
  END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__COUNT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE)
} EndDeviceProtocol__WindowAggregationType;
typedef enum _EndDeviceProtocol__WindowSizeType {
  END_DEVICE_PROTOCOL__WINDOW_SIZE_TYPE__TIMEBASED = 0,
  END_DEVICE_PROTOCOL__WINDOW_SIZE_TYPE__COUNTBASED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(END_DEVICE_PROTOCOL__WINDOW_SIZE_TYPE)
} EndDeviceProtocol__WindowSizeType;

/* --- messages --- */

typedef enum {
  END_DEVICE_PROTOCOL__DATA__DATA__NOT_SET = 0,
  END_DEVICE_PROTOCOL__DATA__DATA_INSTRUCTION = 1,
  END_DEVICE_PROTOCOL__DATA__DATA__UINT8 = 2,
  END_DEVICE_PROTOCOL__DATA__DATA__UINT16 = 3,
  END_DEVICE_PROTOCOL__DATA__DATA__UINT32 = 4,
  END_DEVICE_PROTOCOL__DATA__DATA__UINT64 = 5,
  END_DEVICE_PROTOCOL__DATA__DATA__INT8 = 6,
  END_DEVICE_PROTOCOL__DATA__DATA__INT16 = 7,
  END_DEVICE_PROTOCOL__DATA__DATA__INT32 = 8,
  END_DEVICE_PROTOCOL__DATA__DATA__INT64 = 9,
  END_DEVICE_PROTOCOL__DATA__DATA__FLOAT = 10,
  END_DEVICE_PROTOCOL__DATA__DATA__DOUBLE = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(END_DEVICE_PROTOCOL__DATA__DATA__CASE)
} EndDeviceProtocol__Data__DataCase;

struct  EndDeviceProtocol__Data
{
  ProtobufCMessage base;
  EndDeviceProtocol__Data__DataCase data_case;
  union {
    EndDeviceProtocol__ExpressionInstructions instruction;
    uint32_t _uint8;
    uint32_t _uint16;
    uint32_t _uint32;
    uint64_t _uint64;
    int32_t _int8;
    int32_t _int16;
    int32_t _int32;
    int64_t _int64;
    float _float;
    double _double;
  };
};
#define END_DEVICE_PROTOCOL__DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__data__descriptor) \
    , END_DEVICE_PROTOCOL__DATA__DATA__NOT_SET, {0} }


struct  EndDeviceProtocol__Output__QueryResponse
{
  ProtobufCMessage base;
  int32_t id;
  size_t n_response;
  EndDeviceProtocol__Data **response;
};
#define END_DEVICE_PROTOCOL__OUTPUT__QUERY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__output__query_response__descriptor) \
    , 0, 0,NULL }


struct  EndDeviceProtocol__Output
{
  ProtobufCMessage base;
  size_t n_responses;
  EndDeviceProtocol__Output__QueryResponse **responses;
};
#define END_DEVICE_PROTOCOL__OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__output__descriptor) \
    , 0,NULL }


struct  EndDeviceProtocol__Expression
{
  ProtobufCMessage base;
  size_t n_instructions;
  EndDeviceProtocol__Data **instructions;
};
#define END_DEVICE_PROTOCOL__EXPRESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__expression__descriptor) \
    , 0,NULL }


struct  EndDeviceProtocol__MapOperation
{
  ProtobufCMessage base;
  size_t n_function;
  EndDeviceProtocol__Data **function;
  int32_t attribute;
};
#define END_DEVICE_PROTOCOL__MAP_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__map_operation__descriptor) \
    , 0,NULL, 0 }


struct  EndDeviceProtocol__FilterOperation
{
  ProtobufCMessage base;
  size_t n_predicate;
  EndDeviceProtocol__Data **predicate;
};
#define END_DEVICE_PROTOCOL__FILTER_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__filter_operation__descriptor) \
    , 0,NULL }


struct  EndDeviceProtocol__WindowOperation
{
  ProtobufCMessage base;
  int32_t size;
  EndDeviceProtocol__WindowSizeType sizetype;
  EndDeviceProtocol__WindowAggregationType aggregationtype;
  int32_t startattribute;
  int32_t endattribute;
  int32_t resultattribute;
  int32_t readattribute;
};
#define END_DEVICE_PROTOCOL__WINDOW_OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__window_operation__descriptor) \
    , 0, END_DEVICE_PROTOCOL__WINDOW_SIZE_TYPE__TIMEBASED, END_DEVICE_PROTOCOL__WINDOW_AGGREGATION_TYPE__MIN, 0, 0, 0, 0 }


typedef enum {
  END_DEVICE_PROTOCOL__OPERATION__OPERATION__NOT_SET = 0,
  END_DEVICE_PROTOCOL__OPERATION__OPERATION_MAP = 1,
  END_DEVICE_PROTOCOL__OPERATION__OPERATION_FILTER = 2,
  END_DEVICE_PROTOCOL__OPERATION__OPERATION_WINDOW = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(END_DEVICE_PROTOCOL__OPERATION__OPERATION__CASE)
} EndDeviceProtocol__Operation__OperationCase;

struct  EndDeviceProtocol__Operation
{
  ProtobufCMessage base;
  EndDeviceProtocol__Operation__OperationCase operation_case;
  union {
    EndDeviceProtocol__MapOperation *map;
    EndDeviceProtocol__FilterOperation *filter;
    EndDeviceProtocol__WindowOperation *window;
  };
};
#define END_DEVICE_PROTOCOL__OPERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__operation__descriptor) \
    , END_DEVICE_PROTOCOL__OPERATION__OPERATION__NOT_SET, {0} }


struct  EndDeviceProtocol__Query
{
  ProtobufCMessage base;
  /*
   *bytes resultType = 1; //For some reason minipb breaks if I make this a repeated enum or int32
   */
  size_t n_operations;
  EndDeviceProtocol__MapOperation **operations;
};
#define END_DEVICE_PROTOCOL__QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__query__descriptor) \
    , 0,NULL }


struct  EndDeviceProtocol__Message
{
  ProtobufCMessage base;
  size_t n_queries;
  EndDeviceProtocol__Query **queries;
};
#define END_DEVICE_PROTOCOL__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&end_device_protocol__message__descriptor) \
    , 0,NULL }


/* EndDeviceProtocol__Data methods */
void   end_device_protocol__data__init
                     (EndDeviceProtocol__Data         *message);
size_t end_device_protocol__data__get_packed_size
                     (const EndDeviceProtocol__Data   *message);
size_t end_device_protocol__data__pack
                     (const EndDeviceProtocol__Data   *message,
                      uint8_t             *out);
size_t end_device_protocol__data__pack_to_buffer
                     (const EndDeviceProtocol__Data   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Data *
       end_device_protocol__data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__data__free_unpacked
                     (EndDeviceProtocol__Data *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__Output__QueryResponse methods */
void   end_device_protocol__output__query_response__init
                     (EndDeviceProtocol__Output__QueryResponse         *message);
/* EndDeviceProtocol__Output methods */
void   end_device_protocol__output__init
                     (EndDeviceProtocol__Output         *message);
size_t end_device_protocol__output__get_packed_size
                     (const EndDeviceProtocol__Output   *message);
size_t end_device_protocol__output__pack
                     (const EndDeviceProtocol__Output   *message,
                      uint8_t             *out);
size_t end_device_protocol__output__pack_to_buffer
                     (const EndDeviceProtocol__Output   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Output *
       end_device_protocol__output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__output__free_unpacked
                     (EndDeviceProtocol__Output *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__Expression methods */
void   end_device_protocol__expression__init
                     (EndDeviceProtocol__Expression         *message);
size_t end_device_protocol__expression__get_packed_size
                     (const EndDeviceProtocol__Expression   *message);
size_t end_device_protocol__expression__pack
                     (const EndDeviceProtocol__Expression   *message,
                      uint8_t             *out);
size_t end_device_protocol__expression__pack_to_buffer
                     (const EndDeviceProtocol__Expression   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Expression *
       end_device_protocol__expression__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__expression__free_unpacked
                     (EndDeviceProtocol__Expression *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__MapOperation methods */
void   end_device_protocol__map_operation__init
                     (EndDeviceProtocol__MapOperation         *message);
size_t end_device_protocol__map_operation__get_packed_size
                     (const EndDeviceProtocol__MapOperation   *message);
size_t end_device_protocol__map_operation__pack
                     (const EndDeviceProtocol__MapOperation   *message,
                      uint8_t             *out);
size_t end_device_protocol__map_operation__pack_to_buffer
                     (const EndDeviceProtocol__MapOperation   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__MapOperation *
       end_device_protocol__map_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__map_operation__free_unpacked
                     (EndDeviceProtocol__MapOperation *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__FilterOperation methods */
void   end_device_protocol__filter_operation__init
                     (EndDeviceProtocol__FilterOperation         *message);
size_t end_device_protocol__filter_operation__get_packed_size
                     (const EndDeviceProtocol__FilterOperation   *message);
size_t end_device_protocol__filter_operation__pack
                     (const EndDeviceProtocol__FilterOperation   *message,
                      uint8_t             *out);
size_t end_device_protocol__filter_operation__pack_to_buffer
                     (const EndDeviceProtocol__FilterOperation   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__FilterOperation *
       end_device_protocol__filter_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__filter_operation__free_unpacked
                     (EndDeviceProtocol__FilterOperation *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__WindowOperation methods */
void   end_device_protocol__window_operation__init
                     (EndDeviceProtocol__WindowOperation         *message);
size_t end_device_protocol__window_operation__get_packed_size
                     (const EndDeviceProtocol__WindowOperation   *message);
size_t end_device_protocol__window_operation__pack
                     (const EndDeviceProtocol__WindowOperation   *message,
                      uint8_t             *out);
size_t end_device_protocol__window_operation__pack_to_buffer
                     (const EndDeviceProtocol__WindowOperation   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__WindowOperation *
       end_device_protocol__window_operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__window_operation__free_unpacked
                     (EndDeviceProtocol__WindowOperation *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__Operation methods */
void   end_device_protocol__operation__init
                     (EndDeviceProtocol__Operation         *message);
size_t end_device_protocol__operation__get_packed_size
                     (const EndDeviceProtocol__Operation   *message);
size_t end_device_protocol__operation__pack
                     (const EndDeviceProtocol__Operation   *message,
                      uint8_t             *out);
size_t end_device_protocol__operation__pack_to_buffer
                     (const EndDeviceProtocol__Operation   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Operation *
       end_device_protocol__operation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__operation__free_unpacked
                     (EndDeviceProtocol__Operation *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__Query methods */
void   end_device_protocol__query__init
                     (EndDeviceProtocol__Query         *message);
size_t end_device_protocol__query__get_packed_size
                     (const EndDeviceProtocol__Query   *message);
size_t end_device_protocol__query__pack
                     (const EndDeviceProtocol__Query   *message,
                      uint8_t             *out);
size_t end_device_protocol__query__pack_to_buffer
                     (const EndDeviceProtocol__Query   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Query *
       end_device_protocol__query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__query__free_unpacked
                     (EndDeviceProtocol__Query *message,
                      ProtobufCAllocator *allocator);
/* EndDeviceProtocol__Message methods */
void   end_device_protocol__message__init
                     (EndDeviceProtocol__Message         *message);
size_t end_device_protocol__message__get_packed_size
                     (const EndDeviceProtocol__Message   *message);
size_t end_device_protocol__message__pack
                     (const EndDeviceProtocol__Message   *message,
                      uint8_t             *out);
size_t end_device_protocol__message__pack_to_buffer
                     (const EndDeviceProtocol__Message   *message,
                      ProtobufCBuffer     *buffer);
EndDeviceProtocol__Message *
       end_device_protocol__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   end_device_protocol__message__free_unpacked
                     (EndDeviceProtocol__Message *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*EndDeviceProtocol__Data_Closure)
                 (const EndDeviceProtocol__Data *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Output__QueryResponse_Closure)
                 (const EndDeviceProtocol__Output__QueryResponse *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Output_Closure)
                 (const EndDeviceProtocol__Output *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Expression_Closure)
                 (const EndDeviceProtocol__Expression *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__MapOperation_Closure)
                 (const EndDeviceProtocol__MapOperation *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__FilterOperation_Closure)
                 (const EndDeviceProtocol__FilterOperation *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__WindowOperation_Closure)
                 (const EndDeviceProtocol__WindowOperation *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Operation_Closure)
                 (const EndDeviceProtocol__Operation *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Query_Closure)
                 (const EndDeviceProtocol__Query *message,
                  void *closure_data);
typedef void (*EndDeviceProtocol__Message_Closure)
                 (const EndDeviceProtocol__Message *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    end_device_protocol__expression_instructions__descriptor;
extern const ProtobufCEnumDescriptor    end_device_protocol__window_aggregation_type__descriptor;
extern const ProtobufCEnumDescriptor    end_device_protocol__window_size_type__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__data__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__output__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__output__query_response__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__expression__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__map_operation__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__filter_operation__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__window_operation__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__operation__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__query__descriptor;
extern const ProtobufCMessageDescriptor end_device_protocol__message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fenddeviceprotocol_2eproto__INCLUDED */
